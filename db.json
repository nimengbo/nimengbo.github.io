{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/uploads/wechat-qcode.jpg","path":"uploads/wechat-qcode.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/concurrent.png","path":"images/concurrent.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/多线程.png","path":"images/多线程.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/threadStatus.png","path":"images/threadStatus.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/thread_lifecycle.gif","path":"images/thread_lifecycle.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/donation.png","path":"images/donation.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/manifest.png","path":"images/manifest.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/runnable.png","path":"images/runnable.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/threadRun.png","path":"images/threadRun.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/threadStart.png","path":"images/threadStart.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/images/Thread.png","path":"images/Thread.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/BlockingQueue.png","path":"images/BlockingQueue.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"d1478d5409eb17a6d5e7d0515ecbf0ba580618c7","modified":1447777845000},{"_id":"source/.DS_Store","hash":"8fca0188e74a5565b28458aab0279f85cd88b52c","modified":1568774884911},{"_id":"source/CNAME","hash":"0809e9656dfb9e8469678c69b453c9d55a6fef7d","modified":1447683222000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1471422407000},{"_id":"themes/next/.DS_Store","hash":"4ede4104e6cb20ffdb98fdc2d8f945c4266b3c78","modified":1490769648000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1471422407000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1471422407000},{"_id":"themes/next/.gitignore","hash":"c8d6a73b9e17f0f8a3716e4ada6960d3180425a6","modified":1471422407000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1471422407000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1471422407000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1471422407000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1471422407000},{"_id":"themes/next/_config.yml","hash":"42d1f5920c4a7be2b443afe34823d49aa7aa24d5","modified":1490769897000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1471422407000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1471422407000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1471422407000},{"_id":"source/_posts/.DS_Store","hash":"186766e9b2a11def6cb2207080b5611f7d42d9be","modified":1469609667000},{"_id":"source/_posts/Android-学习IPC之个人总结.md","hash":"68ded2340d4a90eab77637d94bad75aec7749966","modified":1550957688937},{"_id":"source/_posts/AndroidLearningSummarize.md","hash":"e04b9b0697be69af7d35d552e8a7d7006fc0d5ec","modified":1462874085000},{"_id":"source/_posts/AndroidMultipeThreadProgram.md","hash":"dbbd286c31cdc177e5b88e587fc45e68710bd7b4","modified":1472093466000},{"_id":"source/_posts/AndroidMultipeThreadProgramIntermediate.md","hash":"a9c8347c4ccb37337e3c294b9255dc0d8a7998da","modified":1473328623000},{"_id":"source/_posts/AndroidToRN1.md","hash":"9933d5a66a5d716aaefd4d0fdf4d30342313870f","modified":1479792547000},{"_id":"source/_posts/AndroidProjectFromZero.md","hash":"9ebb293dd1f67e09e09110d8c7645dc40a36f596","modified":1469080324000},{"_id":"source/_posts/componetizationForPage.md","hash":"bd8837c596061a1c22bfb148448df6b10799cb68","modified":1479800859000},{"_id":"source/_posts/WhatIsTheGit.md","hash":"6ac957a0f3b5099be4b6310f832c1b4b8e84b7f3","modified":1469073454000},{"_id":"source/_posts/componetization.md","hash":"44eb751a144600a1ed4693b3170a572f50feb032","modified":1479792666000},{"_id":"source/_posts/gitcarefulness.md","hash":"fe3c8d363798994eb369db6f93eb0a2b991044a3","modified":1470025460000},{"_id":"source/_posts/endOf2016.md","hash":"4dc5a8ba8cb3a8b60017333dfd9ace6959960a80","modified":1484812986000},{"_id":"source/_posts/react-native-for-android-重构与优化.md","hash":"eec588912d5ee71d46bc1d4164c7bb2d9cffe385","modified":1569067845784},{"_id":"source/_posts/react-native-预加载优化.md","hash":"910ea0ad1b3794e5d364032362b27cf9af033382","modified":1568778064849},{"_id":"source/_posts/gitrevert.md","hash":"6d6d2999aab227a4afe83d4b5f762f4d216f225f","modified":1469764300000},{"_id":"source/_posts/gitbranch.md","hash":"4ccf589c13b499f55c479ca82b9f6386a6c0ba10","modified":1469680204000},{"_id":"source/_posts/createYourRepository.md","hash":"864251a6bf7bea3123749e827b7ccef2f4184dd9","modified":1469072664000},{"_id":"source/_posts/事件分发之现学现用.md","hash":"f4fc36c4b2eb96c7c1bf62bdcbe3e8e046de7c59","modified":1469606837000},{"_id":"source/_posts/异乡-2015年.md","hash":"e14441a8aac93b727dfb1c2be83726273b28cbec","modified":1448012285000},{"_id":"source/categories/.DS_Store","hash":"0203e668175914dff6a72b324de111ecf675c428","modified":1447775783000},{"_id":"source/categories/index.md","hash":"e92a33ae058772c7baf94b5f76f5f3585b808b72","modified":1447776748000},{"_id":"source/tags/index.md","hash":"a477505cfeda0eac2bdc4d1f0bd98bf2739c1333","modified":1447777036000},{"_id":"source/tags/.DS_Store","hash":"0203e668175914dff6a72b324de111ecf675c428","modified":1447776690000},{"_id":"source/uploads/wechat-qcode.jpg","hash":"e42eb57242ced00a25ce22745ebdbd1ecdae1152","modified":1468994341000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1471422407000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1471422407000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1471422315000},{"_id":"themes/next/.git/packed-refs","hash":"c260c6d28e96faeec8fe2ead52f6103d079e2f0c","modified":1471422407000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1471422407000},{"_id":"themes/next/.git/index","hash":"8b4dc874868bd82b2929e86c097cd653e5fcc767","modified":1568723522572},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1471422407000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1471422407000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1471422407000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1471422407000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1471422407000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1471422407000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1471422407000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1471422407000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1471422407000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1471422407000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1471422407000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1471422407000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1471422407000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1471422407000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1471422407000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1471422407000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1471422407000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1471422407000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1471422407000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1471422407000},{"_id":"themes/next/layout/post.swig","hash":"fee24f24c9091f80f898599f28e04d6aedc23a66","modified":1471424198000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1471422407000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1471422407000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1471422407000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471422407000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1471422315000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1471422315000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1471422315000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1471422315000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1471422315000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1471422315000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1471422315000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1471422315000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1471422315000},{"_id":"themes/next/.git/logs/HEAD","hash":"71f002cd9011b6a212740112757f6df66bc2a378","modified":1471422407000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1471422315000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1471422407000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1471422407000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1471422407000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1471422407000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1471422407000},{"_id":"themes/next/source/images/avatar.jpg","hash":"1b2852c4e59d70bbd551b83a12d35834222b9fd2","modified":1447686115000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1471422407000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1471422407000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1471422407000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1471422407000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1471422407000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1471422407000},{"_id":"themes/next/source/images/concurrent.png","hash":"69b1fb75f0e12c1537c233297cc4370e9cc48177","modified":1471858431000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471422407000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1471422407000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1471422407000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1471422407000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471422407000},{"_id":"themes/next/source/images/多线程.png","hash":"640da6a42d81203c58e171279db2cbc96c0bfb1d","modified":1471419028000},{"_id":"themes/next/source/images/threadStatus.png","hash":"961fecd8b0ccdf04b4d9ee279c784fa6c0c55a1e","modified":1473243122000},{"_id":"themes/next/source/images/thread_lifecycle.gif","hash":"d7010bb79339e65844eac33e5ff499b85c4936b1","modified":1473237583000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1471422407000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1471422407000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1471422407000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1471422407000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1471422407000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1471422407000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1471422407000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1471422407000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1471422407000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"b73f9443bee2d3ea383aad52e49ffca8aa97dcc2","modified":1471422407000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1471422407000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1471422407000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1471422407000},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1471422407000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1471422407000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1471422407000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471422407000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471422407000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471422407000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471422407000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471422407000},{"_id":"themes/next/source/images/donation.png","hash":"5e87054c1adc42ca3c80a5db9c04a52aae974633","modified":1466072000000},{"_id":"themes/next/source/images/manifest.png","hash":"4d467b52ac19dcceea3c53b797923fbe4677c34d","modified":1476090209000},{"_id":"themes/next/source/images/runnable.png","hash":"004474bc746025609da2b0035751c886420594cc","modified":1471837976000},{"_id":"themes/next/source/images/threadRun.png","hash":"fa028e41989d63dd78dcc90d9037a40cf29aee2d","modified":1471839464000},{"_id":"themes/next/source/images/threadStart.png","hash":"ccd3d041a1c6e7a8b22cfe7f05979042dcc3e2b3","modified":1471840164000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471422407000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471422407000},{"_id":"themes/next/.git/refs/heads/master","hash":"283a77b25951fbb3b2f10b4be4c80b6519ac6011","modified":1471422407000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1471422407000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1471422407000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1471422407000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1471422407000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1471422407000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1471422407000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1471422407000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1471422407000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1471422407000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1471422407000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1471422407000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1471422407000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1471422407000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1471422407000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1471422407000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1471422407000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1471422407000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1471422407000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1471422407000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1471422407000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1471422407000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1471422407000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1471422407000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1471422407000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1471422407000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1471422407000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1471422407000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1471422407000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1471422407000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1471422407000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1471422407000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1471422407000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1471422407000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1471422407000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1471422407000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1471422407000},{"_id":"themes/next/source/images/Thread.png","hash":"2b72720f6f0fe1a7b3c2d2587305a3bbf54690a2","modified":1471838925000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1471422407000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1471422407000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1471422407000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1471422407000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1471422407000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1471422407000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1471422407000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1471422407000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1471422407000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1471422407000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1471422407000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1471422407000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1471422407000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1471422407000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1471422407000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1471422407000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1471422407000},{"_id":"themes/next/source/images/BlockingQueue.png","hash":"01c8204f768a992219220887548ed79cd4ee3646","modified":1471920826000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1471422407000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"71f002cd9011b6a212740112757f6df66bc2a378","modified":1471422407000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1471422407000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1471422407000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1471422407000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1471422407000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1471422407000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1471422407000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1471422407000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1471422407000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1471422407000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1471422407000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1471422407000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1471422407000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1471422407000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1471422407000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1471422407000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1471422407000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1471422407000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1471422407000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1471422407000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1471422407000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1471422407000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1471422407000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1471422407000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1471422407000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1471422407000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1471422407000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1471422407000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"f9c6ee91c2a615edd8ca26edcc8a66b71883c238","modified":1471422407000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1471422407000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1471422407000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1471422407000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1471422407000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1471422407000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1471422407000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1471422407000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1471422407000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1471422407000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"71f002cd9011b6a212740112757f6df66bc2a378","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1471422407000},{"_id":"themes/next/.git/objects/pack/pack-5182bfdb5614ae5dfee668f8addf954c0ab190af.idx","hash":"d2f74a227629f69096c221824076517f86dc9ead","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1471422407000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1471422407000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1471422407000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1471422407000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1471422407000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1471422407000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1471422407000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1471422407000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1471422407000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1471422407000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1471422407000},{"_id":"themes/next/.git/objects/pack/pack-5182bfdb5614ae5dfee668f8addf954c0ab190af.pack","hash":"5d566632504b87ecfaa3d9bd0ff5401a974682d9","modified":1471422407000},{"_id":"public/404.html","hash":"ccdd9f5dd029e98d01c61c4bc7ba1bdecf3222e4","modified":1569067863985},{"_id":"public/tags/index.html","hash":"8454646414502f01c39355de77aa0d59eda2f3a4","modified":1569067863992},{"_id":"public/categories/index.html","hash":"4042c564e7c5dcfa18185fad8c7f43019f04e93a","modified":1569067863992},{"_id":"public/2017/01/19/endOf2016/index.html","hash":"238836b808cf119f6d336f0ef418667b9dca0fd0","modified":1569067863992},{"_id":"public/2016/11/22/componetizationForPage/index.html","hash":"4e67c4ac311eef5786b2c8e60efd1d9be1d0e3f4","modified":1569067863992},{"_id":"public/2016/11/22/AndroidToRN1/index.html","hash":"af76f41e87e882405231c8cc1f14fb1210504364","modified":1569067863992},{"_id":"public/2016/10/10/componetization/index.html","hash":"8ada0a0acb329e1a378a0daebd05641d962d9385","modified":1569067863992},{"_id":"public/2019/09/18/react-native-预加载优化/index.html","hash":"39e7528b953363e7760fc56e5735aa4ece3218f0","modified":1569067863992},{"_id":"public/categories/学习经验/index.html","hash":"bf1176594a34d58fe1a48be72ca0550055a7a770","modified":1569067864013},{"_id":"public/categories/读书笔记/index.html","hash":"8aa10d3643e694092de07ea59e3930d3f577ee69","modified":1569067864013},{"_id":"public/categories/工作经验/index.html","hash":"86c8de8f8bdc0687d8c9e7936e9fa963c275ae61","modified":1569067864013},{"_id":"public/categories/实践/index.html","hash":"162ea9e5c41f6c3bed22ac376f2035815eb12c80","modified":1569067864013},{"_id":"public/categories/学习/index.html","hash":"56a98cb2bc8140d2b6d3c4aed55f21a5afea6e56","modified":1569067864013},{"_id":"public/categories/随笔/index.html","hash":"727d5392e883c0aa7134b7188df1cf9973aaad3a","modified":1569067864013},{"_id":"public/tags/IPC/index.html","hash":"fd1da87f4480b156f7ad0bfe8b9c84398e298d8b","modified":1569067864013},{"_id":"public/tags/总结/index.html","hash":"5c00bb17f632abb6f64ef608105f3d41144ba0e5","modified":1569067864014},{"_id":"public/tags/ReactNative/index.html","hash":"fbc0e238f1d47d4dcd15a3b4443aeb331e23e54d","modified":1569067864014},{"_id":"public/tags/Thread/index.html","hash":"b49522a61aa145013008e925e4d9353bafe0196a","modified":1569067864014},{"_id":"public/tags/实践/index.html","hash":"43737dece215f38cca9af6852278a82e314ae8bc","modified":1569067864014},{"_id":"public/tags/组件化/index.html","hash":"e6fb180ef9f30aaa692356e649e76c83ca06f920","modified":1569067864014},{"_id":"public/tags/Git/index.html","hash":"ec175030fd791ddbc8b00b3aaaa50bf1382b9b1f","modified":1569067864014},{"_id":"public/tags/TouchEvent/index.html","hash":"bde0c0f5f00ded3ef4788a6f99135fb98048e773","modified":1569067864014},{"_id":"public/tags/版本控制/index.html","hash":"c48f3daa62da38f4866323390b29a104ff29b585","modified":1569067864014},{"_id":"public/archives/2015/index.html","hash":"3728d0e8943bcc3935d7b1cf890a080e3ad032f4","modified":1569067864014},{"_id":"public/archives/2016/05/index.html","hash":"4d24b0132c46c36d009ea4675e82e89707759f0b","modified":1569067864014},{"_id":"public/archives/2015/11/index.html","hash":"cd2cdbc9f7ac6e5d5fba96f3ec803a9fb6d760f0","modified":1569067864014},{"_id":"public/archives/2016/02/index.html","hash":"6cbcd50647a43f9bc694b37f4697218a0833d5ad","modified":1569067864014},{"_id":"public/archives/2016/06/index.html","hash":"323f37afb34dac259720b7c8c8752211a88ef3ff","modified":1569067864014},{"_id":"public/archives/2016/07/index.html","hash":"1c0bc17bee2f5b91b4a14cc14b0137ca4139b558","modified":1569067864014},{"_id":"public/archives/2016/08/index.html","hash":"1ba2b608882fff8922e75632539dd9e1732b5fd3","modified":1569067864014},{"_id":"public/archives/2016/10/index.html","hash":"17da1c422007564e3d8a8773e591cb971effca01","modified":1569067864014},{"_id":"public/archives/2016/11/index.html","hash":"3669d1d52efbae89b421fbd691a1819fd92294a8","modified":1569067864014},{"_id":"public/archives/2017/index.html","hash":"675093c6d93811718681d06d1dfbe790425c7b58","modified":1569067864014},{"_id":"public/archives/2017/01/index.html","hash":"a102d64391c81e4f809a65c75f1010d0755c4157","modified":1569067864014},{"_id":"public/archives/2019/index.html","hash":"f55cbba3e2ffce50c57c45b5e4b079ffc1f6cb15","modified":1569067864015},{"_id":"public/archives/2019/09/index.html","hash":"66a21d4dd67993afc43a2f572c6a680e39825b10","modified":1569067864015},{"_id":"public/archives/2016/09/index.html","hash":"738d47319d3490d6b69c940314500d6a7512fdcb","modified":1569067864015},{"_id":"public/2019/09/21/react-native-for-android-重构与优化/index.html","hash":"9021d8a5d879a3e70c8cc6651f7e401aa0e1eb36","modified":1569067864015},{"_id":"public/2016/08/13/AndroidMultipeThreadProgram/index.html","hash":"d49b25ca4f09f5ef91d73df3cc80e1ce7af9f0c2","modified":1569067864015},{"_id":"public/2016/07/29/gitcarefulness/index.html","hash":"5529035460640cb0298487552980a80acba5fb97","modified":1569067864015},{"_id":"public/2016/09/07/AndroidMultipeThreadProgramIntermediate/index.html","hash":"2a1f690d7df7d9dae2b15751f9bfb820933722d5","modified":1569067864015},{"_id":"public/2016/07/22/gitrevert/index.html","hash":"93e179eec7468730aacec66549bf2a20e702b724","modified":1569067864015},{"_id":"public/2016/07/15/gitbranch/index.html","hash":"b636416327102727f42455c62f5e69b104027682","modified":1569067864015},{"_id":"public/2016/07/11/createYourRepository/index.html","hash":"8853c25131ff1e20abbd3b2838e3adf54ccd8d4e","modified":1569067864015},{"_id":"public/2016/07/09/WhatIsTheGit/index.html","hash":"05915b45ffd080b0b300d4b4f4b3985d7c51414e","modified":1569067864015},{"_id":"public/2016/06/15/AndroidProjectFromZero/index.html","hash":"287898ada2c190ef1e2bf5724ede718f61871914","modified":1569067864015},{"_id":"public/2016/02/01/事件分发之现学现用/index.html","hash":"65c95727689c33fed4bdc3c4f94f6798ec0617a9","modified":1569067864015},{"_id":"public/2016/05/10/AndroidLearningSummarize/index.html","hash":"927dd0039422e27584d75333609287beaca072d9","modified":1569067864015},{"_id":"public/2015/11/17/Android-学习IPC之个人总结/index.html","hash":"0a834d62ada4622aa8c3f8c78782306c7bd76e6a","modified":1569067864015},{"_id":"public/2015/11/17/异乡-2015年/index.html","hash":"fe4f4662cac96d21269610459ff81625ff0787f3","modified":1569067864015},{"_id":"public/page/2/index.html","hash":"856aa2723b05864b3b5a66ada3cd84c9229f41bf","modified":1569067864015},{"_id":"public/index.html","hash":"29663714315a73a34ae035526d219ebacfeab976","modified":1569067864015},{"_id":"public/page/3/index.html","hash":"287673dc4e20d50f652c9bd82eebfdaa6ade55c1","modified":1569067864016},{"_id":"public/page/4/index.html","hash":"5821db0d98067c579c9dd7c3fef63e4d0f164cb3","modified":1569067864016},{"_id":"public/tags/Android/index.html","hash":"4efefaabd0f5fe2b86ec4195e959869c30b8929f","modified":1569067864016},{"_id":"public/archives/index.html","hash":"6a8faa44edd4494bae3a3109eb66e4e03827015a","modified":1569067864016},{"_id":"public/archives/2016/index.html","hash":"1954e9eb649c1cd6434dfbaa9e2505dc2a4662c3","modified":1569067864016},{"_id":"public/tags/Android/page/2/index.html","hash":"c363a0279c7485b91418775bab46b111ebeec4cf","modified":1569067864023},{"_id":"public/CNAME","hash":"0809e9656dfb9e8469678c69b453c9d55a6fef7d","modified":1569067864023},{"_id":"public/uploads/wechat-qcode.jpg","hash":"e42eb57242ced00a25ce22745ebdbd1ecdae1152","modified":1569067864023},{"_id":"public/images/avatar.jpg","hash":"1b2852c4e59d70bbd551b83a12d35834222b9fd2","modified":1569067864023},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1569067864023},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1569067864023},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1569067864023},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1569067864023},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1569067864023},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1569067864023},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1569067864023},{"_id":"public/images/concurrent.png","hash":"69b1fb75f0e12c1537c233297cc4370e9cc48177","modified":1569067864024},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1569067864024},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1569067864024},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1569067864024},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1569067864024},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1569067864024},{"_id":"public/images/thread_lifecycle.gif","hash":"d7010bb79339e65844eac33e5ff499b85c4936b1","modified":1569067864024},{"_id":"public/images/threadStatus.png","hash":"961fecd8b0ccdf04b4d9ee279c784fa6c0c55a1e","modified":1569067864024},{"_id":"public/images/多线程.png","hash":"640da6a42d81203c58e171279db2cbc96c0bfb1d","modified":1569067864024},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1569067864024},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1569067864024},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1569067864024},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1569067864024},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1569067864024},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1569067864024},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1569067864024},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1569067864024},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1569067864024},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1569067864024},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1569067864024},{"_id":"public/images/donation.png","hash":"5e87054c1adc42ca3c80a5db9c04a52aae974633","modified":1569067864562},{"_id":"public/images/manifest.png","hash":"4d467b52ac19dcceea3c53b797923fbe4677c34d","modified":1569067864563},{"_id":"public/images/runnable.png","hash":"004474bc746025609da2b0035751c886420594cc","modified":1569067864563},{"_id":"public/images/threadRun.png","hash":"fa028e41989d63dd78dcc90d9037a40cf29aee2d","modified":1569067864563},{"_id":"public/images/threadStart.png","hash":"ccd3d041a1c6e7a8b22cfe7f05979042dcc3e2b3","modified":1569067864563},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1569067864564},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1569067864564},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1569067864564},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1569067864569},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1569067864569},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1569067864569},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1569067864569},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1569067864569},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1569067864569},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1569067864569},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1569067864569},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"1eeb7414f97f8ac1f91c19eed31ebba591df787d","modified":1569067864569},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"0bd87f225f3d850b299f68efc2ffafce870c0333","modified":1569067864569},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1569067864569},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1569067864569},{"_id":"public/vendors/fastclick/README.html","hash":"4a6074903daa9004301ef30a6fb96556ba3eab60","modified":1569067864570},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1569067864570},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1569067864570},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1569067864570},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1569067864570},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1569067864570},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1569067864570},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1569067864570},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1569067864570},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1569067864570},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1569067864570},{"_id":"public/css/main.css","hash":"a3d893f4f89fafb588ac132cb73546d3d1efc9e9","modified":1569067864570},{"_id":"public/images/Thread.png","hash":"2b72720f6f0fe1a7b3c2d2587305a3bbf54690a2","modified":1569067864570},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1569067864570},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1569067864574},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1569067864574},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1569067864574},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1569067864574},{"_id":"public/images/BlockingQueue.png","hash":"01c8204f768a992219220887548ed79cd4ee3646","modified":1569067864574},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1569067864578},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1569067864581},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1569067864581},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1569067864581},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1569067864582},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1569067864582},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1569067864585},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1569067864586},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1569067864588},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1569067864590}],"Category":[{"name":"读书笔记","_id":"ck0tihr7n00054irrfw379hq3"},{"name":"学习经验","_id":"ck0tihr7q000a4irr6aqj1jlh"},{"name":"实践","_id":"ck0tihr7s000f4irroz26yz9p"},{"name":"工作经验","_id":"ck0tihr81000z4irr4zutw807"},{"name":"学习","_id":"ck0tihr85001d4irr7wa68z7f"},{"name":"随笔","_id":"ck0tihr86001j4irr33573j7s"}],"Data":[],"Page":[{"_content":"CTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/index.html\" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>\n\n","source":"404.html","raw":"CTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/index.html\" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>\n\n","date":"2019-02-23T21:34:48.932Z","updated":"2015-11-17T16:30:45.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ck0tihr5z00004irr8kuz9adl","content":"CTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/index.html\" homepagename=\"回到我的主页\"></script>\n\n</body>\n</html>\n\n","excerpt":"","more":"CTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/index.html\" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>\n\n"},{"title":"标签","type":"tags","date":"2015-11-17T08:29:55.000Z","_content":"","source":"tags/index.md","raw":"title: 标签\ntype: \"tags\"\ndate: 2015-11-17 16:29:55\n---\n","updated":"2015-11-17T16:17:16.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck0tihr7l00024irrmvwcgysb","content":"","excerpt":"","more":""},{"title":"分类","type":"categories","date":"2015-11-17T15:29:26.000Z","_content":"","source":"categories/index.md","raw":"title: 分类\ntype: \"categories\"\ndate: 2015-11-17 23:29:26\n---\n","updated":"2015-11-17T16:12:28.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck0tihr7m00044irrpp635c1h","content":"","excerpt":"","more":""}],"Post":[{"title":"Android 学习IPC之个人总结","date":"2015-11-17T08:15:29.000Z","_content":"以下知识都是学习《Android开发艺术探索》后的总结\n\n# IPC的简介\n\nIPC是英文：Inter Process Communication的首字母缩写，也就是进程间通信。\n\n## 多进程的使用场景\n一般的来说，当业务需求需要多进程处理（如推送）、分担app内存、或者同个公司的几个app间需要相互通信（如某全家桶）\n\n## 使用的方式和技巧\n进程名以\":\"开头的进程前面自动加上包名，是属于当前应用的私有进程，其他应用的组件不可以和它跑在同一个进程中。不以\":”开头的进程名属于全局进程，以\"包名.进程名\"方式命名，可以通过shareUserID方式跑在同一个进程中（需要签名相同）\n\n![进程使用方式](http://cl.ly/image/1c0U1Z423U1T/%E8%BF%9B%E7%A8%8B%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F.png)\n\n## 在使用多进程时可能造成的问题\n\n1. 静态成员和单例模式多进程间会失效（独立的进程中会分配不同的虚拟机，内存分配会有不同的地址，从而导致静态类其实是多个不同的类）\n\n2. 线程同步会失效（锁对象或者锁全局都会因为1的理由而导致在多进程中失效）\n\n3. sharedPreferences可靠性下降（sp是底层对xml进行读写，对文件并发读写是会出问题的（处理线程同步问题））\n\n4. Application会被创建多次\n\n## IPC方式\n\n1. Bundle\n\n2. 共享文件的方式共享数据\n\n3. ContentProvider\n\n4. Messenger\n\n5. AIDL\n\n6. Socket\n\n# 简单的说一下使用AIDL的总结\n因为Messenger的底层也是AIDL实现(从IMessenger.Stub.asInterface 就能很明显地看出AIDL的痕迹)，所以了解一下AIDL的机制，那么Messenger理解起来也不会太难了。\n\n新建一个AIDL文件：\n![新建AIDL文件.png](https://s3.amazonaws.com/f.cl.ly/items/2z3N401O1S2N342q2447/新建AIDL文件.png)\n\n在Android Studio新建了AIDL文件后，会自动分配AIDL包（包名和androidManifest中的package 名是一样的）。\n\n在AIDL需要创建自定义类，必须实现可序列化的接口，有Serializable和Parcelable，Parcelable虽然实现起来比较复杂，在AndroidStudio 中可以安装Parcelable的插件，自动生成代码。因为Parcelable是Android专门序列化的接口，性能上可以提升很多。\n\n按照上面的方法创建一个Book类，并实现Parcelable接口\n![创建Book类.png](http://cl.ly/image/0X1n2x2E3b2s/%E5%88%9B%E5%BB%BABook%E7%B1%BB.png)\n\n因为需要在aidl中调用Book类，必须创建Book.aidl类，并且声明\n  `\n      parcelable Book;\n  `\n![创建Book.aidl.png](http://cl.ly/image/3M2S362x2z1u/%E5%88%9B%E5%BB%BABook.aidl.png)\n创建IBookManager后 basicTypes是自动生成的方法，要添加以下方法。\n`\nList<Book> getBookList();\nvoid addBook(in Book book);\n`\n这时候还必须手动导入上面的Book类，as下没有代码提示，也不会自动导入\n`\nimport com.demo.abner.aidldemo.Book;\n`\n\n![创建IBookManager接口.png](http://cl.ly/image/3u3q202j213a/%E5%88%9B%E5%BB%BAIBookManager%E6%8E%A5%E5%8F%A3.png)\n\n点击Build -> Make Project\n\n![IBookManager.java文件.png](http://cl.ly/image/3f3Z1c0q3F3y/IBookManager.java%E6%96%87%E4%BB%B6.png)\n\n在这个路径下会发现生成了IBookManager.java文件。\n\n在这个类里有onTransact方法，以及调用了Binder接口中的transact方法\n* onTransact\n这个方法主要是运行在服务端的Binder池中，如果返回false，客户端会显示请求失败。\n\n* transact()\n这个方法主要是客户端调用，是为了RPC时的数据传递用。\n\n这里提到的服务端和客户端，并不代表一定是service，只要是被请求的都是服务端，请求方都是客户端。\nRPC在android中是一种跨进程调用方式， RPC可以用自己定义的方法方式去（比如aidl的interface 方法 执行进程通信 ，而messenger 只能用send、reply 这些类似键值对的。\n[关于介绍RPC](http://www.zhihu.com/question/25536695)\n\n`ContentProvider底层也是Binder，主要以表格的形式组织数据`\n# 一些注意\n1. 使用binder通信注意读写列表用CopyOnWriteArrayList,这个是支持并发的，需要用线程安全的集合。\n2. 监听使用RemoteCallbackList,在遍历时注意beginBroadcast 和 finishBroadcast需要配对出现。\n3. Binder死亡可以用DeathRecipient监听，或者在onServiceDisconnected中重连。前者在非UI线程被回调，后者在UI线程被回调。\n4. 为了安全，使用Binder通信最好使用permission验证\n\n\n**以上皆为个人初步学习时得出的结论与理解，若有错误或者不对之处请指出**\n\n\n\n**平时比较少写技术文章，第一次写的还比较烂，如果有转载请注明原作者。**\n\n> [我的Github](http://github.com/nimengbo)\n[我的微博](http://weibo.com/nimengbo)\n","source":"_posts/Android-学习IPC之个人总结.md","raw":"title: Android 学习IPC之个人总结\ndate: 2015-11-17 16:15:29\ncategories:\n- 读书笔记\ntags:\n- Android\n- IPC\n\n---\n以下知识都是学习《Android开发艺术探索》后的总结\n\n# IPC的简介\n\nIPC是英文：Inter Process Communication的首字母缩写，也就是进程间通信。\n\n## 多进程的使用场景\n一般的来说，当业务需求需要多进程处理（如推送）、分担app内存、或者同个公司的几个app间需要相互通信（如某全家桶）\n\n## 使用的方式和技巧\n进程名以\":\"开头的进程前面自动加上包名，是属于当前应用的私有进程，其他应用的组件不可以和它跑在同一个进程中。不以\":”开头的进程名属于全局进程，以\"包名.进程名\"方式命名，可以通过shareUserID方式跑在同一个进程中（需要签名相同）\n\n![进程使用方式](http://cl.ly/image/1c0U1Z423U1T/%E8%BF%9B%E7%A8%8B%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F.png)\n\n## 在使用多进程时可能造成的问题\n\n1. 静态成员和单例模式多进程间会失效（独立的进程中会分配不同的虚拟机，内存分配会有不同的地址，从而导致静态类其实是多个不同的类）\n\n2. 线程同步会失效（锁对象或者锁全局都会因为1的理由而导致在多进程中失效）\n\n3. sharedPreferences可靠性下降（sp是底层对xml进行读写，对文件并发读写是会出问题的（处理线程同步问题））\n\n4. Application会被创建多次\n\n## IPC方式\n\n1. Bundle\n\n2. 共享文件的方式共享数据\n\n3. ContentProvider\n\n4. Messenger\n\n5. AIDL\n\n6. Socket\n\n# 简单的说一下使用AIDL的总结\n因为Messenger的底层也是AIDL实现(从IMessenger.Stub.asInterface 就能很明显地看出AIDL的痕迹)，所以了解一下AIDL的机制，那么Messenger理解起来也不会太难了。\n\n新建一个AIDL文件：\n![新建AIDL文件.png](https://s3.amazonaws.com/f.cl.ly/items/2z3N401O1S2N342q2447/新建AIDL文件.png)\n\n在Android Studio新建了AIDL文件后，会自动分配AIDL包（包名和androidManifest中的package 名是一样的）。\n\n在AIDL需要创建自定义类，必须实现可序列化的接口，有Serializable和Parcelable，Parcelable虽然实现起来比较复杂，在AndroidStudio 中可以安装Parcelable的插件，自动生成代码。因为Parcelable是Android专门序列化的接口，性能上可以提升很多。\n\n按照上面的方法创建一个Book类，并实现Parcelable接口\n![创建Book类.png](http://cl.ly/image/0X1n2x2E3b2s/%E5%88%9B%E5%BB%BABook%E7%B1%BB.png)\n\n因为需要在aidl中调用Book类，必须创建Book.aidl类，并且声明\n  `\n      parcelable Book;\n  `\n![创建Book.aidl.png](http://cl.ly/image/3M2S362x2z1u/%E5%88%9B%E5%BB%BABook.aidl.png)\n创建IBookManager后 basicTypes是自动生成的方法，要添加以下方法。\n`\nList<Book> getBookList();\nvoid addBook(in Book book);\n`\n这时候还必须手动导入上面的Book类，as下没有代码提示，也不会自动导入\n`\nimport com.demo.abner.aidldemo.Book;\n`\n\n![创建IBookManager接口.png](http://cl.ly/image/3u3q202j213a/%E5%88%9B%E5%BB%BAIBookManager%E6%8E%A5%E5%8F%A3.png)\n\n点击Build -> Make Project\n\n![IBookManager.java文件.png](http://cl.ly/image/3f3Z1c0q3F3y/IBookManager.java%E6%96%87%E4%BB%B6.png)\n\n在这个路径下会发现生成了IBookManager.java文件。\n\n在这个类里有onTransact方法，以及调用了Binder接口中的transact方法\n* onTransact\n这个方法主要是运行在服务端的Binder池中，如果返回false，客户端会显示请求失败。\n\n* transact()\n这个方法主要是客户端调用，是为了RPC时的数据传递用。\n\n这里提到的服务端和客户端，并不代表一定是service，只要是被请求的都是服务端，请求方都是客户端。\nRPC在android中是一种跨进程调用方式， RPC可以用自己定义的方法方式去（比如aidl的interface 方法 执行进程通信 ，而messenger 只能用send、reply 这些类似键值对的。\n[关于介绍RPC](http://www.zhihu.com/question/25536695)\n\n`ContentProvider底层也是Binder，主要以表格的形式组织数据`\n# 一些注意\n1. 使用binder通信注意读写列表用CopyOnWriteArrayList,这个是支持并发的，需要用线程安全的集合。\n2. 监听使用RemoteCallbackList,在遍历时注意beginBroadcast 和 finishBroadcast需要配对出现。\n3. Binder死亡可以用DeathRecipient监听，或者在onServiceDisconnected中重连。前者在非UI线程被回调，后者在UI线程被回调。\n4. 为了安全，使用Binder通信最好使用permission验证\n\n\n**以上皆为个人初步学习时得出的结论与理解，若有错误或者不对之处请指出**\n\n\n\n**平时比较少写技术文章，第一次写的还比较烂，如果有转载请注明原作者。**\n\n> [我的Github](http://github.com/nimengbo)\n[我的微博](http://weibo.com/nimengbo)\n","slug":"Android-学习IPC之个人总结","published":1,"updated":"2019-02-23T21:34:48.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tihr7i00014irrmhpygidh","content":"<p>以下知识都是学习《Android开发艺术探索》后的总结</p>\n<h1 id=\"IPC的简介\">IPC的简介</h1><p>IPC是英文：Inter Process Communication的首字母缩写，也就是进程间通信。</p>\n<h2 id=\"多进程的使用场景\">多进程的使用场景</h2><p>一般的来说，当业务需求需要多进程处理（如推送）、分担app内存、或者同个公司的几个app间需要相互通信（如某全家桶）</p>\n<h2 id=\"使用的方式和技巧\">使用的方式和技巧</h2><p>进程名以”:”开头的进程前面自动加上包名，是属于当前应用的私有进程，其他应用的组件不可以和它跑在同一个进程中。不以”:”开头的进程名属于全局进程，以”包名.进程名”方式命名，可以通过shareUserID方式跑在同一个进程中（需要签名相同）</p>\n<p><img src=\"http://cl.ly/image/1c0U1Z423U1T/%E8%BF%9B%E7%A8%8B%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F.png\" alt=\"进程使用方式\"></p>\n<h2 id=\"在使用多进程时可能造成的问题\">在使用多进程时可能造成的问题</h2><ol>\n<li><p>静态成员和单例模式多进程间会失效（独立的进程中会分配不同的虚拟机，内存分配会有不同的地址，从而导致静态类其实是多个不同的类）</p>\n</li>\n<li><p>线程同步会失效（锁对象或者锁全局都会因为1的理由而导致在多进程中失效）</p>\n</li>\n<li><p>sharedPreferences可靠性下降（sp是底层对xml进行读写，对文件并发读写是会出问题的（处理线程同步问题））</p>\n</li>\n<li><p>Application会被创建多次</p>\n</li>\n</ol>\n<h2 id=\"IPC方式\">IPC方式</h2><ol>\n<li><p>Bundle</p>\n</li>\n<li><p>共享文件的方式共享数据</p>\n</li>\n<li><p>ContentProvider</p>\n</li>\n<li><p>Messenger</p>\n</li>\n<li><p>AIDL</p>\n</li>\n<li><p>Socket</p>\n</li>\n</ol>\n<h1 id=\"简单的说一下使用AIDL的总结\">简单的说一下使用AIDL的总结</h1><p>因为Messenger的底层也是AIDL实现(从IMessenger.Stub.asInterface 就能很明显地看出AIDL的痕迹)，所以了解一下AIDL的机制，那么Messenger理解起来也不会太难了。</p>\n<p>新建一个AIDL文件：<br><img src=\"https://s3.amazonaws.com/f.cl.ly/items/2z3N401O1S2N342q2447/新建AIDL文件.png\" alt=\"新建AIDL文件.png\"></p>\n<p>在Android Studio新建了AIDL文件后，会自动分配AIDL包（包名和androidManifest中的package 名是一样的）。</p>\n<p>在AIDL需要创建自定义类，必须实现可序列化的接口，有Serializable和Parcelable，Parcelable虽然实现起来比较复杂，在AndroidStudio 中可以安装Parcelable的插件，自动生成代码。因为Parcelable是Android专门序列化的接口，性能上可以提升很多。</p>\n<p>按照上面的方法创建一个Book类，并实现Parcelable接口<br><img src=\"http://cl.ly/image/0X1n2x2E3b2s/%E5%88%9B%E5%BB%BABook%E7%B1%BB.png\" alt=\"创建Book类.png\"></p>\n<p>因为需要在aidl中调用Book类，必须创建Book.aidl类，并且声明<br>  <code>parcelable Book;</code><br><img src=\"http://cl.ly/image/3M2S362x2z1u/%E5%88%9B%E5%BB%BABook.aidl.png\" alt=\"创建Book.aidl.png\"><br>创建IBookManager后 basicTypes是自动生成的方法，要添加以下方法。<br><code>List&lt;Book&gt; getBookList();\nvoid addBook(in Book book);</code><br>这时候还必须手动导入上面的Book类，as下没有代码提示，也不会自动导入<br><code>import com.demo.abner.aidldemo.Book;</code></p>\n<p><img src=\"http://cl.ly/image/3u3q202j213a/%E5%88%9B%E5%BB%BAIBookManager%E6%8E%A5%E5%8F%A3.png\" alt=\"创建IBookManager接口.png\"></p>\n<p>点击Build -&gt; Make Project</p>\n<p><img src=\"http://cl.ly/image/3f3Z1c0q3F3y/IBookManager.java%E6%96%87%E4%BB%B6.png\" alt=\"IBookManager.java文件.png\"></p>\n<p>在这个路径下会发现生成了IBookManager.java文件。</p>\n<p>在这个类里有onTransact方法，以及调用了Binder接口中的transact方法</p>\n<ul>\n<li><p>onTransact<br>这个方法主要是运行在服务端的Binder池中，如果返回false，客户端会显示请求失败。</p>\n</li>\n<li><p>transact()<br>这个方法主要是客户端调用，是为了RPC时的数据传递用。</p>\n</li>\n</ul>\n<p>这里提到的服务端和客户端，并不代表一定是service，只要是被请求的都是服务端，请求方都是客户端。<br>RPC在android中是一种跨进程调用方式， RPC可以用自己定义的方法方式去（比如aidl的interface 方法 执行进程通信 ，而messenger 只能用send、reply 这些类似键值对的。<br><a href=\"http://www.zhihu.com/question/25536695\" target=\"_blank\" rel=\"external\">关于介绍RPC</a></p>\n<p><code>ContentProvider底层也是Binder，主要以表格的形式组织数据</code></p>\n<h1 id=\"一些注意\">一些注意</h1><ol>\n<li>使用binder通信注意读写列表用CopyOnWriteArrayList,这个是支持并发的，需要用线程安全的集合。</li>\n<li>监听使用RemoteCallbackList,在遍历时注意beginBroadcast 和 finishBroadcast需要配对出现。</li>\n<li>Binder死亡可以用DeathRecipient监听，或者在onServiceDisconnected中重连。前者在非UI线程被回调，后者在UI线程被回调。</li>\n<li>为了安全，使用Binder通信最好使用permission验证</li>\n</ol>\n<p><strong>以上皆为个人初步学习时得出的结论与理解，若有错误或者不对之处请指出</strong></p>\n<p><strong>平时比较少写技术文章，第一次写的还比较烂，如果有转载请注明原作者。</strong></p>\n<blockquote>\n<p><a href=\"http://github.com/nimengbo\" target=\"_blank\" rel=\"external\">我的Github</a><br><a href=\"http://weibo.com/nimengbo\" target=\"_blank\" rel=\"external\">我的微博</a></p>\n</blockquote>\n","excerpt":"","more":"<p>以下知识都是学习《Android开发艺术探索》后的总结</p>\n<h1 id=\"IPC的简介\">IPC的简介</h1><p>IPC是英文：Inter Process Communication的首字母缩写，也就是进程间通信。</p>\n<h2 id=\"多进程的使用场景\">多进程的使用场景</h2><p>一般的来说，当业务需求需要多进程处理（如推送）、分担app内存、或者同个公司的几个app间需要相互通信（如某全家桶）</p>\n<h2 id=\"使用的方式和技巧\">使用的方式和技巧</h2><p>进程名以”:”开头的进程前面自动加上包名，是属于当前应用的私有进程，其他应用的组件不可以和它跑在同一个进程中。不以”:”开头的进程名属于全局进程，以”包名.进程名”方式命名，可以通过shareUserID方式跑在同一个进程中（需要签名相同）</p>\n<p><img src=\"http://cl.ly/image/1c0U1Z423U1T/%E8%BF%9B%E7%A8%8B%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F.png\" alt=\"进程使用方式\"></p>\n<h2 id=\"在使用多进程时可能造成的问题\">在使用多进程时可能造成的问题</h2><ol>\n<li><p>静态成员和单例模式多进程间会失效（独立的进程中会分配不同的虚拟机，内存分配会有不同的地址，从而导致静态类其实是多个不同的类）</p>\n</li>\n<li><p>线程同步会失效（锁对象或者锁全局都会因为1的理由而导致在多进程中失效）</p>\n</li>\n<li><p>sharedPreferences可靠性下降（sp是底层对xml进行读写，对文件并发读写是会出问题的（处理线程同步问题））</p>\n</li>\n<li><p>Application会被创建多次</p>\n</li>\n</ol>\n<h2 id=\"IPC方式\">IPC方式</h2><ol>\n<li><p>Bundle</p>\n</li>\n<li><p>共享文件的方式共享数据</p>\n</li>\n<li><p>ContentProvider</p>\n</li>\n<li><p>Messenger</p>\n</li>\n<li><p>AIDL</p>\n</li>\n<li><p>Socket</p>\n</li>\n</ol>\n<h1 id=\"简单的说一下使用AIDL的总结\">简单的说一下使用AIDL的总结</h1><p>因为Messenger的底层也是AIDL实现(从IMessenger.Stub.asInterface 就能很明显地看出AIDL的痕迹)，所以了解一下AIDL的机制，那么Messenger理解起来也不会太难了。</p>\n<p>新建一个AIDL文件：<br><img src=\"https://s3.amazonaws.com/f.cl.ly/items/2z3N401O1S2N342q2447/新建AIDL文件.png\" alt=\"新建AIDL文件.png\"></p>\n<p>在Android Studio新建了AIDL文件后，会自动分配AIDL包（包名和androidManifest中的package 名是一样的）。</p>\n<p>在AIDL需要创建自定义类，必须实现可序列化的接口，有Serializable和Parcelable，Parcelable虽然实现起来比较复杂，在AndroidStudio 中可以安装Parcelable的插件，自动生成代码。因为Parcelable是Android专门序列化的接口，性能上可以提升很多。</p>\n<p>按照上面的方法创建一个Book类，并实现Parcelable接口<br><img src=\"http://cl.ly/image/0X1n2x2E3b2s/%E5%88%9B%E5%BB%BABook%E7%B1%BB.png\" alt=\"创建Book类.png\"></p>\n<p>因为需要在aidl中调用Book类，必须创建Book.aidl类，并且声明<br>  <code>parcelable Book;</code><br><img src=\"http://cl.ly/image/3M2S362x2z1u/%E5%88%9B%E5%BB%BABook.aidl.png\" alt=\"创建Book.aidl.png\"><br>创建IBookManager后 basicTypes是自动生成的方法，要添加以下方法。<br><code>List&lt;Book&gt; getBookList();\nvoid addBook(in Book book);</code><br>这时候还必须手动导入上面的Book类，as下没有代码提示，也不会自动导入<br><code>import com.demo.abner.aidldemo.Book;</code></p>\n<p><img src=\"http://cl.ly/image/3u3q202j213a/%E5%88%9B%E5%BB%BAIBookManager%E6%8E%A5%E5%8F%A3.png\" alt=\"创建IBookManager接口.png\"></p>\n<p>点击Build -&gt; Make Project</p>\n<p><img src=\"http://cl.ly/image/3f3Z1c0q3F3y/IBookManager.java%E6%96%87%E4%BB%B6.png\" alt=\"IBookManager.java文件.png\"></p>\n<p>在这个路径下会发现生成了IBookManager.java文件。</p>\n<p>在这个类里有onTransact方法，以及调用了Binder接口中的transact方法</p>\n<ul>\n<li><p>onTransact<br>这个方法主要是运行在服务端的Binder池中，如果返回false，客户端会显示请求失败。</p>\n</li>\n<li><p>transact()<br>这个方法主要是客户端调用，是为了RPC时的数据传递用。</p>\n</li>\n</ul>\n<p>这里提到的服务端和客户端，并不代表一定是service，只要是被请求的都是服务端，请求方都是客户端。<br>RPC在android中是一种跨进程调用方式， RPC可以用自己定义的方法方式去（比如aidl的interface 方法 执行进程通信 ，而messenger 只能用send、reply 这些类似键值对的。<br><a href=\"http://www.zhihu.com/question/25536695\">关于介绍RPC</a></p>\n<p><code>ContentProvider底层也是Binder，主要以表格的形式组织数据</code></p>\n<h1 id=\"一些注意\">一些注意</h1><ol>\n<li>使用binder通信注意读写列表用CopyOnWriteArrayList,这个是支持并发的，需要用线程安全的集合。</li>\n<li>监听使用RemoteCallbackList,在遍历时注意beginBroadcast 和 finishBroadcast需要配对出现。</li>\n<li>Binder死亡可以用DeathRecipient监听，或者在onServiceDisconnected中重连。前者在非UI线程被回调，后者在UI线程被回调。</li>\n<li>为了安全，使用Binder通信最好使用permission验证</li>\n</ol>\n<p><strong>以上皆为个人初步学习时得出的结论与理解，若有错误或者不对之处请指出</strong></p>\n<p><strong>平时比较少写技术文章，第一次写的还比较烂，如果有转载请注明原作者。</strong></p>\n<blockquote>\n<p><a href=\"http://github.com/nimengbo\">我的Github</a><br><a href=\"http://weibo.com/nimengbo\">我的微博</a></p>\n</blockquote>\n"},{"title":"Android开发两年半修炼之路","date":"2016-05-10T01:57:18.000Z","_content":"# 背景\n博主毕业于一所三流本科院校计算机专业，在一份实习工作中，因公司需要，从Java后端投身于Android开发中去。可能会有很多人和博主一样，甚至有更好的条件，所以把自己的经历分享出来，既能看看自己的过去，也可以给一些茫然的同学带来点灵感。\n\n# 怎么踏出第一步\n\n所谓初生牛犊不怕虎，当时在零基础的情况下，被leader(iOS)指派要写一个相机模块，并且能带一些图片处理之类的(博主一年后又写了这种类似功能，都没能写的很好)，对未知的东西完全不懂，所以也没有畏惧之心，一边查资料，一边写代码(最后做出来的结果就不说了，想想就羞耻感爆棚)。\n\n也是从那个时候，养成了独立思考，学习的习惯，在14年前期，Github上还没有那么多关于Android的东西，国内资料对于相机模块的介绍也很少，所以博主大部分资料查阅都来自于Google，至于怎么翻墙就不在这里叙述了。\n总结出来的就是实践出真知，干了再说！\n\n# 寻找解决办法的途径\n在我刚进入Android界的时候，感觉啥都不会，然后手头又有任务，已经让我独立开发一个App了，让我先调研一下需要用到的技术，这个时候只能寻找一些资源和途径，其实官方文档是最好的学习方法，奈何英语不太行，在没有任何基础的情况下直接阅读文档会经常理解错误。所以在那个时候寻找一些国内的论坛，比如apkbus，eoeandroid社区，对于初学者的我，这些论坛对我起到了不小的帮助，至少教会了我怎么写好一个Listview，在当时也流传着一句话\"会ListView，Android就入门了\"。现在想想挺扯淡的。\n\n以下是一些比较有用的途径：\n1. [Android Developers官方文档](http://developer.android.com/)\n2. Google\n3. StackoverFlow\n4. Youtube\n5. Github开源项目\n\n# 动力从何而来\n\n我一直觉得，只有对这行业有兴趣，才能有热情去钻研，才会坚持下来，在这个行业千万不能熬，因为技术日新月异，每天都会有一些新的东西在冲击着老东西，所以要有钻研的精神，跟上时代的脚步，而这一切的驱动力就是兴趣。这也会影响到你会不会去独立学习，利用业余时间去学习更多的东西，在我们那儿叫做暗推(不懂的同学可以百度一下哈)，渐渐地你会发现和别人的差距就体现在你比他们付出的更多汗水。\n\n`就怕比你厉害的人比你还要努力`\n\n\n# 关于怎么学习\n\n关于如何学习，可以参照大帅阿翟的[计算机从业者的技术成长学习之路](http://blog.zhaiyifan.cn/2016/04/28/about-learning/)某些同学可能会一开始买很多的书，博主还是劝告一些同学，读万卷书，不如行万里路。最好的读书方式就是边看边coding。基础很重要！基础很重要！基础很重要！重要的事情说三次！数据结构+算法=编程。虽然算法在Android上用的不多，基本的一些还是要知道的，数据结构是相当重要的！对城宝具:《Java编程思想》、《Android开发艺术与探索》。\n\n# 瓶颈或茫然时\n\n一个人总是很容易遇到瓶颈，或者会有一段时间处于茫然状态，知心哥哥(弟弟)告诉你们，这个时候应该多出去面基！参与一下当地的开发者社区，听听别人的感受或者分享，认识一些基友，扩展自己的社交圈。不要总想跳槽！不要总想跳槽！不要总想跳槽！因为今年行情不是很好，好坑也不多，且行且珍惜！\n\n# 程序员最缺乏却又最重要的一点:情商\n\n咱做开发的，总是被产品、设计、PM、QA指手画脚，久而久之总会有一些怨气，会和别人吵架之类的。一辈子做技术，薪资瓶颈太容易遇到，这个时候能升职加薪的资本就是情商了，说的难听点就是心机手段了，不要总是把情绪表现出来，关于这些在知乎上也有很多讨论，在这里也不细说了，总之就是，做人留一线，日后好相见！这点我也做的不是很好。\n\n# 关于在技能上的发展\n\n很多人学习Android总是执着于酷炫的动画，或者一些绚丽的自定义View，个人觉得不如进入深度学习，总是浮在写控件或者动画，目的只是为了炫技，并不是真正的刚需，理解原理才能更好的解决问题，编程的初衷不就是为了解决各种各样的问题不是吗？广的接触一些比如hybrid、后端开发等，会带来一些灵感和解决方案，深入学习也是比较重要的比如read the fucking source code，不然你说的大家都懂还怎么吹比！！！！！一定一定要戒骄戒躁，还是脚踏实地的好。\n\n# 结语\n\n送给大家也是自己的一句话：`先是确定目标，然后坚持到底，这是成功的唯一方法。`\n\n\n原文发布于：http://abner-nimengbo.cn/2016/05/10/AndroidLearningSummarize/\n","source":"_posts/AndroidLearningSummarize.md","raw":"title: Android开发两年半修炼之路\ndate: 2016-05-10 09:57:18\ncategories:\n- 学习经验\ntags:\n- Android\n- 总结\n---\n# 背景\n博主毕业于一所三流本科院校计算机专业，在一份实习工作中，因公司需要，从Java后端投身于Android开发中去。可能会有很多人和博主一样，甚至有更好的条件，所以把自己的经历分享出来，既能看看自己的过去，也可以给一些茫然的同学带来点灵感。\n\n# 怎么踏出第一步\n\n所谓初生牛犊不怕虎，当时在零基础的情况下，被leader(iOS)指派要写一个相机模块，并且能带一些图片处理之类的(博主一年后又写了这种类似功能，都没能写的很好)，对未知的东西完全不懂，所以也没有畏惧之心，一边查资料，一边写代码(最后做出来的结果就不说了，想想就羞耻感爆棚)。\n\n也是从那个时候，养成了独立思考，学习的习惯，在14年前期，Github上还没有那么多关于Android的东西，国内资料对于相机模块的介绍也很少，所以博主大部分资料查阅都来自于Google，至于怎么翻墙就不在这里叙述了。\n总结出来的就是实践出真知，干了再说！\n\n# 寻找解决办法的途径\n在我刚进入Android界的时候，感觉啥都不会，然后手头又有任务，已经让我独立开发一个App了，让我先调研一下需要用到的技术，这个时候只能寻找一些资源和途径，其实官方文档是最好的学习方法，奈何英语不太行，在没有任何基础的情况下直接阅读文档会经常理解错误。所以在那个时候寻找一些国内的论坛，比如apkbus，eoeandroid社区，对于初学者的我，这些论坛对我起到了不小的帮助，至少教会了我怎么写好一个Listview，在当时也流传着一句话\"会ListView，Android就入门了\"。现在想想挺扯淡的。\n\n以下是一些比较有用的途径：\n1. [Android Developers官方文档](http://developer.android.com/)\n2. Google\n3. StackoverFlow\n4. Youtube\n5. Github开源项目\n\n# 动力从何而来\n\n我一直觉得，只有对这行业有兴趣，才能有热情去钻研，才会坚持下来，在这个行业千万不能熬，因为技术日新月异，每天都会有一些新的东西在冲击着老东西，所以要有钻研的精神，跟上时代的脚步，而这一切的驱动力就是兴趣。这也会影响到你会不会去独立学习，利用业余时间去学习更多的东西，在我们那儿叫做暗推(不懂的同学可以百度一下哈)，渐渐地你会发现和别人的差距就体现在你比他们付出的更多汗水。\n\n`就怕比你厉害的人比你还要努力`\n\n\n# 关于怎么学习\n\n关于如何学习，可以参照大帅阿翟的[计算机从业者的技术成长学习之路](http://blog.zhaiyifan.cn/2016/04/28/about-learning/)某些同学可能会一开始买很多的书，博主还是劝告一些同学，读万卷书，不如行万里路。最好的读书方式就是边看边coding。基础很重要！基础很重要！基础很重要！重要的事情说三次！数据结构+算法=编程。虽然算法在Android上用的不多，基本的一些还是要知道的，数据结构是相当重要的！对城宝具:《Java编程思想》、《Android开发艺术与探索》。\n\n# 瓶颈或茫然时\n\n一个人总是很容易遇到瓶颈，或者会有一段时间处于茫然状态，知心哥哥(弟弟)告诉你们，这个时候应该多出去面基！参与一下当地的开发者社区，听听别人的感受或者分享，认识一些基友，扩展自己的社交圈。不要总想跳槽！不要总想跳槽！不要总想跳槽！因为今年行情不是很好，好坑也不多，且行且珍惜！\n\n# 程序员最缺乏却又最重要的一点:情商\n\n咱做开发的，总是被产品、设计、PM、QA指手画脚，久而久之总会有一些怨气，会和别人吵架之类的。一辈子做技术，薪资瓶颈太容易遇到，这个时候能升职加薪的资本就是情商了，说的难听点就是心机手段了，不要总是把情绪表现出来，关于这些在知乎上也有很多讨论，在这里也不细说了，总之就是，做人留一线，日后好相见！这点我也做的不是很好。\n\n# 关于在技能上的发展\n\n很多人学习Android总是执着于酷炫的动画，或者一些绚丽的自定义View，个人觉得不如进入深度学习，总是浮在写控件或者动画，目的只是为了炫技，并不是真正的刚需，理解原理才能更好的解决问题，编程的初衷不就是为了解决各种各样的问题不是吗？广的接触一些比如hybrid、后端开发等，会带来一些灵感和解决方案，深入学习也是比较重要的比如read the fucking source code，不然你说的大家都懂还怎么吹比！！！！！一定一定要戒骄戒躁，还是脚踏实地的好。\n\n# 结语\n\n送给大家也是自己的一句话：`先是确定目标，然后坚持到底，这是成功的唯一方法。`\n\n\n原文发布于：http://abner-nimengbo.cn/2016/05/10/AndroidLearningSummarize/\n","slug":"AndroidLearningSummarize","published":1,"updated":"2016-05-10T09:54:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tihr7l00034irrf3dtto19","content":"<h1 id=\"背景\">背景</h1><p>博主毕业于一所三流本科院校计算机专业，在一份实习工作中，因公司需要，从Java后端投身于Android开发中去。可能会有很多人和博主一样，甚至有更好的条件，所以把自己的经历分享出来，既能看看自己的过去，也可以给一些茫然的同学带来点灵感。</p>\n<h1 id=\"怎么踏出第一步\">怎么踏出第一步</h1><p>所谓初生牛犊不怕虎，当时在零基础的情况下，被leader(iOS)指派要写一个相机模块，并且能带一些图片处理之类的(博主一年后又写了这种类似功能，都没能写的很好)，对未知的东西完全不懂，所以也没有畏惧之心，一边查资料，一边写代码(最后做出来的结果就不说了，想想就羞耻感爆棚)。</p>\n<p>也是从那个时候，养成了独立思考，学习的习惯，在14年前期，Github上还没有那么多关于Android的东西，国内资料对于相机模块的介绍也很少，所以博主大部分资料查阅都来自于Google，至于怎么翻墙就不在这里叙述了。<br>总结出来的就是实践出真知，干了再说！</p>\n<h1 id=\"寻找解决办法的途径\">寻找解决办法的途径</h1><p>在我刚进入Android界的时候，感觉啥都不会，然后手头又有任务，已经让我独立开发一个App了，让我先调研一下需要用到的技术，这个时候只能寻找一些资源和途径，其实官方文档是最好的学习方法，奈何英语不太行，在没有任何基础的情况下直接阅读文档会经常理解错误。所以在那个时候寻找一些国内的论坛，比如apkbus，eoeandroid社区，对于初学者的我，这些论坛对我起到了不小的帮助，至少教会了我怎么写好一个Listview，在当时也流传着一句话”会ListView，Android就入门了”。现在想想挺扯淡的。</p>\n<p>以下是一些比较有用的途径：</p>\n<ol>\n<li><a href=\"http://developer.android.com/\" target=\"_blank\" rel=\"external\">Android Developers官方文档</a></li>\n<li>Google</li>\n<li>StackoverFlow</li>\n<li>Youtube</li>\n<li>Github开源项目</li>\n</ol>\n<h1 id=\"动力从何而来\">动力从何而来</h1><p>我一直觉得，只有对这行业有兴趣，才能有热情去钻研，才会坚持下来，在这个行业千万不能熬，因为技术日新月异，每天都会有一些新的东西在冲击着老东西，所以要有钻研的精神，跟上时代的脚步，而这一切的驱动力就是兴趣。这也会影响到你会不会去独立学习，利用业余时间去学习更多的东西，在我们那儿叫做暗推(不懂的同学可以百度一下哈)，渐渐地你会发现和别人的差距就体现在你比他们付出的更多汗水。</p>\n<p><code>就怕比你厉害的人比你还要努力</code></p>\n<h1 id=\"关于怎么学习\">关于怎么学习</h1><p>关于如何学习，可以参照大帅阿翟的<a href=\"http://blog.zhaiyifan.cn/2016/04/28/about-learning/\" target=\"_blank\" rel=\"external\">计算机从业者的技术成长学习之路</a>某些同学可能会一开始买很多的书，博主还是劝告一些同学，读万卷书，不如行万里路。最好的读书方式就是边看边coding。基础很重要！基础很重要！基础很重要！重要的事情说三次！数据结构+算法=编程。虽然算法在Android上用的不多，基本的一些还是要知道的，数据结构是相当重要的！对城宝具:《Java编程思想》、《Android开发艺术与探索》。</p>\n<h1 id=\"瓶颈或茫然时\">瓶颈或茫然时</h1><p>一个人总是很容易遇到瓶颈，或者会有一段时间处于茫然状态，知心哥哥(弟弟)告诉你们，这个时候应该多出去面基！参与一下当地的开发者社区，听听别人的感受或者分享，认识一些基友，扩展自己的社交圈。不要总想跳槽！不要总想跳槽！不要总想跳槽！因为今年行情不是很好，好坑也不多，且行且珍惜！</p>\n<h1 id=\"程序员最缺乏却又最重要的一点:情商\">程序员最缺乏却又最重要的一点:情商</h1><p>咱做开发的，总是被产品、设计、PM、QA指手画脚，久而久之总会有一些怨气，会和别人吵架之类的。一辈子做技术，薪资瓶颈太容易遇到，这个时候能升职加薪的资本就是情商了，说的难听点就是心机手段了，不要总是把情绪表现出来，关于这些在知乎上也有很多讨论，在这里也不细说了，总之就是，做人留一线，日后好相见！这点我也做的不是很好。</p>\n<h1 id=\"关于在技能上的发展\">关于在技能上的发展</h1><p>很多人学习Android总是执着于酷炫的动画，或者一些绚丽的自定义View，个人觉得不如进入深度学习，总是浮在写控件或者动画，目的只是为了炫技，并不是真正的刚需，理解原理才能更好的解决问题，编程的初衷不就是为了解决各种各样的问题不是吗？广的接触一些比如hybrid、后端开发等，会带来一些灵感和解决方案，深入学习也是比较重要的比如read the fucking source code，不然你说的大家都懂还怎么吹比！！！！！一定一定要戒骄戒躁，还是脚踏实地的好。</p>\n<h1 id=\"结语\">结语</h1><p>送给大家也是自己的一句话：<code>先是确定目标，然后坚持到底，这是成功的唯一方法。</code></p>\n<p>原文发布于：<a href=\"http://abner-nimengbo.cn/2016/05/10/AndroidLearningSummarize/\" target=\"_blank\" rel=\"external\">http://abner-nimengbo.cn/2016/05/10/AndroidLearningSummarize/</a></p>\n","excerpt":"","more":"<h1 id=\"背景\">背景</h1><p>博主毕业于一所三流本科院校计算机专业，在一份实习工作中，因公司需要，从Java后端投身于Android开发中去。可能会有很多人和博主一样，甚至有更好的条件，所以把自己的经历分享出来，既能看看自己的过去，也可以给一些茫然的同学带来点灵感。</p>\n<h1 id=\"怎么踏出第一步\">怎么踏出第一步</h1><p>所谓初生牛犊不怕虎，当时在零基础的情况下，被leader(iOS)指派要写一个相机模块，并且能带一些图片处理之类的(博主一年后又写了这种类似功能，都没能写的很好)，对未知的东西完全不懂，所以也没有畏惧之心，一边查资料，一边写代码(最后做出来的结果就不说了，想想就羞耻感爆棚)。</p>\n<p>也是从那个时候，养成了独立思考，学习的习惯，在14年前期，Github上还没有那么多关于Android的东西，国内资料对于相机模块的介绍也很少，所以博主大部分资料查阅都来自于Google，至于怎么翻墙就不在这里叙述了。<br>总结出来的就是实践出真知，干了再说！</p>\n<h1 id=\"寻找解决办法的途径\">寻找解决办法的途径</h1><p>在我刚进入Android界的时候，感觉啥都不会，然后手头又有任务，已经让我独立开发一个App了，让我先调研一下需要用到的技术，这个时候只能寻找一些资源和途径，其实官方文档是最好的学习方法，奈何英语不太行，在没有任何基础的情况下直接阅读文档会经常理解错误。所以在那个时候寻找一些国内的论坛，比如apkbus，eoeandroid社区，对于初学者的我，这些论坛对我起到了不小的帮助，至少教会了我怎么写好一个Listview，在当时也流传着一句话”会ListView，Android就入门了”。现在想想挺扯淡的。</p>\n<p>以下是一些比较有用的途径：</p>\n<ol>\n<li><a href=\"http://developer.android.com/\">Android Developers官方文档</a></li>\n<li>Google</li>\n<li>StackoverFlow</li>\n<li>Youtube</li>\n<li>Github开源项目</li>\n</ol>\n<h1 id=\"动力从何而来\">动力从何而来</h1><p>我一直觉得，只有对这行业有兴趣，才能有热情去钻研，才会坚持下来，在这个行业千万不能熬，因为技术日新月异，每天都会有一些新的东西在冲击着老东西，所以要有钻研的精神，跟上时代的脚步，而这一切的驱动力就是兴趣。这也会影响到你会不会去独立学习，利用业余时间去学习更多的东西，在我们那儿叫做暗推(不懂的同学可以百度一下哈)，渐渐地你会发现和别人的差距就体现在你比他们付出的更多汗水。</p>\n<p><code>就怕比你厉害的人比你还要努力</code></p>\n<h1 id=\"关于怎么学习\">关于怎么学习</h1><p>关于如何学习，可以参照大帅阿翟的<a href=\"http://blog.zhaiyifan.cn/2016/04/28/about-learning/\">计算机从业者的技术成长学习之路</a>某些同学可能会一开始买很多的书，博主还是劝告一些同学，读万卷书，不如行万里路。最好的读书方式就是边看边coding。基础很重要！基础很重要！基础很重要！重要的事情说三次！数据结构+算法=编程。虽然算法在Android上用的不多，基本的一些还是要知道的，数据结构是相当重要的！对城宝具:《Java编程思想》、《Android开发艺术与探索》。</p>\n<h1 id=\"瓶颈或茫然时\">瓶颈或茫然时</h1><p>一个人总是很容易遇到瓶颈，或者会有一段时间处于茫然状态，知心哥哥(弟弟)告诉你们，这个时候应该多出去面基！参与一下当地的开发者社区，听听别人的感受或者分享，认识一些基友，扩展自己的社交圈。不要总想跳槽！不要总想跳槽！不要总想跳槽！因为今年行情不是很好，好坑也不多，且行且珍惜！</p>\n<h1 id=\"程序员最缺乏却又最重要的一点:情商\">程序员最缺乏却又最重要的一点:情商</h1><p>咱做开发的，总是被产品、设计、PM、QA指手画脚，久而久之总会有一些怨气，会和别人吵架之类的。一辈子做技术，薪资瓶颈太容易遇到，这个时候能升职加薪的资本就是情商了，说的难听点就是心机手段了，不要总是把情绪表现出来，关于这些在知乎上也有很多讨论，在这里也不细说了，总之就是，做人留一线，日后好相见！这点我也做的不是很好。</p>\n<h1 id=\"关于在技能上的发展\">关于在技能上的发展</h1><p>很多人学习Android总是执着于酷炫的动画，或者一些绚丽的自定义View，个人觉得不如进入深度学习，总是浮在写控件或者动画，目的只是为了炫技，并不是真正的刚需，理解原理才能更好的解决问题，编程的初衷不就是为了解决各种各样的问题不是吗？广的接触一些比如hybrid、后端开发等，会带来一些灵感和解决方案，深入学习也是比较重要的比如read the fucking source code，不然你说的大家都懂还怎么吹比！！！！！一定一定要戒骄戒躁，还是脚踏实地的好。</p>\n<h1 id=\"结语\">结语</h1><p>送给大家也是自己的一句话：<code>先是确定目标，然后坚持到底，这是成功的唯一方法。</code></p>\n<p>原文发布于：<a href=\"http://abner-nimengbo.cn/2016/05/10/AndroidLearningSummarize/\">http://abner-nimengbo.cn/2016/05/10/AndroidLearningSummarize/</a></p>\n"},{"title":"Java->Android并发编程引气入门篇","date":"2016-08-13T05:40:47.000Z","_content":"\nAndroid的并发编程，即多线程开发，而Android的多线程开发模型也是源于**Java中的多线程模型**。\n所以本篇也会先讲一些Java中的多线程理念，再讲解具体涉及的类，最后深入Android中的并发**场景和实践**。\n\n# 并发\n\n## 什么是并发\n\n举个很简单的栗子，当你一边在**撸撸撸**，一边在看**小视频**，同时在做两件事，这就是并发。\n\n咳，年轻人节制啊。\n\n## 并发的好处\n\n### 提高资源利用率\n\n当一个任务并没有完全占用系统资源，就可以利用并发来提高资源利用率，同时也能更快地完成任务。\n\n当你的右手在干些什么的时候，左手是不是在没事做呢？那就也用起来呗。\n(某次聚会，一名骑马的汉子说自己左右互搏(lu)特厉害）。\n\n### 在程序任务上更加精简\n\n就拿上一个栗子来说，左手做什么，右手做什么，任务明确分配好，又能同时进行，既提高了效率，逻辑又清晰。\n\n\n### 更好的响应程序\n\n这个拿Android客户端举个栗子，上传图片时，当前界面还是正常运转没有卡死，图片也正常上传，既保证了界面被响应，又保证图片可以上传。\n\n## 并发的风险\n\n### 并发的代价\n\n+ 需要占用更多的资源。\n+ 设计好一个并发程序并不容易。\n+ 并发的资源交互问题复杂。\n\n### 并发的隐患\n\n+ 滥用资源导致系统不稳定\n+ 结果与预期不符\n+ 出现BUG难以排查\n\n\n# 线程篇\n\n## 进程是什么\n\n就拿Android中的App来说，一般来说一个app就是一个进程，（除了特殊的手段开启了多个进程，这里不深入这个话题，就是一个一对多的关系）。\n\n\n\n## 线程是什么\n\n进程只是一个程序、任务的统称，但是却不能执行任务，真正执行任务的是线程，所以线程是由进程创建的，一个进程可以创建多个线程。\n\n线程可以调度资源等等，在这里只需要了解大致的概念就好，如果要深入可以学习一下**操作系统**。\n\n## 进程与线程的关系\n\n人脑就相当于是CPU，想做一件事的时候，这个任务就是一个进程了，需要运用手脚等器官去完成这个任务，而手脚器官就可以理解成一个个线程，去做了不同的事，从而完成任务。\n\n## 单线程\n\n还是用Android举栗子，当你在手机上操作的时候，这个被称之为UI线程（之后会详解）。而一个最基本的app，不需要复杂的功能时，就只有一个UI线程和我们交互，那么这个app就是个单线程的。一般的程序面向用户的线程就是UI线程，也称之为主线程，单线程程序，其实就是只有一个主线程的程序。\n\n## 多线程\n\n多个进程可以算是并发，但是我们所说的并发场景，大部分是在一个进程中的，而并发就是由线程完成的，多个线程同时执行任务，就称之为并发。\n\n以下为多线程工作示意图：\n\n![多线程](http://abner-nimengbo.cn/images/多线程.png)\n\n### 多线程并发过程中会遇到的问题\n\n#### 1. 资源共享\n\nA线程要写文件C，B线程也要写文件C，这个时候就好像你拿着两只笔同时往纸上写东西，写出来的是什么自己也不知道。\n\n这个时候我们需要一个类似于**锁**的东西，当C被A在写的时候，B不能写，B要等A写完了才能继续写。\n\n至于这个**锁**到底是什么会在后面继续讲到。\n\n#### 3. 死锁问题\n\n\n\n死锁的四个条件是：\n\n+ 禁止抢占：no preemption\n\n+ 持有和等待：hold and wait\n\n+ 互斥：mutual exclusion\n\n+ 循环等待：circular waiting\n\n预防死锁就是至少破坏这四个条件其中一项，即破坏“禁止抢占”、破坏“持有等待”、破坏“资源互斥”和破坏“循环等待”。\n\n举个例子：\n\nA在B那边割包皮，B把A割坏了，A占着B的床位，要B赔钱，B要A让出床位才给钱。双方僵持不下。\n\n## 线程如何去用\n\n在Java中，线程通常就是指`Thread`这个类，或者实现了`Runnable`的类，其实`Thread`这个类也是实现了`Runnable`接口的，可以看一下`Runnable`接口的代码：\n\n![Runnable](http://abner-nimengbo.cn/images/runnable.png)\n\n里面就是一个run方法需要被实现。\n\n再看一下`Thread`类的声明：\n\n![Thread](http://abner-nimengbo.cn/images/Thread.png)\n\n确实是一个实现了`Runnable`的类。\n\n那么Thread类中拥有`start()`方法，和`run()`方法，下面用`run()`方法直接调用\n得到信息：\n\n![ThreadRun](http://abner-nimengbo.cn/images/threadRun.png)\n\n发现其实和外面的线程是在同一个线程上。\n\n而调用`start()`方法得到的信息是：\n\n![ThreadStart](http://abner-nimengbo.cn/images/threadStart.png)\n\n发现线程名不一样了，用start会开启一个新的线程，而run还是在当前线程执行。\n\n另外在Java1.5之后，还有Callable、Future和FutureTask，在这里就不详细介绍，还有线程的wait、\nyield、sleep等在下一章会一起详细介绍。\n\n## 线程的优先级\n\n在Java中，线程的优先级有1~10，而默认的是5。1最低，10最高。在Thread类中有三个常量：\n\n+ MIN_PRIORITY = 1\n\n+ NORM_PRIORITY = 5\n\n+ MAX_PRIORITY = 10\n\n在同一个线程池中的线程优先级是相同的。\n\nJVM会根据线程的优先级去抢先调度，然而线程的优先级只能保证抢占资源的概率较大，并不能保障线程的执行顺序，所以不能过于依赖设置线程的优先级。\n\n## 线程池\n\n频繁地创建和销毁线程会导致性能大幅度降低，这肯定不是你希望的。\n\n线程池的出现，就是为了解决这个问题，根据java中提供不同的线程池机制，有效地提高资源利用率。\n\n直接在代码中创建Thread、Runnable去start或者run容易出现不可预测的问题，在java1.5开始，引入了java.util.concurrent包，其中有个并发的框架：`Executor`，使用`ExecutorService`替代直接操作线程类，而`Executors`是用来创建线程池的，内部提供了很多静态方法去创建你想要的线程池，不需要你再手动去创建实现。\n看一下关于Executor中的类和接口的大致的成员与关系：\n\n![concurrent](http://abner-nimengbo.cn/images/concurrent.png)\n\n关于这些类如何使用，以及有什么特性，下一章会作介绍。\n\n\n\n## 队列\n\n在java中提到队列肯定会想起`Queue`,而线程队列用的是`BlockingQueue`,这是个接口，在`concurrent`包中有好几个类实现了这个接口。\n\n![BlockingQueue](http://abner-nimengbo.cn/images/BlockingQueue.png)\n\n介绍一下BlockingQueue常用的方法\n\n|       | 会异常           | 返回是否成功  | 会阻塞 | 设定等待时间 |  \n| :-------------: |:-------------:| :-----:|:------------- :|:-------------:|\n| 入队列      | add(e) | offer(e) | put(e)      | offer(e, timeout, unit) |\n| 出队列      | remove()        |   poll() |take()      | poll(time, unit)      |\n| 查看值 | element()      |    peek()   |none | none      |    \n\n\n\n## 线程安全\n\n### 锁\n\n在前面讲过死锁，死锁是由于使用不当引起的一种现象，而这里的锁是人工干预的，让并发按照你的意思走。\n\n在java中的锁有synchonrized、Lock。锁的出现主要是为了解决线程安全问题。\n\n关于**线程的状态**会在下一章讲锁的机制时候再讲，因为线程的状态会影响到锁。\n\n### 线程安全的集合\n\n因为多线程访问资源可能会造成数据不一致或者数据污染，而某些集合会用一些锁或者同步机制做了处理。\n\n线程安全的集合有：HashTable、SynchronizedCollection、ConcurrentHashMap、Vector等。\n\n线程安不安全的首要前提是在**多线程访问同一个对象**的情况下。\n\n# 预告\n\n本节中挖的**坑**，一些没有展开讲的东西，会在下一节中填上。\n\n# 感谢\n\n\n\n\n>《Java并发编程实践》  \n>《Thinking in Java》\n\n> baoyongzhang(鲍老师)\n","source":"_posts/AndroidMultipeThreadProgram.md","raw":"title: Java->Android并发编程引气入门篇\ndate: 2016-08-13 13:40:47\ncategories:\n- 实践\ntags:\n- Android\n- Thread\n---\n\nAndroid的并发编程，即多线程开发，而Android的多线程开发模型也是源于**Java中的多线程模型**。\n所以本篇也会先讲一些Java中的多线程理念，再讲解具体涉及的类，最后深入Android中的并发**场景和实践**。\n\n# 并发\n\n## 什么是并发\n\n举个很简单的栗子，当你一边在**撸撸撸**，一边在看**小视频**，同时在做两件事，这就是并发。\n\n咳，年轻人节制啊。\n\n## 并发的好处\n\n### 提高资源利用率\n\n当一个任务并没有完全占用系统资源，就可以利用并发来提高资源利用率，同时也能更快地完成任务。\n\n当你的右手在干些什么的时候，左手是不是在没事做呢？那就也用起来呗。\n(某次聚会，一名骑马的汉子说自己左右互搏(lu)特厉害）。\n\n### 在程序任务上更加精简\n\n就拿上一个栗子来说，左手做什么，右手做什么，任务明确分配好，又能同时进行，既提高了效率，逻辑又清晰。\n\n\n### 更好的响应程序\n\n这个拿Android客户端举个栗子，上传图片时，当前界面还是正常运转没有卡死，图片也正常上传，既保证了界面被响应，又保证图片可以上传。\n\n## 并发的风险\n\n### 并发的代价\n\n+ 需要占用更多的资源。\n+ 设计好一个并发程序并不容易。\n+ 并发的资源交互问题复杂。\n\n### 并发的隐患\n\n+ 滥用资源导致系统不稳定\n+ 结果与预期不符\n+ 出现BUG难以排查\n\n\n# 线程篇\n\n## 进程是什么\n\n就拿Android中的App来说，一般来说一个app就是一个进程，（除了特殊的手段开启了多个进程，这里不深入这个话题，就是一个一对多的关系）。\n\n\n\n## 线程是什么\n\n进程只是一个程序、任务的统称，但是却不能执行任务，真正执行任务的是线程，所以线程是由进程创建的，一个进程可以创建多个线程。\n\n线程可以调度资源等等，在这里只需要了解大致的概念就好，如果要深入可以学习一下**操作系统**。\n\n## 进程与线程的关系\n\n人脑就相当于是CPU，想做一件事的时候，这个任务就是一个进程了，需要运用手脚等器官去完成这个任务，而手脚器官就可以理解成一个个线程，去做了不同的事，从而完成任务。\n\n## 单线程\n\n还是用Android举栗子，当你在手机上操作的时候，这个被称之为UI线程（之后会详解）。而一个最基本的app，不需要复杂的功能时，就只有一个UI线程和我们交互，那么这个app就是个单线程的。一般的程序面向用户的线程就是UI线程，也称之为主线程，单线程程序，其实就是只有一个主线程的程序。\n\n## 多线程\n\n多个进程可以算是并发，但是我们所说的并发场景，大部分是在一个进程中的，而并发就是由线程完成的，多个线程同时执行任务，就称之为并发。\n\n以下为多线程工作示意图：\n\n![多线程](http://abner-nimengbo.cn/images/多线程.png)\n\n### 多线程并发过程中会遇到的问题\n\n#### 1. 资源共享\n\nA线程要写文件C，B线程也要写文件C，这个时候就好像你拿着两只笔同时往纸上写东西，写出来的是什么自己也不知道。\n\n这个时候我们需要一个类似于**锁**的东西，当C被A在写的时候，B不能写，B要等A写完了才能继续写。\n\n至于这个**锁**到底是什么会在后面继续讲到。\n\n#### 3. 死锁问题\n\n\n\n死锁的四个条件是：\n\n+ 禁止抢占：no preemption\n\n+ 持有和等待：hold and wait\n\n+ 互斥：mutual exclusion\n\n+ 循环等待：circular waiting\n\n预防死锁就是至少破坏这四个条件其中一项，即破坏“禁止抢占”、破坏“持有等待”、破坏“资源互斥”和破坏“循环等待”。\n\n举个例子：\n\nA在B那边割包皮，B把A割坏了，A占着B的床位，要B赔钱，B要A让出床位才给钱。双方僵持不下。\n\n## 线程如何去用\n\n在Java中，线程通常就是指`Thread`这个类，或者实现了`Runnable`的类，其实`Thread`这个类也是实现了`Runnable`接口的，可以看一下`Runnable`接口的代码：\n\n![Runnable](http://abner-nimengbo.cn/images/runnable.png)\n\n里面就是一个run方法需要被实现。\n\n再看一下`Thread`类的声明：\n\n![Thread](http://abner-nimengbo.cn/images/Thread.png)\n\n确实是一个实现了`Runnable`的类。\n\n那么Thread类中拥有`start()`方法，和`run()`方法，下面用`run()`方法直接调用\n得到信息：\n\n![ThreadRun](http://abner-nimengbo.cn/images/threadRun.png)\n\n发现其实和外面的线程是在同一个线程上。\n\n而调用`start()`方法得到的信息是：\n\n![ThreadStart](http://abner-nimengbo.cn/images/threadStart.png)\n\n发现线程名不一样了，用start会开启一个新的线程，而run还是在当前线程执行。\n\n另外在Java1.5之后，还有Callable、Future和FutureTask，在这里就不详细介绍，还有线程的wait、\nyield、sleep等在下一章会一起详细介绍。\n\n## 线程的优先级\n\n在Java中，线程的优先级有1~10，而默认的是5。1最低，10最高。在Thread类中有三个常量：\n\n+ MIN_PRIORITY = 1\n\n+ NORM_PRIORITY = 5\n\n+ MAX_PRIORITY = 10\n\n在同一个线程池中的线程优先级是相同的。\n\nJVM会根据线程的优先级去抢先调度，然而线程的优先级只能保证抢占资源的概率较大，并不能保障线程的执行顺序，所以不能过于依赖设置线程的优先级。\n\n## 线程池\n\n频繁地创建和销毁线程会导致性能大幅度降低，这肯定不是你希望的。\n\n线程池的出现，就是为了解决这个问题，根据java中提供不同的线程池机制，有效地提高资源利用率。\n\n直接在代码中创建Thread、Runnable去start或者run容易出现不可预测的问题，在java1.5开始，引入了java.util.concurrent包，其中有个并发的框架：`Executor`，使用`ExecutorService`替代直接操作线程类，而`Executors`是用来创建线程池的，内部提供了很多静态方法去创建你想要的线程池，不需要你再手动去创建实现。\n看一下关于Executor中的类和接口的大致的成员与关系：\n\n![concurrent](http://abner-nimengbo.cn/images/concurrent.png)\n\n关于这些类如何使用，以及有什么特性，下一章会作介绍。\n\n\n\n## 队列\n\n在java中提到队列肯定会想起`Queue`,而线程队列用的是`BlockingQueue`,这是个接口，在`concurrent`包中有好几个类实现了这个接口。\n\n![BlockingQueue](http://abner-nimengbo.cn/images/BlockingQueue.png)\n\n介绍一下BlockingQueue常用的方法\n\n|       | 会异常           | 返回是否成功  | 会阻塞 | 设定等待时间 |  \n| :-------------: |:-------------:| :-----:|:------------- :|:-------------:|\n| 入队列      | add(e) | offer(e) | put(e)      | offer(e, timeout, unit) |\n| 出队列      | remove()        |   poll() |take()      | poll(time, unit)      |\n| 查看值 | element()      |    peek()   |none | none      |    \n\n\n\n## 线程安全\n\n### 锁\n\n在前面讲过死锁，死锁是由于使用不当引起的一种现象，而这里的锁是人工干预的，让并发按照你的意思走。\n\n在java中的锁有synchonrized、Lock。锁的出现主要是为了解决线程安全问题。\n\n关于**线程的状态**会在下一章讲锁的机制时候再讲，因为线程的状态会影响到锁。\n\n### 线程安全的集合\n\n因为多线程访问资源可能会造成数据不一致或者数据污染，而某些集合会用一些锁或者同步机制做了处理。\n\n线程安全的集合有：HashTable、SynchronizedCollection、ConcurrentHashMap、Vector等。\n\n线程安不安全的首要前提是在**多线程访问同一个对象**的情况下。\n\n# 预告\n\n本节中挖的**坑**，一些没有展开讲的东西，会在下一节中填上。\n\n# 感谢\n\n\n\n\n>《Java并发编程实践》  \n>《Thinking in Java》\n\n> baoyongzhang(鲍老师)\n","slug":"AndroidMultipeThreadProgram","published":1,"updated":"2016-08-25T02:51:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tihr7o00074irrll9lx8zv","content":"<p>Android的并发编程，即多线程开发，而Android的多线程开发模型也是源于<strong>Java中的多线程模型</strong>。<br>所以本篇也会先讲一些Java中的多线程理念，再讲解具体涉及的类，最后深入Android中的并发<strong>场景和实践</strong>。</p>\n<h1 id=\"并发\">并发</h1><h2 id=\"什么是并发\">什么是并发</h2><p>举个很简单的栗子，当你一边在<strong>撸撸撸</strong>，一边在看<strong>小视频</strong>，同时在做两件事，这就是并发。</p>\n<p>咳，年轻人节制啊。</p>\n<h2 id=\"并发的好处\">并发的好处</h2><h3 id=\"提高资源利用率\">提高资源利用率</h3><p>当一个任务并没有完全占用系统资源，就可以利用并发来提高资源利用率，同时也能更快地完成任务。</p>\n<p>当你的右手在干些什么的时候，左手是不是在没事做呢？那就也用起来呗。<br>(某次聚会，一名骑马的汉子说自己左右互搏(lu)特厉害）。</p>\n<h3 id=\"在程序任务上更加精简\">在程序任务上更加精简</h3><p>就拿上一个栗子来说，左手做什么，右手做什么，任务明确分配好，又能同时进行，既提高了效率，逻辑又清晰。</p>\n<h3 id=\"更好的响应程序\">更好的响应程序</h3><p>这个拿Android客户端举个栗子，上传图片时，当前界面还是正常运转没有卡死，图片也正常上传，既保证了界面被响应，又保证图片可以上传。</p>\n<h2 id=\"并发的风险\">并发的风险</h2><h3 id=\"并发的代价\">并发的代价</h3><ul>\n<li>需要占用更多的资源。</li>\n<li>设计好一个并发程序并不容易。</li>\n<li>并发的资源交互问题复杂。</li>\n</ul>\n<h3 id=\"并发的隐患\">并发的隐患</h3><ul>\n<li>滥用资源导致系统不稳定</li>\n<li>结果与预期不符</li>\n<li>出现BUG难以排查</li>\n</ul>\n<h1 id=\"线程篇\">线程篇</h1><h2 id=\"进程是什么\">进程是什么</h2><p>就拿Android中的App来说，一般来说一个app就是一个进程，（除了特殊的手段开启了多个进程，这里不深入这个话题，就是一个一对多的关系）。</p>\n<h2 id=\"线程是什么\">线程是什么</h2><p>进程只是一个程序、任务的统称，但是却不能执行任务，真正执行任务的是线程，所以线程是由进程创建的，一个进程可以创建多个线程。</p>\n<p>线程可以调度资源等等，在这里只需要了解大致的概念就好，如果要深入可以学习一下<strong>操作系统</strong>。</p>\n<h2 id=\"进程与线程的关系\">进程与线程的关系</h2><p>人脑就相当于是CPU，想做一件事的时候，这个任务就是一个进程了，需要运用手脚等器官去完成这个任务，而手脚器官就可以理解成一个个线程，去做了不同的事，从而完成任务。</p>\n<h2 id=\"单线程\">单线程</h2><p>还是用Android举栗子，当你在手机上操作的时候，这个被称之为UI线程（之后会详解）。而一个最基本的app，不需要复杂的功能时，就只有一个UI线程和我们交互，那么这个app就是个单线程的。一般的程序面向用户的线程就是UI线程，也称之为主线程，单线程程序，其实就是只有一个主线程的程序。</p>\n<h2 id=\"多线程\">多线程</h2><p>多个进程可以算是并发，但是我们所说的并发场景，大部分是在一个进程中的，而并发就是由线程完成的，多个线程同时执行任务，就称之为并发。</p>\n<p>以下为多线程工作示意图：</p>\n<p><img src=\"http://abner-nimengbo.cn/images/多线程.png\" alt=\"多线程\"></p>\n<h3 id=\"多线程并发过程中会遇到的问题\">多线程并发过程中会遇到的问题</h3><h4 id=\"1-_资源共享\">1. 资源共享</h4><p>A线程要写文件C，B线程也要写文件C，这个时候就好像你拿着两只笔同时往纸上写东西，写出来的是什么自己也不知道。</p>\n<p>这个时候我们需要一个类似于<strong>锁</strong>的东西，当C被A在写的时候，B不能写，B要等A写完了才能继续写。</p>\n<p>至于这个<strong>锁</strong>到底是什么会在后面继续讲到。</p>\n<h4 id=\"3-_死锁问题\">3. 死锁问题</h4><p>死锁的四个条件是：</p>\n<ul>\n<li><p>禁止抢占：no preemption</p>\n</li>\n<li><p>持有和等待：hold and wait</p>\n</li>\n<li><p>互斥：mutual exclusion</p>\n</li>\n<li><p>循环等待：circular waiting</p>\n</li>\n</ul>\n<p>预防死锁就是至少破坏这四个条件其中一项，即破坏“禁止抢占”、破坏“持有等待”、破坏“资源互斥”和破坏“循环等待”。</p>\n<p>举个例子：</p>\n<p>A在B那边割包皮，B把A割坏了，A占着B的床位，要B赔钱，B要A让出床位才给钱。双方僵持不下。</p>\n<h2 id=\"线程如何去用\">线程如何去用</h2><p>在Java中，线程通常就是指<code>Thread</code>这个类，或者实现了<code>Runnable</code>的类，其实<code>Thread</code>这个类也是实现了<code>Runnable</code>接口的，可以看一下<code>Runnable</code>接口的代码：</p>\n<p><img src=\"http://abner-nimengbo.cn/images/runnable.png\" alt=\"Runnable\"></p>\n<p>里面就是一个run方法需要被实现。</p>\n<p>再看一下<code>Thread</code>类的声明：</p>\n<p><img src=\"http://abner-nimengbo.cn/images/Thread.png\" alt=\"Thread\"></p>\n<p>确实是一个实现了<code>Runnable</code>的类。</p>\n<p>那么Thread类中拥有<code>start()</code>方法，和<code>run()</code>方法，下面用<code>run()</code>方法直接调用<br>得到信息：</p>\n<p><img src=\"http://abner-nimengbo.cn/images/threadRun.png\" alt=\"ThreadRun\"></p>\n<p>发现其实和外面的线程是在同一个线程上。</p>\n<p>而调用<code>start()</code>方法得到的信息是：</p>\n<p><img src=\"http://abner-nimengbo.cn/images/threadStart.png\" alt=\"ThreadStart\"></p>\n<p>发现线程名不一样了，用start会开启一个新的线程，而run还是在当前线程执行。</p>\n<p>另外在Java1.5之后，还有Callable、Future和FutureTask，在这里就不详细介绍，还有线程的wait、<br>yield、sleep等在下一章会一起详细介绍。</p>\n<h2 id=\"线程的优先级\">线程的优先级</h2><p>在Java中，线程的优先级有1~10，而默认的是5。1最低，10最高。在Thread类中有三个常量：</p>\n<ul>\n<li><p>MIN_PRIORITY = 1</p>\n</li>\n<li><p>NORM_PRIORITY = 5</p>\n</li>\n<li><p>MAX_PRIORITY = 10</p>\n</li>\n</ul>\n<p>在同一个线程池中的线程优先级是相同的。</p>\n<p>JVM会根据线程的优先级去抢先调度，然而线程的优先级只能保证抢占资源的概率较大，并不能保障线程的执行顺序，所以不能过于依赖设置线程的优先级。</p>\n<h2 id=\"线程池\">线程池</h2><p>频繁地创建和销毁线程会导致性能大幅度降低，这肯定不是你希望的。</p>\n<p>线程池的出现，就是为了解决这个问题，根据java中提供不同的线程池机制，有效地提高资源利用率。</p>\n<p>直接在代码中创建Thread、Runnable去start或者run容易出现不可预测的问题，在java1.5开始，引入了java.util.concurrent包，其中有个并发的框架：<code>Executor</code>，使用<code>ExecutorService</code>替代直接操作线程类，而<code>Executors</code>是用来创建线程池的，内部提供了很多静态方法去创建你想要的线程池，不需要你再手动去创建实现。<br>看一下关于Executor中的类和接口的大致的成员与关系：</p>\n<p><img src=\"http://abner-nimengbo.cn/images/concurrent.png\" alt=\"concurrent\"></p>\n<p>关于这些类如何使用，以及有什么特性，下一章会作介绍。</p>\n<h2 id=\"队列\">队列</h2><p>在java中提到队列肯定会想起<code>Queue</code>,而线程队列用的是<code>BlockingQueue</code>,这是个接口，在<code>concurrent</code>包中有好几个类实现了这个接口。</p>\n<p><img src=\"http://abner-nimengbo.cn/images/BlockingQueue.png\" alt=\"BlockingQueue\"></p>\n<p>介绍一下BlockingQueue常用的方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">会异常</th>\n<th style=\"text-align:center\">返回是否成功</th>\n<th>会阻塞</th>\n<th style=\"text-align:center\">设定等待时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">入队列</td>\n<td style=\"text-align:center\">add(e)</td>\n<td style=\"text-align:center\">offer(e)</td>\n<td>put(e)</td>\n<td style=\"text-align:center\">offer(e, timeout, unit)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">出队列</td>\n<td style=\"text-align:center\">remove()</td>\n<td style=\"text-align:center\">poll()</td>\n<td>take()</td>\n<td style=\"text-align:center\">poll(time, unit)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">查看值</td>\n<td style=\"text-align:center\">element()</td>\n<td style=\"text-align:center\">peek()</td>\n<td>none</td>\n<td style=\"text-align:center\">none</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"线程安全\">线程安全</h2><h3 id=\"锁\">锁</h3><p>在前面讲过死锁，死锁是由于使用不当引起的一种现象，而这里的锁是人工干预的，让并发按照你的意思走。</p>\n<p>在java中的锁有synchonrized、Lock。锁的出现主要是为了解决线程安全问题。</p>\n<p>关于<strong>线程的状态</strong>会在下一章讲锁的机制时候再讲，因为线程的状态会影响到锁。</p>\n<h3 id=\"线程安全的集合\">线程安全的集合</h3><p>因为多线程访问资源可能会造成数据不一致或者数据污染，而某些集合会用一些锁或者同步机制做了处理。</p>\n<p>线程安全的集合有：HashTable、SynchronizedCollection、ConcurrentHashMap、Vector等。</p>\n<p>线程安不安全的首要前提是在<strong>多线程访问同一个对象</strong>的情况下。</p>\n<h1 id=\"预告\">预告</h1><p>本节中挖的<strong>坑</strong>，一些没有展开讲的东西，会在下一节中填上。</p>\n<h1 id=\"感谢\">感谢</h1><blockquote>\n<p>《Java并发编程实践》<br>《Thinking in Java》</p>\n<p>baoyongzhang(鲍老师)</p>\n</blockquote>\n","excerpt":"","more":"<p>Android的并发编程，即多线程开发，而Android的多线程开发模型也是源于<strong>Java中的多线程模型</strong>。<br>所以本篇也会先讲一些Java中的多线程理念，再讲解具体涉及的类，最后深入Android中的并发<strong>场景和实践</strong>。</p>\n<h1 id=\"并发\">并发</h1><h2 id=\"什么是并发\">什么是并发</h2><p>举个很简单的栗子，当你一边在<strong>撸撸撸</strong>，一边在看<strong>小视频</strong>，同时在做两件事，这就是并发。</p>\n<p>咳，年轻人节制啊。</p>\n<h2 id=\"并发的好处\">并发的好处</h2><h3 id=\"提高资源利用率\">提高资源利用率</h3><p>当一个任务并没有完全占用系统资源，就可以利用并发来提高资源利用率，同时也能更快地完成任务。</p>\n<p>当你的右手在干些什么的时候，左手是不是在没事做呢？那就也用起来呗。<br>(某次聚会，一名骑马的汉子说自己左右互搏(lu)特厉害）。</p>\n<h3 id=\"在程序任务上更加精简\">在程序任务上更加精简</h3><p>就拿上一个栗子来说，左手做什么，右手做什么，任务明确分配好，又能同时进行，既提高了效率，逻辑又清晰。</p>\n<h3 id=\"更好的响应程序\">更好的响应程序</h3><p>这个拿Android客户端举个栗子，上传图片时，当前界面还是正常运转没有卡死，图片也正常上传，既保证了界面被响应，又保证图片可以上传。</p>\n<h2 id=\"并发的风险\">并发的风险</h2><h3 id=\"并发的代价\">并发的代价</h3><ul>\n<li>需要占用更多的资源。</li>\n<li>设计好一个并发程序并不容易。</li>\n<li>并发的资源交互问题复杂。</li>\n</ul>\n<h3 id=\"并发的隐患\">并发的隐患</h3><ul>\n<li>滥用资源导致系统不稳定</li>\n<li>结果与预期不符</li>\n<li>出现BUG难以排查</li>\n</ul>\n<h1 id=\"线程篇\">线程篇</h1><h2 id=\"进程是什么\">进程是什么</h2><p>就拿Android中的App来说，一般来说一个app就是一个进程，（除了特殊的手段开启了多个进程，这里不深入这个话题，就是一个一对多的关系）。</p>\n<h2 id=\"线程是什么\">线程是什么</h2><p>进程只是一个程序、任务的统称，但是却不能执行任务，真正执行任务的是线程，所以线程是由进程创建的，一个进程可以创建多个线程。</p>\n<p>线程可以调度资源等等，在这里只需要了解大致的概念就好，如果要深入可以学习一下<strong>操作系统</strong>。</p>\n<h2 id=\"进程与线程的关系\">进程与线程的关系</h2><p>人脑就相当于是CPU，想做一件事的时候，这个任务就是一个进程了，需要运用手脚等器官去完成这个任务，而手脚器官就可以理解成一个个线程，去做了不同的事，从而完成任务。</p>\n<h2 id=\"单线程\">单线程</h2><p>还是用Android举栗子，当你在手机上操作的时候，这个被称之为UI线程（之后会详解）。而一个最基本的app，不需要复杂的功能时，就只有一个UI线程和我们交互，那么这个app就是个单线程的。一般的程序面向用户的线程就是UI线程，也称之为主线程，单线程程序，其实就是只有一个主线程的程序。</p>\n<h2 id=\"多线程\">多线程</h2><p>多个进程可以算是并发，但是我们所说的并发场景，大部分是在一个进程中的，而并发就是由线程完成的，多个线程同时执行任务，就称之为并发。</p>\n<p>以下为多线程工作示意图：</p>\n<p><img src=\"http://abner-nimengbo.cn/images/多线程.png\" alt=\"多线程\"></p>\n<h3 id=\"多线程并发过程中会遇到的问题\">多线程并发过程中会遇到的问题</h3><h4 id=\"1-_资源共享\">1. 资源共享</h4><p>A线程要写文件C，B线程也要写文件C，这个时候就好像你拿着两只笔同时往纸上写东西，写出来的是什么自己也不知道。</p>\n<p>这个时候我们需要一个类似于<strong>锁</strong>的东西，当C被A在写的时候，B不能写，B要等A写完了才能继续写。</p>\n<p>至于这个<strong>锁</strong>到底是什么会在后面继续讲到。</p>\n<h4 id=\"3-_死锁问题\">3. 死锁问题</h4><p>死锁的四个条件是：</p>\n<ul>\n<li><p>禁止抢占：no preemption</p>\n</li>\n<li><p>持有和等待：hold and wait</p>\n</li>\n<li><p>互斥：mutual exclusion</p>\n</li>\n<li><p>循环等待：circular waiting</p>\n</li>\n</ul>\n<p>预防死锁就是至少破坏这四个条件其中一项，即破坏“禁止抢占”、破坏“持有等待”、破坏“资源互斥”和破坏“循环等待”。</p>\n<p>举个例子：</p>\n<p>A在B那边割包皮，B把A割坏了，A占着B的床位，要B赔钱，B要A让出床位才给钱。双方僵持不下。</p>\n<h2 id=\"线程如何去用\">线程如何去用</h2><p>在Java中，线程通常就是指<code>Thread</code>这个类，或者实现了<code>Runnable</code>的类，其实<code>Thread</code>这个类也是实现了<code>Runnable</code>接口的，可以看一下<code>Runnable</code>接口的代码：</p>\n<p><img src=\"http://abner-nimengbo.cn/images/runnable.png\" alt=\"Runnable\"></p>\n<p>里面就是一个run方法需要被实现。</p>\n<p>再看一下<code>Thread</code>类的声明：</p>\n<p><img src=\"http://abner-nimengbo.cn/images/Thread.png\" alt=\"Thread\"></p>\n<p>确实是一个实现了<code>Runnable</code>的类。</p>\n<p>那么Thread类中拥有<code>start()</code>方法，和<code>run()</code>方法，下面用<code>run()</code>方法直接调用<br>得到信息：</p>\n<p><img src=\"http://abner-nimengbo.cn/images/threadRun.png\" alt=\"ThreadRun\"></p>\n<p>发现其实和外面的线程是在同一个线程上。</p>\n<p>而调用<code>start()</code>方法得到的信息是：</p>\n<p><img src=\"http://abner-nimengbo.cn/images/threadStart.png\" alt=\"ThreadStart\"></p>\n<p>发现线程名不一样了，用start会开启一个新的线程，而run还是在当前线程执行。</p>\n<p>另外在Java1.5之后，还有Callable、Future和FutureTask，在这里就不详细介绍，还有线程的wait、<br>yield、sleep等在下一章会一起详细介绍。</p>\n<h2 id=\"线程的优先级\">线程的优先级</h2><p>在Java中，线程的优先级有1~10，而默认的是5。1最低，10最高。在Thread类中有三个常量：</p>\n<ul>\n<li><p>MIN_PRIORITY = 1</p>\n</li>\n<li><p>NORM_PRIORITY = 5</p>\n</li>\n<li><p>MAX_PRIORITY = 10</p>\n</li>\n</ul>\n<p>在同一个线程池中的线程优先级是相同的。</p>\n<p>JVM会根据线程的优先级去抢先调度，然而线程的优先级只能保证抢占资源的概率较大，并不能保障线程的执行顺序，所以不能过于依赖设置线程的优先级。</p>\n<h2 id=\"线程池\">线程池</h2><p>频繁地创建和销毁线程会导致性能大幅度降低，这肯定不是你希望的。</p>\n<p>线程池的出现，就是为了解决这个问题，根据java中提供不同的线程池机制，有效地提高资源利用率。</p>\n<p>直接在代码中创建Thread、Runnable去start或者run容易出现不可预测的问题，在java1.5开始，引入了java.util.concurrent包，其中有个并发的框架：<code>Executor</code>，使用<code>ExecutorService</code>替代直接操作线程类，而<code>Executors</code>是用来创建线程池的，内部提供了很多静态方法去创建你想要的线程池，不需要你再手动去创建实现。<br>看一下关于Executor中的类和接口的大致的成员与关系：</p>\n<p><img src=\"http://abner-nimengbo.cn/images/concurrent.png\" alt=\"concurrent\"></p>\n<p>关于这些类如何使用，以及有什么特性，下一章会作介绍。</p>\n<h2 id=\"队列\">队列</h2><p>在java中提到队列肯定会想起<code>Queue</code>,而线程队列用的是<code>BlockingQueue</code>,这是个接口，在<code>concurrent</code>包中有好几个类实现了这个接口。</p>\n<p><img src=\"http://abner-nimengbo.cn/images/BlockingQueue.png\" alt=\"BlockingQueue\"></p>\n<p>介绍一下BlockingQueue常用的方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">会异常</th>\n<th style=\"text-align:center\">返回是否成功</th>\n<th>会阻塞</th>\n<th style=\"text-align:center\">设定等待时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">入队列</td>\n<td style=\"text-align:center\">add(e)</td>\n<td style=\"text-align:center\">offer(e)</td>\n<td>put(e)</td>\n<td style=\"text-align:center\">offer(e, timeout, unit)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">出队列</td>\n<td style=\"text-align:center\">remove()</td>\n<td style=\"text-align:center\">poll()</td>\n<td>take()</td>\n<td style=\"text-align:center\">poll(time, unit)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">查看值</td>\n<td style=\"text-align:center\">element()</td>\n<td style=\"text-align:center\">peek()</td>\n<td>none</td>\n<td style=\"text-align:center\">none</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"线程安全\">线程安全</h2><h3 id=\"锁\">锁</h3><p>在前面讲过死锁，死锁是由于使用不当引起的一种现象，而这里的锁是人工干预的，让并发按照你的意思走。</p>\n<p>在java中的锁有synchonrized、Lock。锁的出现主要是为了解决线程安全问题。</p>\n<p>关于<strong>线程的状态</strong>会在下一章讲锁的机制时候再讲，因为线程的状态会影响到锁。</p>\n<h3 id=\"线程安全的集合\">线程安全的集合</h3><p>因为多线程访问资源可能会造成数据不一致或者数据污染，而某些集合会用一些锁或者同步机制做了处理。</p>\n<p>线程安全的集合有：HashTable、SynchronizedCollection、ConcurrentHashMap、Vector等。</p>\n<p>线程安不安全的首要前提是在<strong>多线程访问同一个对象</strong>的情况下。</p>\n<h1 id=\"预告\">预告</h1><p>本节中挖的<strong>坑</strong>，一些没有展开讲的东西，会在下一节中填上。</p>\n<h1 id=\"感谢\">感谢</h1><blockquote>\n<p>《Java并发编程实践》<br>《Thinking in Java》</p>\n<p>baoyongzhang(鲍老师)</p>\n</blockquote>\n"},{"title":"Java->Android并发编程筑基篇","date":"2016-09-07T08:44:43.000Z","_content":"\n最近有点忙，又有其他的事情，所以一直没有开始写这篇，感觉很惭愧。\n\n上一章讲了太多的东西，其实每一个小细节都可以写成一长篇，这一章会尽量用精简的方式把坑填上。\n\n# Java的线程状态\n\n想要学好并发，还是得知道线程的生命周期，先看一下线程的生命周期：\n\n![线程生命周期](http://abner-nimengbo.cn/images/threadStatus.png)\n\n在线程的运行周期中会有状态与锁有关，所以先要讲解线程的状态，才能继续讲锁。\n\n## sleep\n\nsleep会让当前线程进入\"睡眠\"状态，把执行的机会让给其他线程。\n\n``类似于迅雷下载，当前正在下载N部片子，可同时执行任务数为M(M<N)，暂停当前任务后，正在等待的任务才有机会提前运行，否则只有当前任务结束后，才会开始。``\n\n但是，sleep不会释放锁，如果有同步块、锁之类的，sleep后，别的线程仍然不能访问已经被锁住的数据。\n\n## wait、notify、notifyAll\n\n在使用wait和notify的时候需要用synchronized锁住对象，以此来保证线程安全。\n\n使用wait后，会暂时地将锁释放，使当前线程处于等待状态，从而使别的线程可以访问到资源，唤醒(notify)或者使用了wait(long)线程苏醒后就会重新占用锁，如果使用了interrupte去中断wait，就会抛出**InterruptedException**。\n\n\n需要注意的是，wait、notify、notifyAll，都是属于Object类中的方法，而不是属于Thread，这意味着使用对象的方法，会影响到访问此对象的线程的状态，所以前面提到需要用synchronized保证线程。\n\n## yield\n\n>  Causes the calling Thread to yield execution time to another Thread that\nis ready to run. The actual scheduling is implementation-dependent.\n\n这是官方的注释，调用Thread.yield()方法，只是让线程进入准备运行状态，把CPU资源让给别的线程提前运行。\n\n## join\n\nThread.join()\n看字面意思像是合并，其实从效果上来看更像\"插队\"，b.join，那么a必须等b执行完才能继续往下执行。\n\n# Java中的锁\n\nJava中经常用到的锁有:\n\n+ synchronized\n+ Lock\n","source":"_posts/AndroidMultipeThreadProgramIntermediate.md","raw":"title: Java->Android并发编程筑基篇\ndate: 2016-09-07 16:44:43\ncategories:\n- 实践\ntags:\n- Android\n- Thread\n---\n\n最近有点忙，又有其他的事情，所以一直没有开始写这篇，感觉很惭愧。\n\n上一章讲了太多的东西，其实每一个小细节都可以写成一长篇，这一章会尽量用精简的方式把坑填上。\n\n# Java的线程状态\n\n想要学好并发，还是得知道线程的生命周期，先看一下线程的生命周期：\n\n![线程生命周期](http://abner-nimengbo.cn/images/threadStatus.png)\n\n在线程的运行周期中会有状态与锁有关，所以先要讲解线程的状态，才能继续讲锁。\n\n## sleep\n\nsleep会让当前线程进入\"睡眠\"状态，把执行的机会让给其他线程。\n\n``类似于迅雷下载，当前正在下载N部片子，可同时执行任务数为M(M<N)，暂停当前任务后，正在等待的任务才有机会提前运行，否则只有当前任务结束后，才会开始。``\n\n但是，sleep不会释放锁，如果有同步块、锁之类的，sleep后，别的线程仍然不能访问已经被锁住的数据。\n\n## wait、notify、notifyAll\n\n在使用wait和notify的时候需要用synchronized锁住对象，以此来保证线程安全。\n\n使用wait后，会暂时地将锁释放，使当前线程处于等待状态，从而使别的线程可以访问到资源，唤醒(notify)或者使用了wait(long)线程苏醒后就会重新占用锁，如果使用了interrupte去中断wait，就会抛出**InterruptedException**。\n\n\n需要注意的是，wait、notify、notifyAll，都是属于Object类中的方法，而不是属于Thread，这意味着使用对象的方法，会影响到访问此对象的线程的状态，所以前面提到需要用synchronized保证线程。\n\n## yield\n\n>  Causes the calling Thread to yield execution time to another Thread that\nis ready to run. The actual scheduling is implementation-dependent.\n\n这是官方的注释，调用Thread.yield()方法，只是让线程进入准备运行状态，把CPU资源让给别的线程提前运行。\n\n## join\n\nThread.join()\n看字面意思像是合并，其实从效果上来看更像\"插队\"，b.join，那么a必须等b执行完才能继续往下执行。\n\n# Java中的锁\n\nJava中经常用到的锁有:\n\n+ synchronized\n+ Lock\n","slug":"AndroidMultipeThreadProgramIntermediate","published":1,"updated":"2016-09-08T09:57:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tihr7p00084irr7z6p8ui6","content":"<p>最近有点忙，又有其他的事情，所以一直没有开始写这篇，感觉很惭愧。</p>\n<p>上一章讲了太多的东西，其实每一个小细节都可以写成一长篇，这一章会尽量用精简的方式把坑填上。</p>\n<h1 id=\"Java的线程状态\">Java的线程状态</h1><p>想要学好并发，还是得知道线程的生命周期，先看一下线程的生命周期：</p>\n<p><img src=\"http://abner-nimengbo.cn/images/threadStatus.png\" alt=\"线程生命周期\"></p>\n<p>在线程的运行周期中会有状态与锁有关，所以先要讲解线程的状态，才能继续讲锁。</p>\n<h2 id=\"sleep\">sleep</h2><p>sleep会让当前线程进入”睡眠”状态，把执行的机会让给其他线程。</p>\n<p><code>类似于迅雷下载，当前正在下载N部片子，可同时执行任务数为M(M&lt;N)，暂停当前任务后，正在等待的任务才有机会提前运行，否则只有当前任务结束后，才会开始。</code></p>\n<p>但是，sleep不会释放锁，如果有同步块、锁之类的，sleep后，别的线程仍然不能访问已经被锁住的数据。</p>\n<h2 id=\"wait、notify、notifyAll\">wait、notify、notifyAll</h2><p>在使用wait和notify的时候需要用synchronized锁住对象，以此来保证线程安全。</p>\n<p>使用wait后，会暂时地将锁释放，使当前线程处于等待状态，从而使别的线程可以访问到资源，唤醒(notify)或者使用了wait(long)线程苏醒后就会重新占用锁，如果使用了interrupte去中断wait，就会抛出<strong>InterruptedException</strong>。</p>\n<p>需要注意的是，wait、notify、notifyAll，都是属于Object类中的方法，而不是属于Thread，这意味着使用对象的方法，会影响到访问此对象的线程的状态，所以前面提到需要用synchronized保证线程。</p>\n<h2 id=\"yield\">yield</h2><blockquote>\n<p> Causes the calling Thread to yield execution time to another Thread that<br>is ready to run. The actual scheduling is implementation-dependent.</p>\n</blockquote>\n<p>这是官方的注释，调用Thread.yield()方法，只是让线程进入准备运行状态，把CPU资源让给别的线程提前运行。</p>\n<h2 id=\"join\">join</h2><p>Thread.join()<br>看字面意思像是合并，其实从效果上来看更像”插队”，b.join，那么a必须等b执行完才能继续往下执行。</p>\n<h1 id=\"Java中的锁\">Java中的锁</h1><p>Java中经常用到的锁有:</p>\n<ul>\n<li>synchronized</li>\n<li>Lock</li>\n</ul>\n","excerpt":"","more":"<p>最近有点忙，又有其他的事情，所以一直没有开始写这篇，感觉很惭愧。</p>\n<p>上一章讲了太多的东西，其实每一个小细节都可以写成一长篇，这一章会尽量用精简的方式把坑填上。</p>\n<h1 id=\"Java的线程状态\">Java的线程状态</h1><p>想要学好并发，还是得知道线程的生命周期，先看一下线程的生命周期：</p>\n<p><img src=\"http://abner-nimengbo.cn/images/threadStatus.png\" alt=\"线程生命周期\"></p>\n<p>在线程的运行周期中会有状态与锁有关，所以先要讲解线程的状态，才能继续讲锁。</p>\n<h2 id=\"sleep\">sleep</h2><p>sleep会让当前线程进入”睡眠”状态，把执行的机会让给其他线程。</p>\n<p><code>类似于迅雷下载，当前正在下载N部片子，可同时执行任务数为M(M&lt;N)，暂停当前任务后，正在等待的任务才有机会提前运行，否则只有当前任务结束后，才会开始。</code></p>\n<p>但是，sleep不会释放锁，如果有同步块、锁之类的，sleep后，别的线程仍然不能访问已经被锁住的数据。</p>\n<h2 id=\"wait、notify、notifyAll\">wait、notify、notifyAll</h2><p>在使用wait和notify的时候需要用synchronized锁住对象，以此来保证线程安全。</p>\n<p>使用wait后，会暂时地将锁释放，使当前线程处于等待状态，从而使别的线程可以访问到资源，唤醒(notify)或者使用了wait(long)线程苏醒后就会重新占用锁，如果使用了interrupte去中断wait，就会抛出<strong>InterruptedException</strong>。</p>\n<p>需要注意的是，wait、notify、notifyAll，都是属于Object类中的方法，而不是属于Thread，这意味着使用对象的方法，会影响到访问此对象的线程的状态，所以前面提到需要用synchronized保证线程。</p>\n<h2 id=\"yield\">yield</h2><blockquote>\n<p> Causes the calling Thread to yield execution time to another Thread that<br>is ready to run. The actual scheduling is implementation-dependent.</p>\n</blockquote>\n<p>这是官方的注释，调用Thread.yield()方法，只是让线程进入准备运行状态，把CPU资源让给别的线程提前运行。</p>\n<h2 id=\"join\">join</h2><p>Thread.join()<br>看字面意思像是合并，其实从效果上来看更像”插队”，b.join，那么a必须等b执行完才能继续往下执行。</p>\n<h1 id=\"Java中的锁\">Java中的锁</h1><p>Java中经常用到的锁有:</p>\n<ul>\n<li>synchronized</li>\n<li>Lock</li>\n</ul>\n"},{"title":"Android入前端坑之初试ReactNative","date":"2016-11-22T02:35:35.000Z","_content":"\n\n\n跨平台在当今的趋势下越来越热，出现了许多跨平台方案，而ReactNative只是其中一种，作为一名Android开发，自然也需要对这种技术做一些尝试。\n但是，本人对于前端是0基础，也没写过CSS，JS等相关东西。\n\n以下观点纯是本人瞎扯。\n\n# 准备工作\n\n## 关于JS语法\n\n基础JS语法：[w3school](http://www.w3schools.com/)\n\nJS里每年都有许多新东西，现在大家都用ES6写RN，喏：[ES6入门](http://es6.ruanyifeng.com/)\n\n准备工作都可以做好久了，笔者也是硬着头皮上的，写着写着就习惯了。\n\n## 开始学习ReactNative\n\n看别人的文章不如直接看官网，官网真的很完善，还有示例demo可以直接看。\n如果有同学觉得直接看英语吃力，可以对着国内的中文翻译文档对比着看。当然优先级还是以官方文档为主，因为官方文档更新的比较及时，翻译会滞后。\n\n[官方文档](https://facebook.github.io/react-native/)\n\n[中文翻译文档](http://reactnative.cn/)\n\n## 关于idea或编辑器\n\natom、sublime、webstorm，都可以目前我自己用webstorm，工具只是为了提高自己的效率，因为习惯了JetBrans系列，没有别的意思~\n\n## 从Android到RN的转化过程\n\n其实说从Android到RN，不如说是从Java到JS+JSX的思想转化过程。\n\nJS写起来并没有像java那么长，那么啰嗦，也没有那么严谨，写起来特别随意，可能这是JS的魅力，让Javaer一开始特别不适应。\n\n你不必受限于那么多条条框框，但是你去网上一搜会发现好多开源组件，简直眼花缭乱。\n\n近两年Android在github上变得越来越活跃，但是比起JS，还是落后了一大截。\n\n## 怎么上手写ReactNative\n\n其实最好的实践便是项目。我在上手做的时候，也是用别人搭建好的脚手架直接开发业务，对于新手来说，一上来就那么多组件，是多么懵逼。。\nredux、immutable，光看都不怎么能看得懂了，写几次有助于理解。\n所以应该先用最简单的react-native自带的先写熟悉一下流程，再去找优秀的框架去解决问题。\n\n每个开源组件之所以被开发出来肯定是用来解决某个问题的，所以找到适用于自己的需求就好了。\n\n# 总结\n\n对于客户端来说，其实实现思路都是类似的，但是某些地方还是需要引用**native module**，RN的组件优化方面还是没有纯native好，而某些sdk也没有提供RN的，必须用native解决。\n\n对于某些效果，Android和iOS还是有差异的，可能在Android上的支持并没有iOS那么好。\n\n也并不是说Android没前途，大家转方向去了。对于优秀的人来说，深入学习总能收获更多，从是浮于表层搬砖就算搬了3-4年和2年左右的人也没什么区别。对技术抱有敬畏之心，在闲暇之余多接触一些新东西总能受到启发。\n","source":"_posts/AndroidToRN1.md","raw":"title: Android入前端坑之初试ReactNative\n\ndate: 2016-11-22 10:35:35\ncategories:\n- 实践\ntags:\n- Android\n- ReactNative\n---\n\n\n\n跨平台在当今的趋势下越来越热，出现了许多跨平台方案，而ReactNative只是其中一种，作为一名Android开发，自然也需要对这种技术做一些尝试。\n但是，本人对于前端是0基础，也没写过CSS，JS等相关东西。\n\n以下观点纯是本人瞎扯。\n\n# 准备工作\n\n## 关于JS语法\n\n基础JS语法：[w3school](http://www.w3schools.com/)\n\nJS里每年都有许多新东西，现在大家都用ES6写RN，喏：[ES6入门](http://es6.ruanyifeng.com/)\n\n准备工作都可以做好久了，笔者也是硬着头皮上的，写着写着就习惯了。\n\n## 开始学习ReactNative\n\n看别人的文章不如直接看官网，官网真的很完善，还有示例demo可以直接看。\n如果有同学觉得直接看英语吃力，可以对着国内的中文翻译文档对比着看。当然优先级还是以官方文档为主，因为官方文档更新的比较及时，翻译会滞后。\n\n[官方文档](https://facebook.github.io/react-native/)\n\n[中文翻译文档](http://reactnative.cn/)\n\n## 关于idea或编辑器\n\natom、sublime、webstorm，都可以目前我自己用webstorm，工具只是为了提高自己的效率，因为习惯了JetBrans系列，没有别的意思~\n\n## 从Android到RN的转化过程\n\n其实说从Android到RN，不如说是从Java到JS+JSX的思想转化过程。\n\nJS写起来并没有像java那么长，那么啰嗦，也没有那么严谨，写起来特别随意，可能这是JS的魅力，让Javaer一开始特别不适应。\n\n你不必受限于那么多条条框框，但是你去网上一搜会发现好多开源组件，简直眼花缭乱。\n\n近两年Android在github上变得越来越活跃，但是比起JS，还是落后了一大截。\n\n## 怎么上手写ReactNative\n\n其实最好的实践便是项目。我在上手做的时候，也是用别人搭建好的脚手架直接开发业务，对于新手来说，一上来就那么多组件，是多么懵逼。。\nredux、immutable，光看都不怎么能看得懂了，写几次有助于理解。\n所以应该先用最简单的react-native自带的先写熟悉一下流程，再去找优秀的框架去解决问题。\n\n每个开源组件之所以被开发出来肯定是用来解决某个问题的，所以找到适用于自己的需求就好了。\n\n# 总结\n\n对于客户端来说，其实实现思路都是类似的，但是某些地方还是需要引用**native module**，RN的组件优化方面还是没有纯native好，而某些sdk也没有提供RN的，必须用native解决。\n\n对于某些效果，Android和iOS还是有差异的，可能在Android上的支持并没有iOS那么好。\n\n也并不是说Android没前途，大家转方向去了。对于优秀的人来说，深入学习总能收获更多，从是浮于表层搬砖就算搬了3-4年和2年左右的人也没什么区别。对技术抱有敬畏之心，在闲暇之余多接触一些新东西总能受到启发。\n","slug":"AndroidToRN1","published":1,"updated":"2016-11-22T05:29:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tihr7p00094irr64xs2690","content":"<p>跨平台在当今的趋势下越来越热，出现了许多跨平台方案，而ReactNative只是其中一种，作为一名Android开发，自然也需要对这种技术做一些尝试。<br>但是，本人对于前端是0基础，也没写过CSS，JS等相关东西。</p>\n<p>以下观点纯是本人瞎扯。</p>\n<h1 id=\"准备工作\">准备工作</h1><h2 id=\"关于JS语法\">关于JS语法</h2><p>基础JS语法：<a href=\"http://www.w3schools.com/\" target=\"_blank\" rel=\"external\">w3school</a></p>\n<p>JS里每年都有许多新东西，现在大家都用ES6写RN，喏：<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">ES6入门</a></p>\n<p>准备工作都可以做好久了，笔者也是硬着头皮上的，写着写着就习惯了。</p>\n<h2 id=\"开始学习ReactNative\">开始学习ReactNative</h2><p>看别人的文章不如直接看官网，官网真的很完善，还有示例demo可以直接看。<br>如果有同学觉得直接看英语吃力，可以对着国内的中文翻译文档对比着看。当然优先级还是以官方文档为主，因为官方文档更新的比较及时，翻译会滞后。</p>\n<p><a href=\"https://facebook.github.io/react-native/\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<p><a href=\"http://reactnative.cn/\" target=\"_blank\" rel=\"external\">中文翻译文档</a></p>\n<h2 id=\"关于idea或编辑器\">关于idea或编辑器</h2><p>atom、sublime、webstorm，都可以目前我自己用webstorm，工具只是为了提高自己的效率，因为习惯了JetBrans系列，没有别的意思~</p>\n<h2 id=\"从Android到RN的转化过程\">从Android到RN的转化过程</h2><p>其实说从Android到RN，不如说是从Java到JS+JSX的思想转化过程。</p>\n<p>JS写起来并没有像java那么长，那么啰嗦，也没有那么严谨，写起来特别随意，可能这是JS的魅力，让Javaer一开始特别不适应。</p>\n<p>你不必受限于那么多条条框框，但是你去网上一搜会发现好多开源组件，简直眼花缭乱。</p>\n<p>近两年Android在github上变得越来越活跃，但是比起JS，还是落后了一大截。</p>\n<h2 id=\"怎么上手写ReactNative\">怎么上手写ReactNative</h2><p>其实最好的实践便是项目。我在上手做的时候，也是用别人搭建好的脚手架直接开发业务，对于新手来说，一上来就那么多组件，是多么懵逼。。<br>redux、immutable，光看都不怎么能看得懂了，写几次有助于理解。<br>所以应该先用最简单的react-native自带的先写熟悉一下流程，再去找优秀的框架去解决问题。</p>\n<p>每个开源组件之所以被开发出来肯定是用来解决某个问题的，所以找到适用于自己的需求就好了。</p>\n<h1 id=\"总结\">总结</h1><p>对于客户端来说，其实实现思路都是类似的，但是某些地方还是需要引用<strong>native module</strong>，RN的组件优化方面还是没有纯native好，而某些sdk也没有提供RN的，必须用native解决。</p>\n<p>对于某些效果，Android和iOS还是有差异的，可能在Android上的支持并没有iOS那么好。</p>\n<p>也并不是说Android没前途，大家转方向去了。对于优秀的人来说，深入学习总能收获更多，从是浮于表层搬砖就算搬了3-4年和2年左右的人也没什么区别。对技术抱有敬畏之心，在闲暇之余多接触一些新东西总能受到启发。</p>\n","excerpt":"","more":"<p>跨平台在当今的趋势下越来越热，出现了许多跨平台方案，而ReactNative只是其中一种，作为一名Android开发，自然也需要对这种技术做一些尝试。<br>但是，本人对于前端是0基础，也没写过CSS，JS等相关东西。</p>\n<p>以下观点纯是本人瞎扯。</p>\n<h1 id=\"准备工作\">准备工作</h1><h2 id=\"关于JS语法\">关于JS语法</h2><p>基础JS语法：<a href=\"http://www.w3schools.com/\">w3school</a></p>\n<p>JS里每年都有许多新东西，现在大家都用ES6写RN，喏：<a href=\"http://es6.ruanyifeng.com/\">ES6入门</a></p>\n<p>准备工作都可以做好久了，笔者也是硬着头皮上的，写着写着就习惯了。</p>\n<h2 id=\"开始学习ReactNative\">开始学习ReactNative</h2><p>看别人的文章不如直接看官网，官网真的很完善，还有示例demo可以直接看。<br>如果有同学觉得直接看英语吃力，可以对着国内的中文翻译文档对比着看。当然优先级还是以官方文档为主，因为官方文档更新的比较及时，翻译会滞后。</p>\n<p><a href=\"https://facebook.github.io/react-native/\">官方文档</a></p>\n<p><a href=\"http://reactnative.cn/\">中文翻译文档</a></p>\n<h2 id=\"关于idea或编辑器\">关于idea或编辑器</h2><p>atom、sublime、webstorm，都可以目前我自己用webstorm，工具只是为了提高自己的效率，因为习惯了JetBrans系列，没有别的意思~</p>\n<h2 id=\"从Android到RN的转化过程\">从Android到RN的转化过程</h2><p>其实说从Android到RN，不如说是从Java到JS+JSX的思想转化过程。</p>\n<p>JS写起来并没有像java那么长，那么啰嗦，也没有那么严谨，写起来特别随意，可能这是JS的魅力，让Javaer一开始特别不适应。</p>\n<p>你不必受限于那么多条条框框，但是你去网上一搜会发现好多开源组件，简直眼花缭乱。</p>\n<p>近两年Android在github上变得越来越活跃，但是比起JS，还是落后了一大截。</p>\n<h2 id=\"怎么上手写ReactNative\">怎么上手写ReactNative</h2><p>其实最好的实践便是项目。我在上手做的时候，也是用别人搭建好的脚手架直接开发业务，对于新手来说，一上来就那么多组件，是多么懵逼。。<br>redux、immutable，光看都不怎么能看得懂了，写几次有助于理解。<br>所以应该先用最简单的react-native自带的先写熟悉一下流程，再去找优秀的框架去解决问题。</p>\n<p>每个开源组件之所以被开发出来肯定是用来解决某个问题的，所以找到适用于自己的需求就好了。</p>\n<h1 id=\"总结\">总结</h1><p>对于客户端来说，其实实现思路都是类似的，但是某些地方还是需要引用<strong>native module</strong>，RN的组件优化方面还是没有纯native好，而某些sdk也没有提供RN的，必须用native解决。</p>\n<p>对于某些效果，Android和iOS还是有差异的，可能在Android上的支持并没有iOS那么好。</p>\n<p>也并不是说Android没前途，大家转方向去了。对于优秀的人来说，深入学习总能收获更多，从是浮于表层搬砖就算搬了3-4年和2年左右的人也没什么区别。对技术抱有敬畏之心，在闲暇之余多接触一些新东西总能受到启发。</p>\n"},{"title":"从零创建项目实践","date":"2016-06-15T06:26:04.000Z","_content":"# 背景\n\n[大帅MarkZhai](http://blog.zhaiyifan.cn)的从零系列火遍大江南北，奈何大帅最近要做爸爸了，忙得没有时间出demo，文章中一些细节部分没有上代码，一些粉丝肯定看的不知所措，所以做小弟的就替大哥为大家整理了个demo。接下来会结合大帅的理论为大家讲述一下如何实践，在本文的最后会附上Demo地址。\n\n# 关于本实践的说明\n\n本实践是为了方便，调用github的api，抓取了我们moduth组的repo\n\n\n# 热身运动\n\n先要补充一点知识的细节才能更加好跟上司机的车\n\n## 整体结构\n\n参考：[从零开始的Android新项目1 - 架构搭建篇](http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p1/)\n\n还是直接看IDEA比较直接吧，SDK中就是放一些library的地方。在实际项目中，我们确实做到了“避免为了模式而模式所导致的开发压力”，用了MVPVM，也不是所有的地方都有些P，只在复杂的地方用P层去做解耦。\n\n![项目结构](http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160615-0.png)\n\n## Gradle篇\n\n\n参考：[从零开始的Android新项目2 - Gradle篇](http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p2/)\n因为Gradle依赖在这篇已经写的很详细，大家可以在demo中细看。\n\n## MVPVM\nModel：\n在domain->model->repos->ReposEntity\n这就是接口返回格式的Entity，用GsonFormat直接生成。\n\nView：\n因为获取的是个列表，所以这里的view就是Activity、RecyclerView，通过Presenter和ViewModel通信。\n\nPresenter：\n在app->presenter->ReposListPresenter\n项目中的Presenter使用了泛型，关于这个可以看一下\nhttp://hannesdorfmann.com/android/mosby\n\nViewModel：\n在app->model>ReposModel，用于view需要显示的一些properties,至于从Entity -> ViewModel ，这里单独创建了一个类，用于映射：\n![Mapper](http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160617-0.png)\n这里用到了Dagger的一些东西，后面会介绍到。\nViewModel和View的显示数据交给了DataBinding，有条件的同学可以看看[官方Databinding视频](https://www.youtube.com/watch?v=DAmMN7m3wLU)，\n\n有些比较简单的业务不需要都创建Presenter，反而把简单的东西写复杂了。\n\n# 项目实践\n\n## Dagger\n为什么要在项目实践的一开始讲Dagger呢，因为贯穿整个项目的就是Dagger了，如果Dagger不懂的话，那么你会发现接下来看起来就很难受，当然Dagger的门槛是有的，但是程序员就应该迎刃而上。\n\n简单的说一下：你可以把Dagger理解成，你不需要手动去调用构造函数，如果你在别的地方生成过一些构造函数需要的参数，那么你就直接使用@Inject就可以了。当然实际上依赖注入这个概念就是比较抽象的，如果大家实在是搞不懂Dagger，可以把项目中的Dagger去掉。这并不影响项目结构。\n\n## Repository层\n\n大部分App都需要去服务器获取数据，关于网络这块，我们用的是Retrofit+Rxjava，至于如何使用网上文章很多，就不在这里一一赘述了，而Repository层就是为了隐藏数据是从网络取还是数据库取，只要你伸手要，那我就给你便是了，你不需要关心数据哪里来。在demo中只做了对网络的获取，domain中的Repository实际上是一个interface。\n![ReposRepository](http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160617-1.png)\n真正的实现在data层的repository，是一个单例：\n![ReposDataRepository](http://7xvy2g.com1.z0.glb.clouddn.com/Image%202016-06-17%20at%2018.49.47.png)\n因为是Github接口原因，没有在return的时候再加一层，其实是应该再加一层统一解析的处理：\n```java\n\n@Override\npublic Observable<YourResponse> getReposList(String user) {\n    return RepositoryUtils.\n    extractData(mReposApi.login(user),\n    YourResponse.class);\n}\n\n```\n至于RepositoryUtils的代码：\n![RepositoryUtils](http://7xvy2g.com1.z0.glb.clouddn.com/Image%202016-06-17%20at%2018.54.22.png)\n为了能在解析的时候处理是否成功的字段，或者需要抛出自己的Exception。\n\n## Interactor\n\n咦，这是啥？是不是之前看大帅的文章中没提到，哈哈哈哈，他太忙了，就漏掉了。在这里多了一层interactor，主要是Rxjava的subscriber订阅，subscribeOn以及observerOn需要分配线程，都在这一层统一封装了。\n![UseCase](http://7xvy2g.com1.z0.glb.clouddn.com/Image%202016-06-17%20at%2019.10.49.png)\n这里泛型传入的就是解析需要返回的类型，子类可以设置参数调用\n![GetRepo](http://7xvy2g.com1.z0.glb.clouddn.com/Image%202016-06-17%20at%2019.12.56.png)\n这个interactor是由Presenter去调用的不需要关心repository的具体实现，只需要调用这个就可以了，达到了解耦的目的。\n\n## Presenter\n\n控制和View交互，处理一些监听，具体的实现要看业务需求了。\n![Presenter](http://7xvy2g.com1.z0.glb.clouddn.com/Image%202016-06-17%20at%2019.59.45.png)\n\ninitialize方法是被Activity、Fragment调用，用于获取数据。\n这里的detachView当Activity或Fragment调用onDestory的时候 而被调用。getView.userList，则是在View层复写，用来通知view我拿到数据了，之类的操作。\n\n## ViewDataBinding\n\n关于这个章节，我就先放一下，因为准备放在下一篇文章中细讲。\n因为Databinding会有很多部分替代了Presenter。\n\n## Component\n\nComponent是Dagger中的组件，全局会有一个ApplicationComponent，在这里提供了全局的一些设置，以及所有Repository，至于这些是如何提供的，则写在了Module中。在这里举例一下ApplicationComponent\n![ApplicationComponent](http://7xvy2g.com1.z0.glb.clouddn.com/application_component.png)\n\n\n![ApplicationModule](http://7xvy2g.com1.z0.glb.clouddn.com/application_module.png)\n\n然后会有一些业务的Component，全局都dependencies ApplicationComponent，在业务Component下，会声明哪些Activity或者Fragment去Inject，并在Module里写一些需要用到的东西，比如UseCase等。\n\n# 结语\n\n其实概念性的东西太多，所以可能不是很好理解，需要同学们动手去试一试，用过了才知道好不好，而且每个人的理念和观点也不同，总会有争议，所以还是得理解思想，而不是照搬，希望大家能通过本文可以更好的理解这个结构。\n\n讲了这么多东西，肯定会有些同学一脸懵逼的，这不怪你们，是我写的不太好=。=！所以附上Demo地址：[Demo](https://github.com/moduth/PetLoverAndroid)\n\n最近大帅的开了个QQ实践群（568863373），欢迎大家一起讨论，也可以关注我们的公众号：`魔都三帅`\n\n![公众号](http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg)\n","source":"_posts/AndroidProjectFromZero.md","raw":"title: 从零创建项目实践\ndate: 2016-06-15 14:26:04\ncategories:\n- 工作经验\ntags:\n- Android\n- 实践\n---\n# 背景\n\n[大帅MarkZhai](http://blog.zhaiyifan.cn)的从零系列火遍大江南北，奈何大帅最近要做爸爸了，忙得没有时间出demo，文章中一些细节部分没有上代码，一些粉丝肯定看的不知所措，所以做小弟的就替大哥为大家整理了个demo。接下来会结合大帅的理论为大家讲述一下如何实践，在本文的最后会附上Demo地址。\n\n# 关于本实践的说明\n\n本实践是为了方便，调用github的api，抓取了我们moduth组的repo\n\n\n# 热身运动\n\n先要补充一点知识的细节才能更加好跟上司机的车\n\n## 整体结构\n\n参考：[从零开始的Android新项目1 - 架构搭建篇](http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p1/)\n\n还是直接看IDEA比较直接吧，SDK中就是放一些library的地方。在实际项目中，我们确实做到了“避免为了模式而模式所导致的开发压力”，用了MVPVM，也不是所有的地方都有些P，只在复杂的地方用P层去做解耦。\n\n![项目结构](http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160615-0.png)\n\n## Gradle篇\n\n\n参考：[从零开始的Android新项目2 - Gradle篇](http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p2/)\n因为Gradle依赖在这篇已经写的很详细，大家可以在demo中细看。\n\n## MVPVM\nModel：\n在domain->model->repos->ReposEntity\n这就是接口返回格式的Entity，用GsonFormat直接生成。\n\nView：\n因为获取的是个列表，所以这里的view就是Activity、RecyclerView，通过Presenter和ViewModel通信。\n\nPresenter：\n在app->presenter->ReposListPresenter\n项目中的Presenter使用了泛型，关于这个可以看一下\nhttp://hannesdorfmann.com/android/mosby\n\nViewModel：\n在app->model>ReposModel，用于view需要显示的一些properties,至于从Entity -> ViewModel ，这里单独创建了一个类，用于映射：\n![Mapper](http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160617-0.png)\n这里用到了Dagger的一些东西，后面会介绍到。\nViewModel和View的显示数据交给了DataBinding，有条件的同学可以看看[官方Databinding视频](https://www.youtube.com/watch?v=DAmMN7m3wLU)，\n\n有些比较简单的业务不需要都创建Presenter，反而把简单的东西写复杂了。\n\n# 项目实践\n\n## Dagger\n为什么要在项目实践的一开始讲Dagger呢，因为贯穿整个项目的就是Dagger了，如果Dagger不懂的话，那么你会发现接下来看起来就很难受，当然Dagger的门槛是有的，但是程序员就应该迎刃而上。\n\n简单的说一下：你可以把Dagger理解成，你不需要手动去调用构造函数，如果你在别的地方生成过一些构造函数需要的参数，那么你就直接使用@Inject就可以了。当然实际上依赖注入这个概念就是比较抽象的，如果大家实在是搞不懂Dagger，可以把项目中的Dagger去掉。这并不影响项目结构。\n\n## Repository层\n\n大部分App都需要去服务器获取数据，关于网络这块，我们用的是Retrofit+Rxjava，至于如何使用网上文章很多，就不在这里一一赘述了，而Repository层就是为了隐藏数据是从网络取还是数据库取，只要你伸手要，那我就给你便是了，你不需要关心数据哪里来。在demo中只做了对网络的获取，domain中的Repository实际上是一个interface。\n![ReposRepository](http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160617-1.png)\n真正的实现在data层的repository，是一个单例：\n![ReposDataRepository](http://7xvy2g.com1.z0.glb.clouddn.com/Image%202016-06-17%20at%2018.49.47.png)\n因为是Github接口原因，没有在return的时候再加一层，其实是应该再加一层统一解析的处理：\n```java\n\n@Override\npublic Observable<YourResponse> getReposList(String user) {\n    return RepositoryUtils.\n    extractData(mReposApi.login(user),\n    YourResponse.class);\n}\n\n```\n至于RepositoryUtils的代码：\n![RepositoryUtils](http://7xvy2g.com1.z0.glb.clouddn.com/Image%202016-06-17%20at%2018.54.22.png)\n为了能在解析的时候处理是否成功的字段，或者需要抛出自己的Exception。\n\n## Interactor\n\n咦，这是啥？是不是之前看大帅的文章中没提到，哈哈哈哈，他太忙了，就漏掉了。在这里多了一层interactor，主要是Rxjava的subscriber订阅，subscribeOn以及observerOn需要分配线程，都在这一层统一封装了。\n![UseCase](http://7xvy2g.com1.z0.glb.clouddn.com/Image%202016-06-17%20at%2019.10.49.png)\n这里泛型传入的就是解析需要返回的类型，子类可以设置参数调用\n![GetRepo](http://7xvy2g.com1.z0.glb.clouddn.com/Image%202016-06-17%20at%2019.12.56.png)\n这个interactor是由Presenter去调用的不需要关心repository的具体实现，只需要调用这个就可以了，达到了解耦的目的。\n\n## Presenter\n\n控制和View交互，处理一些监听，具体的实现要看业务需求了。\n![Presenter](http://7xvy2g.com1.z0.glb.clouddn.com/Image%202016-06-17%20at%2019.59.45.png)\n\ninitialize方法是被Activity、Fragment调用，用于获取数据。\n这里的detachView当Activity或Fragment调用onDestory的时候 而被调用。getView.userList，则是在View层复写，用来通知view我拿到数据了，之类的操作。\n\n## ViewDataBinding\n\n关于这个章节，我就先放一下，因为准备放在下一篇文章中细讲。\n因为Databinding会有很多部分替代了Presenter。\n\n## Component\n\nComponent是Dagger中的组件，全局会有一个ApplicationComponent，在这里提供了全局的一些设置，以及所有Repository，至于这些是如何提供的，则写在了Module中。在这里举例一下ApplicationComponent\n![ApplicationComponent](http://7xvy2g.com1.z0.glb.clouddn.com/application_component.png)\n\n\n![ApplicationModule](http://7xvy2g.com1.z0.glb.clouddn.com/application_module.png)\n\n然后会有一些业务的Component，全局都dependencies ApplicationComponent，在业务Component下，会声明哪些Activity或者Fragment去Inject，并在Module里写一些需要用到的东西，比如UseCase等。\n\n# 结语\n\n其实概念性的东西太多，所以可能不是很好理解，需要同学们动手去试一试，用过了才知道好不好，而且每个人的理念和观点也不同，总会有争议，所以还是得理解思想，而不是照搬，希望大家能通过本文可以更好的理解这个结构。\n\n讲了这么多东西，肯定会有些同学一脸懵逼的，这不怪你们，是我写的不太好=。=！所以附上Demo地址：[Demo](https://github.com/moduth/PetLoverAndroid)\n\n最近大帅的开了个QQ实践群（568863373），欢迎大家一起讨论，也可以关注我们的公众号：`魔都三帅`\n\n![公众号](http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg)\n","slug":"AndroidProjectFromZero","published":1,"updated":"2016-07-21T05:52:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tihr7r000c4irrarulrm35","content":"<h1 id=\"背景\">背景</h1><p><a href=\"http://blog.zhaiyifan.cn\" target=\"_blank\" rel=\"external\">大帅MarkZhai</a>的从零系列火遍大江南北，奈何大帅最近要做爸爸了，忙得没有时间出demo，文章中一些细节部分没有上代码，一些粉丝肯定看的不知所措，所以做小弟的就替大哥为大家整理了个demo。接下来会结合大帅的理论为大家讲述一下如何实践，在本文的最后会附上Demo地址。</p>\n<h1 id=\"关于本实践的说明\">关于本实践的说明</h1><p>本实践是为了方便，调用github的api，抓取了我们moduth组的repo</p>\n<h1 id=\"热身运动\">热身运动</h1><p>先要补充一点知识的细节才能更加好跟上司机的车</p>\n<h2 id=\"整体结构\">整体结构</h2><p>参考：<a href=\"http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p1/\" target=\"_blank\" rel=\"external\">从零开始的Android新项目1 - 架构搭建篇</a></p>\n<p>还是直接看IDEA比较直接吧，SDK中就是放一些library的地方。在实际项目中，我们确实做到了“避免为了模式而模式所导致的开发压力”，用了MVPVM，也不是所有的地方都有些P，只在复杂的地方用P层去做解耦。</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160615-0.png\" alt=\"项目结构\"></p>\n<h2 id=\"Gradle篇\">Gradle篇</h2><p>参考：<a href=\"http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p2/\" target=\"_blank\" rel=\"external\">从零开始的Android新项目2 - Gradle篇</a><br>因为Gradle依赖在这篇已经写的很详细，大家可以在demo中细看。</p>\n<h2 id=\"MVPVM\">MVPVM</h2><p>Model：<br>在domain-&gt;model-&gt;repos-&gt;ReposEntity<br>这就是接口返回格式的Entity，用GsonFormat直接生成。</p>\n<p>View：<br>因为获取的是个列表，所以这里的view就是Activity、RecyclerView，通过Presenter和ViewModel通信。</p>\n<p>Presenter：<br>在app-&gt;presenter-&gt;ReposListPresenter<br>项目中的Presenter使用了泛型，关于这个可以看一下<br><a href=\"http://hannesdorfmann.com/android/mosby\" target=\"_blank\" rel=\"external\">http://hannesdorfmann.com/android/mosby</a></p>\n<p>ViewModel：<br>在app-&gt;model&gt;ReposModel，用于view需要显示的一些properties,至于从Entity -&gt; ViewModel ，这里单独创建了一个类，用于映射：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160617-0.png\" alt=\"Mapper\"><br>这里用到了Dagger的一些东西，后面会介绍到。<br>ViewModel和View的显示数据交给了DataBinding，有条件的同学可以看看<a href=\"https://www.youtube.com/watch?v=DAmMN7m3wLU\" target=\"_blank\" rel=\"external\">官方Databinding视频</a>，</p>\n<p>有些比较简单的业务不需要都创建Presenter，反而把简单的东西写复杂了。</p>\n<h1 id=\"项目实践\">项目实践</h1><h2 id=\"Dagger\">Dagger</h2><p>为什么要在项目实践的一开始讲Dagger呢，因为贯穿整个项目的就是Dagger了，如果Dagger不懂的话，那么你会发现接下来看起来就很难受，当然Dagger的门槛是有的，但是程序员就应该迎刃而上。</p>\n<p>简单的说一下：你可以把Dagger理解成，你不需要手动去调用构造函数，如果你在别的地方生成过一些构造函数需要的参数，那么你就直接使用@Inject就可以了。当然实际上依赖注入这个概念就是比较抽象的，如果大家实在是搞不懂Dagger，可以把项目中的Dagger去掉。这并不影响项目结构。</p>\n<h2 id=\"Repository层\">Repository层</h2><p>大部分App都需要去服务器获取数据，关于网络这块，我们用的是Retrofit+Rxjava，至于如何使用网上文章很多，就不在这里一一赘述了，而Repository层就是为了隐藏数据是从网络取还是数据库取，只要你伸手要，那我就给你便是了，你不需要关心数据哪里来。在demo中只做了对网络的获取，domain中的Repository实际上是一个interface。<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160617-1.png\" alt=\"ReposRepository\"><br>真正的实现在data层的repository，是一个单例：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/Image%202016-06-17%20at%2018.49.47.png\" alt=\"ReposDataRepository\"><br>因为是Github接口原因，没有在return的时候再加一层，其实是应该再加一层统一解析的处理：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;YourResponse&gt; <span class=\"title\">getReposList</span><span class=\"params\">(String user)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> RepositoryUtils.</div><div class=\"line\">    extractData(mReposApi.login(user),</div><div class=\"line\">    YourResponse.class);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>至于RepositoryUtils的代码：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/Image%202016-06-17%20at%2018.54.22.png\" alt=\"RepositoryUtils\"><br>为了能在解析的时候处理是否成功的字段，或者需要抛出自己的Exception。</p>\n<h2 id=\"Interactor\">Interactor</h2><p>咦，这是啥？是不是之前看大帅的文章中没提到，哈哈哈哈，他太忙了，就漏掉了。在这里多了一层interactor，主要是Rxjava的subscriber订阅，subscribeOn以及observerOn需要分配线程，都在这一层统一封装了。<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/Image%202016-06-17%20at%2019.10.49.png\" alt=\"UseCase\"><br>这里泛型传入的就是解析需要返回的类型，子类可以设置参数调用<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/Image%202016-06-17%20at%2019.12.56.png\" alt=\"GetRepo\"><br>这个interactor是由Presenter去调用的不需要关心repository的具体实现，只需要调用这个就可以了，达到了解耦的目的。</p>\n<h2 id=\"Presenter\">Presenter</h2><p>控制和View交互，处理一些监听，具体的实现要看业务需求了。<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/Image%202016-06-17%20at%2019.59.45.png\" alt=\"Presenter\"></p>\n<p>initialize方法是被Activity、Fragment调用，用于获取数据。<br>这里的detachView当Activity或Fragment调用onDestory的时候 而被调用。getView.userList，则是在View层复写，用来通知view我拿到数据了，之类的操作。</p>\n<h2 id=\"ViewDataBinding\">ViewDataBinding</h2><p>关于这个章节，我就先放一下，因为准备放在下一篇文章中细讲。<br>因为Databinding会有很多部分替代了Presenter。</p>\n<h2 id=\"Component\">Component</h2><p>Component是Dagger中的组件，全局会有一个ApplicationComponent，在这里提供了全局的一些设置，以及所有Repository，至于这些是如何提供的，则写在了Module中。在这里举例一下ApplicationComponent<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/application_component.png\" alt=\"ApplicationComponent\"></p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/application_module.png\" alt=\"ApplicationModule\"></p>\n<p>然后会有一些业务的Component，全局都dependencies ApplicationComponent，在业务Component下，会声明哪些Activity或者Fragment去Inject，并在Module里写一些需要用到的东西，比如UseCase等。</p>\n<h1 id=\"结语\">结语</h1><p>其实概念性的东西太多，所以可能不是很好理解，需要同学们动手去试一试，用过了才知道好不好，而且每个人的理念和观点也不同，总会有争议，所以还是得理解思想，而不是照搬，希望大家能通过本文可以更好的理解这个结构。</p>\n<p>讲了这么多东西，肯定会有些同学一脸懵逼的，这不怪你们，是我写的不太好=。=！所以附上Demo地址：<a href=\"https://github.com/moduth/PetLoverAndroid\" target=\"_blank\" rel=\"external\">Demo</a></p>\n<p>最近大帅的开了个QQ实践群（568863373），欢迎大家一起讨论，也可以关注我们的公众号：<code>魔都三帅</code></p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg\" alt=\"公众号\"></p>\n","excerpt":"","more":"<h1 id=\"背景\">背景</h1><p><a href=\"http://blog.zhaiyifan.cn\">大帅MarkZhai</a>的从零系列火遍大江南北，奈何大帅最近要做爸爸了，忙得没有时间出demo，文章中一些细节部分没有上代码，一些粉丝肯定看的不知所措，所以做小弟的就替大哥为大家整理了个demo。接下来会结合大帅的理论为大家讲述一下如何实践，在本文的最后会附上Demo地址。</p>\n<h1 id=\"关于本实践的说明\">关于本实践的说明</h1><p>本实践是为了方便，调用github的api，抓取了我们moduth组的repo</p>\n<h1 id=\"热身运动\">热身运动</h1><p>先要补充一点知识的细节才能更加好跟上司机的车</p>\n<h2 id=\"整体结构\">整体结构</h2><p>参考：<a href=\"http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p1/\">从零开始的Android新项目1 - 架构搭建篇</a></p>\n<p>还是直接看IDEA比较直接吧，SDK中就是放一些library的地方。在实际项目中，我们确实做到了“避免为了模式而模式所导致的开发压力”，用了MVPVM，也不是所有的地方都有些P，只在复杂的地方用P层去做解耦。</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160615-0.png\" alt=\"项目结构\"></p>\n<h2 id=\"Gradle篇\">Gradle篇</h2><p>参考：<a href=\"http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p2/\">从零开始的Android新项目2 - Gradle篇</a><br>因为Gradle依赖在这篇已经写的很详细，大家可以在demo中细看。</p>\n<h2 id=\"MVPVM\">MVPVM</h2><p>Model：<br>在domain-&gt;model-&gt;repos-&gt;ReposEntity<br>这就是接口返回格式的Entity，用GsonFormat直接生成。</p>\n<p>View：<br>因为获取的是个列表，所以这里的view就是Activity、RecyclerView，通过Presenter和ViewModel通信。</p>\n<p>Presenter：<br>在app-&gt;presenter-&gt;ReposListPresenter<br>项目中的Presenter使用了泛型，关于这个可以看一下<br><a href=\"http://hannesdorfmann.com/android/mosby\">http://hannesdorfmann.com/android/mosby</a></p>\n<p>ViewModel：<br>在app-&gt;model&gt;ReposModel，用于view需要显示的一些properties,至于从Entity -&gt; ViewModel ，这里单独创建了一个类，用于映射：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160617-0.png\" alt=\"Mapper\"><br>这里用到了Dagger的一些东西，后面会介绍到。<br>ViewModel和View的显示数据交给了DataBinding，有条件的同学可以看看<a href=\"https://www.youtube.com/watch?v=DAmMN7m3wLU\">官方Databinding视频</a>，</p>\n<p>有些比较简单的业务不需要都创建Presenter，反而把简单的东西写复杂了。</p>\n<h1 id=\"项目实践\">项目实践</h1><h2 id=\"Dagger\">Dagger</h2><p>为什么要在项目实践的一开始讲Dagger呢，因为贯穿整个项目的就是Dagger了，如果Dagger不懂的话，那么你会发现接下来看起来就很难受，当然Dagger的门槛是有的，但是程序员就应该迎刃而上。</p>\n<p>简单的说一下：你可以把Dagger理解成，你不需要手动去调用构造函数，如果你在别的地方生成过一些构造函数需要的参数，那么你就直接使用@Inject就可以了。当然实际上依赖注入这个概念就是比较抽象的，如果大家实在是搞不懂Dagger，可以把项目中的Dagger去掉。这并不影响项目结构。</p>\n<h2 id=\"Repository层\">Repository层</h2><p>大部分App都需要去服务器获取数据，关于网络这块，我们用的是Retrofit+Rxjava，至于如何使用网上文章很多，就不在这里一一赘述了，而Repository层就是为了隐藏数据是从网络取还是数据库取，只要你伸手要，那我就给你便是了，你不需要关心数据哪里来。在demo中只做了对网络的获取，domain中的Repository实际上是一个interface。<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160617-1.png\" alt=\"ReposRepository\"><br>真正的实现在data层的repository，是一个单例：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/Image%202016-06-17%20at%2018.49.47.png\" alt=\"ReposDataRepository\"><br>因为是Github接口原因，没有在return的时候再加一层，其实是应该再加一层统一解析的处理：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;YourResponse&gt; <span class=\"title\">getReposList</span><span class=\"params\">(String user)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> RepositoryUtils.</div><div class=\"line\">    extractData(mReposApi.login(user),</div><div class=\"line\">    YourResponse.class);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>至于RepositoryUtils的代码：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/Image%202016-06-17%20at%2018.54.22.png\" alt=\"RepositoryUtils\"><br>为了能在解析的时候处理是否成功的字段，或者需要抛出自己的Exception。</p>\n<h2 id=\"Interactor\">Interactor</h2><p>咦，这是啥？是不是之前看大帅的文章中没提到，哈哈哈哈，他太忙了，就漏掉了。在这里多了一层interactor，主要是Rxjava的subscriber订阅，subscribeOn以及observerOn需要分配线程，都在这一层统一封装了。<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/Image%202016-06-17%20at%2019.10.49.png\" alt=\"UseCase\"><br>这里泛型传入的就是解析需要返回的类型，子类可以设置参数调用<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/Image%202016-06-17%20at%2019.12.56.png\" alt=\"GetRepo\"><br>这个interactor是由Presenter去调用的不需要关心repository的具体实现，只需要调用这个就可以了，达到了解耦的目的。</p>\n<h2 id=\"Presenter\">Presenter</h2><p>控制和View交互，处理一些监听，具体的实现要看业务需求了。<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/Image%202016-06-17%20at%2019.59.45.png\" alt=\"Presenter\"></p>\n<p>initialize方法是被Activity、Fragment调用，用于获取数据。<br>这里的detachView当Activity或Fragment调用onDestory的时候 而被调用。getView.userList，则是在View层复写，用来通知view我拿到数据了，之类的操作。</p>\n<h2 id=\"ViewDataBinding\">ViewDataBinding</h2><p>关于这个章节，我就先放一下，因为准备放在下一篇文章中细讲。<br>因为Databinding会有很多部分替代了Presenter。</p>\n<h2 id=\"Component\">Component</h2><p>Component是Dagger中的组件，全局会有一个ApplicationComponent，在这里提供了全局的一些设置，以及所有Repository，至于这些是如何提供的，则写在了Module中。在这里举例一下ApplicationComponent<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/application_component.png\" alt=\"ApplicationComponent\"></p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/application_module.png\" alt=\"ApplicationModule\"></p>\n<p>然后会有一些业务的Component，全局都dependencies ApplicationComponent，在业务Component下，会声明哪些Activity或者Fragment去Inject，并在Module里写一些需要用到的东西，比如UseCase等。</p>\n<h1 id=\"结语\">结语</h1><p>其实概念性的东西太多，所以可能不是很好理解，需要同学们动手去试一试，用过了才知道好不好，而且每个人的理念和观点也不同，总会有争议，所以还是得理解思想，而不是照搬，希望大家能通过本文可以更好的理解这个结构。</p>\n<p>讲了这么多东西，肯定会有些同学一脸懵逼的，这不怪你们，是我写的不太好=。=！所以附上Demo地址：<a href=\"https://github.com/moduth/PetLoverAndroid\">Demo</a></p>\n<p>最近大帅的开了个QQ实践群（568863373），欢迎大家一起讨论，也可以关注我们的公众号：<code>魔都三帅</code></p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg\" alt=\"公众号\"></p>\n"},{"title":"组件化之页面跳转设计","date":"2016-11-22T05:30:37.000Z","_content":"\n当项目做了组件化之后，每个module都是可以独立作为application，那么怎么跳转到别的module页面呢？是否需要关心别人的页面叫什么呢？是否需要因为别人的页面改动而影响呢？\n\n答案是NO。\n\n那么我接下来要说的方案是deeplink，也就是Android提供的scheme跳转。\n\n## 为什么要选择deeplink\n\n`http://example.com/deepLink/{id}/{name}`比如这种形式根据两边定好的协议，能直接跳转、获取参数，而不需要关心对方的页面，就算页面改了类名、包名，只要scheme配置没改，那么都不需要担心。\n做到了解耦的特性。解耦也是组件化的最关键的一步。\n\n## 用什么方式去实现deeplink\n\n### 自己维护一个navigator\n\n全局维护一个navigator，每次有需要跳转的页面，就register进去。\n\n### 使用注解方式\n\n使用**annotation**，在每个界面上方注册deeplink的参数和规范。\n\n使用apt，生成每个module(根据module包名)自己的分发deeplink的类。\n\nairbnb的deeplinkDispatch就做的很好  [deeplinkDispatch](https://github.com/airbnb/DeepLinkDispatch)\n\n。。突然没心情写源码解析了。以后有空再补上。\n","source":"_posts/componetizationForPage.md","raw":"title: 组件化之页面跳转设计\ndate: 2016-11-22 13:30:37\ncategories:\n- 实践\ntags:\n- Android\n- 组件化\n---\n\n当项目做了组件化之后，每个module都是可以独立作为application，那么怎么跳转到别的module页面呢？是否需要关心别人的页面叫什么呢？是否需要因为别人的页面改动而影响呢？\n\n答案是NO。\n\n那么我接下来要说的方案是deeplink，也就是Android提供的scheme跳转。\n\n## 为什么要选择deeplink\n\n`http://example.com/deepLink/{id}/{name}`比如这种形式根据两边定好的协议，能直接跳转、获取参数，而不需要关心对方的页面，就算页面改了类名、包名，只要scheme配置没改，那么都不需要担心。\n做到了解耦的特性。解耦也是组件化的最关键的一步。\n\n## 用什么方式去实现deeplink\n\n### 自己维护一个navigator\n\n全局维护一个navigator，每次有需要跳转的页面，就register进去。\n\n### 使用注解方式\n\n使用**annotation**，在每个界面上方注册deeplink的参数和规范。\n\n使用apt，生成每个module(根据module包名)自己的分发deeplink的类。\n\nairbnb的deeplinkDispatch就做的很好  [deeplinkDispatch](https://github.com/airbnb/DeepLinkDispatch)\n\n。。突然没心情写源码解析了。以后有空再补上。\n","slug":"componetizationForPage","published":1,"updated":"2016-11-22T07:47:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tihr7s000e4irr40nzaxxh","content":"<p>当项目做了组件化之后，每个module都是可以独立作为application，那么怎么跳转到别的module页面呢？是否需要关心别人的页面叫什么呢？是否需要因为别人的页面改动而影响呢？</p>\n<p>答案是NO。</p>\n<p>那么我接下来要说的方案是deeplink，也就是Android提供的scheme跳转。</p>\n<h2 id=\"为什么要选择deeplink\">为什么要选择deeplink</h2><p><code>http://example.com/deepLink/{id}/{name}</code>比如这种形式根据两边定好的协议，能直接跳转、获取参数，而不需要关心对方的页面，就算页面改了类名、包名，只要scheme配置没改，那么都不需要担心。<br>做到了解耦的特性。解耦也是组件化的最关键的一步。</p>\n<h2 id=\"用什么方式去实现deeplink\">用什么方式去实现deeplink</h2><h3 id=\"自己维护一个navigator\">自己维护一个navigator</h3><p>全局维护一个navigator，每次有需要跳转的页面，就register进去。</p>\n<h3 id=\"使用注解方式\">使用注解方式</h3><p>使用<strong>annotation</strong>，在每个界面上方注册deeplink的参数和规范。</p>\n<p>使用apt，生成每个module(根据module包名)自己的分发deeplink的类。</p>\n<p>airbnb的deeplinkDispatch就做的很好  <a href=\"https://github.com/airbnb/DeepLinkDispatch\" target=\"_blank\" rel=\"external\">deeplinkDispatch</a></p>\n<p>。。突然没心情写源码解析了。以后有空再补上。</p>\n","excerpt":"","more":"<p>当项目做了组件化之后，每个module都是可以独立作为application，那么怎么跳转到别的module页面呢？是否需要关心别人的页面叫什么呢？是否需要因为别人的页面改动而影响呢？</p>\n<p>答案是NO。</p>\n<p>那么我接下来要说的方案是deeplink，也就是Android提供的scheme跳转。</p>\n<h2 id=\"为什么要选择deeplink\">为什么要选择deeplink</h2><p><code>http://example.com/deepLink/{id}/{name}</code>比如这种形式根据两边定好的协议，能直接跳转、获取参数，而不需要关心对方的页面，就算页面改了类名、包名，只要scheme配置没改，那么都不需要担心。<br>做到了解耦的特性。解耦也是组件化的最关键的一步。</p>\n<h2 id=\"用什么方式去实现deeplink\">用什么方式去实现deeplink</h2><h3 id=\"自己维护一个navigator\">自己维护一个navigator</h3><p>全局维护一个navigator，每次有需要跳转的页面，就register进去。</p>\n<h3 id=\"使用注解方式\">使用注解方式</h3><p>使用<strong>annotation</strong>，在每个界面上方注册deeplink的参数和规范。</p>\n<p>使用apt，生成每个module(根据module包名)自己的分发deeplink的类。</p>\n<p>airbnb的deeplinkDispatch就做的很好  <a href=\"https://github.com/airbnb/DeepLinkDispatch\">deeplinkDispatch</a></p>\n<p>。。突然没心情写源码解析了。以后有空再补上。</p>\n"},{"title":"从什么都不懂开始(一)——什么是Git","date":"2016-07-09T06:23:57.000Z","_content":"# 前言\n\n## 背景\n用了Git蛮久了，也没有怎么系统地学习过，大部分情况也是比较依赖编译器，所以想从头梳理一下Git基础，就想写一篇从没用过Git的人也能看懂，并能入门，再渐渐成长。\n一些运用git很熟练的大牛们可以点击返回或关闭啦~\n\n\n## 简介\n在了解Git之前，你得先了解什么是版本控制系统，如果不知道什么是版本控制系统，你可以先简单的理解成“可以追踪每次文件修改的系统，如果你某次修改出错，想回退，那么可以回退到某次修改，避免一些灾难性事件发生(比如电脑坏了、硬盘烧了)”。\n\n下面是一张开发的时候使用到的版本控制系统示意图:\n![版本控制示意图](http://7xvy2g.com1.z0.glb.clouddn.com/Team%20Organization%20Template.png)\n\n## 什么是Git\n如果你之前使用过SVN，那么Git和SVN是类似的，都是一种版本控制工具，Git拥有”本地仓库“，即使不联网，也能在本地做版本管理。可能Git的命令会很多，但是没关系，我们先慢慢学，掌握几种常用的，再深入学习一些高级技巧。\n\n# 朝Git迈出第一步\n\n## 安装Git\n\n### Linux\n\n基于 Fedora 的发行版 :\n\n` $ sudo yum install git `\n\n基于 Debian 的发行版 :\n\n`  $ sudo apt-get install git `\n\n如果还有一些其他版本的Linux请具体参考 :\n\n [http://git-scm.com/download/linux]( http://git-scm.com/download/linu)\n\n### Mac\n\n在Mac上安装有两种方案：\n\n1、直接安装Xcode，装完打开Terminal如果没安装过` Command Line Tools` 会有相应的提示。\n\n2、在     [http://git-scm.com/download/mac](http://git-scm.com/download/mac) 下载最新版本即可\n\n### Windows\n在Windows上也有几种方法：\n\n1、打开       [http://git-scm.com/download/win](http://git-scm.com/download/win) 会直接下载。\n\n2、下载Github for Windows 地址为：[http://windows.github.com](http://windows.github.com)\n\n### 其他安装方法\n\n从源码安装，源码地址在[ https://github.com/git/git/releases]( https://github.com/git/git/releases)有兴趣的同学可以去了解一下\n\n# 下节预告\n安装完环境后，就要去尝试一下使用了，那么我们接下来会准备在Github平台去实践，如果没有注册Github的同学们赶紧注册一个，\n因为我们是Android开发者，所以接下来的内容会使用Android平台做示范。\n\n最近大帅的开了个QQ实践群（568863373），欢迎大家一起讨论，也可以关注我们的公众号：`魔都三帅`\n\n![公众号](http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg)\n","source":"_posts/WhatIsTheGit.md","raw":"title: 从什么都不懂开始(一)——什么是Git\ndate: 2016-07-09 14:23:57\ncategories:\n- 学习\ntags:\n- Git\n- 版本控制\n---\n# 前言\n\n## 背景\n用了Git蛮久了，也没有怎么系统地学习过，大部分情况也是比较依赖编译器，所以想从头梳理一下Git基础，就想写一篇从没用过Git的人也能看懂，并能入门，再渐渐成长。\n一些运用git很熟练的大牛们可以点击返回或关闭啦~\n\n\n## 简介\n在了解Git之前，你得先了解什么是版本控制系统，如果不知道什么是版本控制系统，你可以先简单的理解成“可以追踪每次文件修改的系统，如果你某次修改出错，想回退，那么可以回退到某次修改，避免一些灾难性事件发生(比如电脑坏了、硬盘烧了)”。\n\n下面是一张开发的时候使用到的版本控制系统示意图:\n![版本控制示意图](http://7xvy2g.com1.z0.glb.clouddn.com/Team%20Organization%20Template.png)\n\n## 什么是Git\n如果你之前使用过SVN，那么Git和SVN是类似的，都是一种版本控制工具，Git拥有”本地仓库“，即使不联网，也能在本地做版本管理。可能Git的命令会很多，但是没关系，我们先慢慢学，掌握几种常用的，再深入学习一些高级技巧。\n\n# 朝Git迈出第一步\n\n## 安装Git\n\n### Linux\n\n基于 Fedora 的发行版 :\n\n` $ sudo yum install git `\n\n基于 Debian 的发行版 :\n\n`  $ sudo apt-get install git `\n\n如果还有一些其他版本的Linux请具体参考 :\n\n [http://git-scm.com/download/linux]( http://git-scm.com/download/linu)\n\n### Mac\n\n在Mac上安装有两种方案：\n\n1、直接安装Xcode，装完打开Terminal如果没安装过` Command Line Tools` 会有相应的提示。\n\n2、在     [http://git-scm.com/download/mac](http://git-scm.com/download/mac) 下载最新版本即可\n\n### Windows\n在Windows上也有几种方法：\n\n1、打开       [http://git-scm.com/download/win](http://git-scm.com/download/win) 会直接下载。\n\n2、下载Github for Windows 地址为：[http://windows.github.com](http://windows.github.com)\n\n### 其他安装方法\n\n从源码安装，源码地址在[ https://github.com/git/git/releases]( https://github.com/git/git/releases)有兴趣的同学可以去了解一下\n\n# 下节预告\n安装完环境后，就要去尝试一下使用了，那么我们接下来会准备在Github平台去实践，如果没有注册Github的同学们赶紧注册一个，\n因为我们是Android开发者，所以接下来的内容会使用Android平台做示范。\n\n最近大帅的开了个QQ实践群（568863373），欢迎大家一起讨论，也可以关注我们的公众号：`魔都三帅`\n\n![公众号](http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg)\n","slug":"WhatIsTheGit","published":1,"updated":"2016-07-21T03:57:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tihr7u000h4irr9n6fbzlb","content":"<h1 id=\"前言\">前言</h1><h2 id=\"背景\">背景</h2><p>用了Git蛮久了，也没有怎么系统地学习过，大部分情况也是比较依赖编译器，所以想从头梳理一下Git基础，就想写一篇从没用过Git的人也能看懂，并能入门，再渐渐成长。<br>一些运用git很熟练的大牛们可以点击返回或关闭啦~</p>\n<h2 id=\"简介\">简介</h2><p>在了解Git之前，你得先了解什么是版本控制系统，如果不知道什么是版本控制系统，你可以先简单的理解成“可以追踪每次文件修改的系统，如果你某次修改出错，想回退，那么可以回退到某次修改，避免一些灾难性事件发生(比如电脑坏了、硬盘烧了)”。</p>\n<p>下面是一张开发的时候使用到的版本控制系统示意图:<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/Team%20Organization%20Template.png\" alt=\"版本控制示意图\"></p>\n<h2 id=\"什么是Git\">什么是Git</h2><p>如果你之前使用过SVN，那么Git和SVN是类似的，都是一种版本控制工具，Git拥有”本地仓库“，即使不联网，也能在本地做版本管理。可能Git的命令会很多，但是没关系，我们先慢慢学，掌握几种常用的，再深入学习一些高级技巧。</p>\n<h1 id=\"朝Git迈出第一步\">朝Git迈出第一步</h1><h2 id=\"安装Git\">安装Git</h2><h3 id=\"Linux\">Linux</h3><p>基于 Fedora 的发行版 :</p>\n<p><code>$ sudo yum install git</code></p>\n<p>基于 Debian 的发行版 :</p>\n<p><code>$ sudo apt-get install git</code></p>\n<p>如果还有一些其他版本的Linux请具体参考 :</p>\n<p> <a href=\"http://git-scm.com/download/linu\" target=\"_blank\" rel=\"external\">http://git-scm.com/download/linux</a></p>\n<h3 id=\"Mac\">Mac</h3><p>在Mac上安装有两种方案：</p>\n<p>1、直接安装Xcode，装完打开Terminal如果没安装过<code>Command Line Tools</code> 会有相应的提示。</p>\n<p>2、在     <a href=\"http://git-scm.com/download/mac\" target=\"_blank\" rel=\"external\">http://git-scm.com/download/mac</a> 下载最新版本即可</p>\n<h3 id=\"Windows\">Windows</h3><p>在Windows上也有几种方法：</p>\n<p>1、打开       <a href=\"http://git-scm.com/download/win\" target=\"_blank\" rel=\"external\">http://git-scm.com/download/win</a> 会直接下载。</p>\n<p>2、下载Github for Windows 地址为：<a href=\"http://windows.github.com\" target=\"_blank\" rel=\"external\">http://windows.github.com</a></p>\n<h3 id=\"其他安装方法\">其他安装方法</h3><p>从源码安装，源码地址在<a href=\"https://github.com/git/git/releases\" target=\"_blank\" rel=\"external\"> https://github.com/git/git/releases</a>有兴趣的同学可以去了解一下</p>\n<h1 id=\"下节预告\">下节预告</h1><p>安装完环境后，就要去尝试一下使用了，那么我们接下来会准备在Github平台去实践，如果没有注册Github的同学们赶紧注册一个，<br>因为我们是Android开发者，所以接下来的内容会使用Android平台做示范。</p>\n<p>最近大帅的开了个QQ实践群（568863373），欢迎大家一起讨论，也可以关注我们的公众号：<code>魔都三帅</code></p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg\" alt=\"公众号\"></p>\n","excerpt":"","more":"<h1 id=\"前言\">前言</h1><h2 id=\"背景\">背景</h2><p>用了Git蛮久了，也没有怎么系统地学习过，大部分情况也是比较依赖编译器，所以想从头梳理一下Git基础，就想写一篇从没用过Git的人也能看懂，并能入门，再渐渐成长。<br>一些运用git很熟练的大牛们可以点击返回或关闭啦~</p>\n<h2 id=\"简介\">简介</h2><p>在了解Git之前，你得先了解什么是版本控制系统，如果不知道什么是版本控制系统，你可以先简单的理解成“可以追踪每次文件修改的系统，如果你某次修改出错，想回退，那么可以回退到某次修改，避免一些灾难性事件发生(比如电脑坏了、硬盘烧了)”。</p>\n<p>下面是一张开发的时候使用到的版本控制系统示意图:<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/Team%20Organization%20Template.png\" alt=\"版本控制示意图\"></p>\n<h2 id=\"什么是Git\">什么是Git</h2><p>如果你之前使用过SVN，那么Git和SVN是类似的，都是一种版本控制工具，Git拥有”本地仓库“，即使不联网，也能在本地做版本管理。可能Git的命令会很多，但是没关系，我们先慢慢学，掌握几种常用的，再深入学习一些高级技巧。</p>\n<h1 id=\"朝Git迈出第一步\">朝Git迈出第一步</h1><h2 id=\"安装Git\">安装Git</h2><h3 id=\"Linux\">Linux</h3><p>基于 Fedora 的发行版 :</p>\n<p><code>$ sudo yum install git</code></p>\n<p>基于 Debian 的发行版 :</p>\n<p><code>$ sudo apt-get install git</code></p>\n<p>如果还有一些其他版本的Linux请具体参考 :</p>\n<p> <a href=\"http://git-scm.com/download/linu\">http://git-scm.com/download/linux</a></p>\n<h3 id=\"Mac\">Mac</h3><p>在Mac上安装有两种方案：</p>\n<p>1、直接安装Xcode，装完打开Terminal如果没安装过<code>Command Line Tools</code> 会有相应的提示。</p>\n<p>2、在     <a href=\"http://git-scm.com/download/mac\">http://git-scm.com/download/mac</a> 下载最新版本即可</p>\n<h3 id=\"Windows\">Windows</h3><p>在Windows上也有几种方法：</p>\n<p>1、打开       <a href=\"http://git-scm.com/download/win\">http://git-scm.com/download/win</a> 会直接下载。</p>\n<p>2、下载Github for Windows 地址为：<a href=\"http://windows.github.com\">http://windows.github.com</a></p>\n<h3 id=\"其他安装方法\">其他安装方法</h3><p>从源码安装，源码地址在<a href=\"https://github.com/git/git/releases\"> https://github.com/git/git/releases</a>有兴趣的同学可以去了解一下</p>\n<h1 id=\"下节预告\">下节预告</h1><p>安装完环境后，就要去尝试一下使用了，那么我们接下来会准备在Github平台去实践，如果没有注册Github的同学们赶紧注册一个，<br>因为我们是Android开发者，所以接下来的内容会使用Android平台做示范。</p>\n<p>最近大帅的开了个QQ实践群（568863373），欢迎大家一起讨论，也可以关注我们的公众号：<code>魔都三帅</code></p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg\" alt=\"公众号\"></p>\n"},{"title":"项目组件化之遇到的坑","date":"2016-10-10T07:35:31.000Z","_content":"\n在MDCC中冯森林老师的组件化思路，为我们这些没有那么多精力折腾黑科技开发者们打开了另一扇门。\n\n需要做的事情很简单，就是将业务解耦模块化，让这个模块在debug下作为application单独运行，而在release下就作为library。\n\n这篇其实只是写一下我碰到的问题，记录一下。\n\n# 组件化套壳思路\n\n在这要感谢一下低调的**二帅** ( https://github.com/zzz40500 )，提供了合并manifest的思路。\n\n以及小梁提供的demo示例( https://github.com/liangzhitao/ComponentizationApp )\n\n\n![manifest](http://abner-nimengbo.cn/images/manifest.png)\n\n和**main**同级下有一个**debug**和**release**目录，在用命令行`gradle assembleDebug` 就会把main中的manifest和debug中的manifest合并。\n\n当debug的时候就会使用debug的manifest中的activity作为入口启动，这样在开发的时候只需要在当前模块编译开发即可。\n\nrelease的时候module就是library了，而入口就是app。\n\n\n# 组件化遇到的坑\n\n因为我们项目重度依赖apt以及一些编译中生成的库，像**databinding**、**dagger**、**retrolambda**。\n\n我们把dagger一些公用的component以及module都随着业务module一起抽离了出来。\n\n## 填坑之databinding\n\n之后抽离databinding的时候遇到了蛋疼的问题，我们使用databinding直接get之前set进去的variable，结果这样会导致在databidning在library中编译出错，其中缘由可以另外移驾至 --> http://blog.zhaiyifan.cn/2016/10/11/data-binding-in-library-module/\n\n### 查错\ndatabinding生成出错后，会连带dagger报错，这个时候报错又毫无头绪。\n需要使用命令行，将编译的log输出到文件中，因为console输出log有行数限制的。\n`gradle assembleDebug --debug --info > log.txt 2>&1`\n\n### xml\n在抽离module的时候用的AndroidStudio(大坑)的refactor，但是不支持对xml的修改，所以databinding涉及的xml中的依赖都要手动修改过来。\n### 生成的BR\n有多个module都是使用了databinding，那么这个时候会有对于BR依赖的问题，你要自己区分你使用的是依赖module的BR还是当前module的BR\n\ndatabinding组件化总结：只要一处没修改好，所有编译都是红的，反正都是泪~\n\n\n## retrolambda\n\ndb填完后，发现retrolambda提示生成class出错，但是它又不是apt的，根据错误提示找了许久，提示升级版本，之前是3.2.5，升级到3.3.0之后编译OK，然后在阿翟那边编译失败，又降了回来，现在又可以编译了，没有复现问题，推测是dagger依赖出现编译失败，导致了retrolambda生成失败。\n\n升级到3.3.0后提示的错反而是**NoSuchMethodError**，真是扯犊子。\n\n## dagger\n\n这位大哥，只要有一个地方错，满屏幕都是它报错，所有该生成的都没生成。而且错误提示还不友好，看错误日志的最上面，有没有提示什么。如果没有，那么就恭喜了，是不是什么地方写漏了回去慢慢看吧。\n\n## AndroidStudio\n\n升级到2.2后，在module中开发，经常会智能提示失败，然后莫名其妙标红，命令行编译又是通过的，反正我就是关闭再重启，其他东西点了都没什么用，都是大爷MD！。\n\n---\n再次感谢冯森林老师提供的思路，让我也可以高大上的尝试一次组件化，虽然重构挺痛苦的，但是学习到的还是很多。\n","source":"_posts/componetization.md","raw":"title: 项目组件化之遇到的坑\ndate: 2016-10-10 15:35:31\ncategories:\n- 实践\ntags:\n- Android\n- 组件化\n---\n\n在MDCC中冯森林老师的组件化思路，为我们这些没有那么多精力折腾黑科技开发者们打开了另一扇门。\n\n需要做的事情很简单，就是将业务解耦模块化，让这个模块在debug下作为application单独运行，而在release下就作为library。\n\n这篇其实只是写一下我碰到的问题，记录一下。\n\n# 组件化套壳思路\n\n在这要感谢一下低调的**二帅** ( https://github.com/zzz40500 )，提供了合并manifest的思路。\n\n以及小梁提供的demo示例( https://github.com/liangzhitao/ComponentizationApp )\n\n\n![manifest](http://abner-nimengbo.cn/images/manifest.png)\n\n和**main**同级下有一个**debug**和**release**目录，在用命令行`gradle assembleDebug` 就会把main中的manifest和debug中的manifest合并。\n\n当debug的时候就会使用debug的manifest中的activity作为入口启动，这样在开发的时候只需要在当前模块编译开发即可。\n\nrelease的时候module就是library了，而入口就是app。\n\n\n# 组件化遇到的坑\n\n因为我们项目重度依赖apt以及一些编译中生成的库，像**databinding**、**dagger**、**retrolambda**。\n\n我们把dagger一些公用的component以及module都随着业务module一起抽离了出来。\n\n## 填坑之databinding\n\n之后抽离databinding的时候遇到了蛋疼的问题，我们使用databinding直接get之前set进去的variable，结果这样会导致在databidning在library中编译出错，其中缘由可以另外移驾至 --> http://blog.zhaiyifan.cn/2016/10/11/data-binding-in-library-module/\n\n### 查错\ndatabinding生成出错后，会连带dagger报错，这个时候报错又毫无头绪。\n需要使用命令行，将编译的log输出到文件中，因为console输出log有行数限制的。\n`gradle assembleDebug --debug --info > log.txt 2>&1`\n\n### xml\n在抽离module的时候用的AndroidStudio(大坑)的refactor，但是不支持对xml的修改，所以databinding涉及的xml中的依赖都要手动修改过来。\n### 生成的BR\n有多个module都是使用了databinding，那么这个时候会有对于BR依赖的问题，你要自己区分你使用的是依赖module的BR还是当前module的BR\n\ndatabinding组件化总结：只要一处没修改好，所有编译都是红的，反正都是泪~\n\n\n## retrolambda\n\ndb填完后，发现retrolambda提示生成class出错，但是它又不是apt的，根据错误提示找了许久，提示升级版本，之前是3.2.5，升级到3.3.0之后编译OK，然后在阿翟那边编译失败，又降了回来，现在又可以编译了，没有复现问题，推测是dagger依赖出现编译失败，导致了retrolambda生成失败。\n\n升级到3.3.0后提示的错反而是**NoSuchMethodError**，真是扯犊子。\n\n## dagger\n\n这位大哥，只要有一个地方错，满屏幕都是它报错，所有该生成的都没生成。而且错误提示还不友好，看错误日志的最上面，有没有提示什么。如果没有，那么就恭喜了，是不是什么地方写漏了回去慢慢看吧。\n\n## AndroidStudio\n\n升级到2.2后，在module中开发，经常会智能提示失败，然后莫名其妙标红，命令行编译又是通过的，反正我就是关闭再重启，其他东西点了都没什么用，都是大爷MD！。\n\n---\n再次感谢冯森林老师提供的思路，让我也可以高大上的尝试一次组件化，虽然重构挺痛苦的，但是学习到的还是很多。\n","slug":"componetization","published":1,"updated":"2016-11-22T05:31:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tihr7v000j4irr6clu4av9","content":"<p>在MDCC中冯森林老师的组件化思路，为我们这些没有那么多精力折腾黑科技开发者们打开了另一扇门。</p>\n<p>需要做的事情很简单，就是将业务解耦模块化，让这个模块在debug下作为application单独运行，而在release下就作为library。</p>\n<p>这篇其实只是写一下我碰到的问题，记录一下。</p>\n<h1 id=\"组件化套壳思路\">组件化套壳思路</h1><p>在这要感谢一下低调的<strong>二帅</strong> ( <a href=\"https://github.com/zzz40500\" target=\"_blank\" rel=\"external\">https://github.com/zzz40500</a> )，提供了合并manifest的思路。</p>\n<p>以及小梁提供的demo示例( <a href=\"https://github.com/liangzhitao/ComponentizationApp\" target=\"_blank\" rel=\"external\">https://github.com/liangzhitao/ComponentizationApp</a> )</p>\n<p><img src=\"http://abner-nimengbo.cn/images/manifest.png\" alt=\"manifest\"></p>\n<p>和<strong>main</strong>同级下有一个<strong>debug</strong>和<strong>release</strong>目录，在用命令行<code>gradle assembleDebug</code> 就会把main中的manifest和debug中的manifest合并。</p>\n<p>当debug的时候就会使用debug的manifest中的activity作为入口启动，这样在开发的时候只需要在当前模块编译开发即可。</p>\n<p>release的时候module就是library了，而入口就是app。</p>\n<h1 id=\"组件化遇到的坑\">组件化遇到的坑</h1><p>因为我们项目重度依赖apt以及一些编译中生成的库，像<strong>databinding</strong>、<strong>dagger</strong>、<strong>retrolambda</strong>。</p>\n<p>我们把dagger一些公用的component以及module都随着业务module一起抽离了出来。</p>\n<h2 id=\"填坑之databinding\">填坑之databinding</h2><p>之后抽离databinding的时候遇到了蛋疼的问题，我们使用databinding直接get之前set进去的variable，结果这样会导致在databidning在library中编译出错，其中缘由可以另外移驾至 –&gt; <a href=\"http://blog.zhaiyifan.cn/2016/10/11/data-binding-in-library-module/\" target=\"_blank\" rel=\"external\">http://blog.zhaiyifan.cn/2016/10/11/data-binding-in-library-module/</a></p>\n<h3 id=\"查错\">查错</h3><p>databinding生成出错后，会连带dagger报错，这个时候报错又毫无头绪。<br>需要使用命令行，将编译的log输出到文件中，因为console输出log有行数限制的。<br><code>gradle assembleDebug --debug --info &gt; log.txt 2&gt;&amp;1</code></p>\n<h3 id=\"xml\">xml</h3><p>在抽离module的时候用的AndroidStudio(大坑)的refactor，但是不支持对xml的修改，所以databinding涉及的xml中的依赖都要手动修改过来。</p>\n<h3 id=\"生成的BR\">生成的BR</h3><p>有多个module都是使用了databinding，那么这个时候会有对于BR依赖的问题，你要自己区分你使用的是依赖module的BR还是当前module的BR</p>\n<p>databinding组件化总结：只要一处没修改好，所有编译都是红的，反正都是泪~</p>\n<h2 id=\"retrolambda\">retrolambda</h2><p>db填完后，发现retrolambda提示生成class出错，但是它又不是apt的，根据错误提示找了许久，提示升级版本，之前是3.2.5，升级到3.3.0之后编译OK，然后在阿翟那边编译失败，又降了回来，现在又可以编译了，没有复现问题，推测是dagger依赖出现编译失败，导致了retrolambda生成失败。</p>\n<p>升级到3.3.0后提示的错反而是<strong>NoSuchMethodError</strong>，真是扯犊子。</p>\n<h2 id=\"dagger\">dagger</h2><p>这位大哥，只要有一个地方错，满屏幕都是它报错，所有该生成的都没生成。而且错误提示还不友好，看错误日志的最上面，有没有提示什么。如果没有，那么就恭喜了，是不是什么地方写漏了回去慢慢看吧。</p>\n<h2 id=\"AndroidStudio\">AndroidStudio</h2><p>升级到2.2后，在module中开发，经常会智能提示失败，然后莫名其妙标红，命令行编译又是通过的，反正我就是关闭再重启，其他东西点了都没什么用，都是大爷MD！。</p>\n<hr>\n<p>再次感谢冯森林老师提供的思路，让我也可以高大上的尝试一次组件化，虽然重构挺痛苦的，但是学习到的还是很多。</p>\n","excerpt":"","more":"<p>在MDCC中冯森林老师的组件化思路，为我们这些没有那么多精力折腾黑科技开发者们打开了另一扇门。</p>\n<p>需要做的事情很简单，就是将业务解耦模块化，让这个模块在debug下作为application单独运行，而在release下就作为library。</p>\n<p>这篇其实只是写一下我碰到的问题，记录一下。</p>\n<h1 id=\"组件化套壳思路\">组件化套壳思路</h1><p>在这要感谢一下低调的<strong>二帅</strong> ( <a href=\"https://github.com/zzz40500\">https://github.com/zzz40500</a> )，提供了合并manifest的思路。</p>\n<p>以及小梁提供的demo示例( <a href=\"https://github.com/liangzhitao/ComponentizationApp\">https://github.com/liangzhitao/ComponentizationApp</a> )</p>\n<p><img src=\"http://abner-nimengbo.cn/images/manifest.png\" alt=\"manifest\"></p>\n<p>和<strong>main</strong>同级下有一个<strong>debug</strong>和<strong>release</strong>目录，在用命令行<code>gradle assembleDebug</code> 就会把main中的manifest和debug中的manifest合并。</p>\n<p>当debug的时候就会使用debug的manifest中的activity作为入口启动，这样在开发的时候只需要在当前模块编译开发即可。</p>\n<p>release的时候module就是library了，而入口就是app。</p>\n<h1 id=\"组件化遇到的坑\">组件化遇到的坑</h1><p>因为我们项目重度依赖apt以及一些编译中生成的库，像<strong>databinding</strong>、<strong>dagger</strong>、<strong>retrolambda</strong>。</p>\n<p>我们把dagger一些公用的component以及module都随着业务module一起抽离了出来。</p>\n<h2 id=\"填坑之databinding\">填坑之databinding</h2><p>之后抽离databinding的时候遇到了蛋疼的问题，我们使用databinding直接get之前set进去的variable，结果这样会导致在databidning在library中编译出错，其中缘由可以另外移驾至 –&gt; <a href=\"http://blog.zhaiyifan.cn/2016/10/11/data-binding-in-library-module/\">http://blog.zhaiyifan.cn/2016/10/11/data-binding-in-library-module/</a></p>\n<h3 id=\"查错\">查错</h3><p>databinding生成出错后，会连带dagger报错，这个时候报错又毫无头绪。<br>需要使用命令行，将编译的log输出到文件中，因为console输出log有行数限制的。<br><code>gradle assembleDebug --debug --info &gt; log.txt 2&gt;&amp;1</code></p>\n<h3 id=\"xml\">xml</h3><p>在抽离module的时候用的AndroidStudio(大坑)的refactor，但是不支持对xml的修改，所以databinding涉及的xml中的依赖都要手动修改过来。</p>\n<h3 id=\"生成的BR\">生成的BR</h3><p>有多个module都是使用了databinding，那么这个时候会有对于BR依赖的问题，你要自己区分你使用的是依赖module的BR还是当前module的BR</p>\n<p>databinding组件化总结：只要一处没修改好，所有编译都是红的，反正都是泪~</p>\n<h2 id=\"retrolambda\">retrolambda</h2><p>db填完后，发现retrolambda提示生成class出错，但是它又不是apt的，根据错误提示找了许久，提示升级版本，之前是3.2.5，升级到3.3.0之后编译OK，然后在阿翟那边编译失败，又降了回来，现在又可以编译了，没有复现问题，推测是dagger依赖出现编译失败，导致了retrolambda生成失败。</p>\n<p>升级到3.3.0后提示的错反而是<strong>NoSuchMethodError</strong>，真是扯犊子。</p>\n<h2 id=\"dagger\">dagger</h2><p>这位大哥，只要有一个地方错，满屏幕都是它报错，所有该生成的都没生成。而且错误提示还不友好，看错误日志的最上面，有没有提示什么。如果没有，那么就恭喜了，是不是什么地方写漏了回去慢慢看吧。</p>\n<h2 id=\"AndroidStudio\">AndroidStudio</h2><p>升级到2.2后，在module中开发，经常会智能提示失败，然后莫名其妙标红，命令行编译又是通过的，反正我就是关闭再重启，其他东西点了都没什么用，都是大爷MD！。</p>\n<hr>\n<p>再次感谢冯森林老师提供的思路，让我也可以高大上的尝试一次组件化，虽然重构挺痛苦的，但是学习到的还是很多。</p>\n"},{"title":"从什么都不懂开始(五)——做了这些事，今天就别干活了","date":"2016-07-29T08:12:06.000Z","_content":"\n前面四篇已经讲述了如何开始使用Git以及Git的命令操作。\n作者作为一名作死小能手，在Git上也曾花样作死过，本节将介绍一些作死Tips\n\n# 作死篇\n\n## 大小写问题\n\n创建文件的时候，手贱写了小写的首字母，然后rename了文件后，发现git status里还是原来的名字！\n\n因为git是大小写不敏感的，如果想要大小写敏感需要执行`git config core.ignorecase false`\n\n## 没有stash，直接checkout\n\n在自己分支写了好多代码，既没有commit，也没有stash，就直接checkout了，一脸懵逼。\n\n## 解决冲突\n\n在解决冲突时，手快留下了两行一样的代码，这个bug当时找了一天都不知道原因是什么，最后只好一行行对比代码。\n\n## push -f (悲痛脸)\n\n多么痛的领悟，同事曾经rebase错分支，在master上直接push -f，至今不知道这是什么情况。\n\n## rebase\n\nrebase前，手贱先push了，rebase完毕后 ，发现要push -f了，也是作啊。\n\n## fix bug\n改个bug，改吧改吧，改了好多文件，发现咦，分支没切。在屏幕前凌乱。\n\n## rm\n\n手快rm的时候没有输入git rm ，直接rm -f。（哭笑不得脸）\n\n## ignore没配置\n\n提交的时候肯定很爽，一堆build文件全进去了\n\n## reset\n\n一言不合就git reset --hard，心疼自己写了那么久的代码。\n\n# 工具篇\n\n针对Git还是有很多挺好用的工具的\n1、SourceTree\n2、ohmyzsh(重点推荐)\n\n## 想为ohmyzsh多写几行字\n\n有了ohmyzsh，你就能在作死的路上越走越远了。\n\n比如git commit -a -m \"message\"，在omyzsh下，直接用gcam \"message\" 就搞定了。\n\n比如git status ，输入gst就出来了，谁用谁知道，装逼利器，效率杠杠的。\n\n之前我的文章里，我的命令行界面和普通的不一样，就是因为装了ohmyzsh。\n官方地址:\n[http://ohmyz.sh/](http://ohmyz.sh/)\n\n# 总结\n\nGit系列到这里暂告一个段落，大部分的使用场景都能覆盖到了，有兴趣的同学可以自己看官方文档继续深入学习。\n\n\n欢迎加入QQ群：568863373。\n\n---\n欢迎关注我们的公众号：`魔都三帅`，欢迎大家来投稿~\n\n![公众号](http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg)\n","source":"_posts/gitcarefulness.md","raw":"title: 从什么都不懂开始(五)——做了这些事，今天就别干活了\ndate: 2016-07-29 16:12:06\ncategories:\n- 实践\ntags:\n- Git\n- 版本控制\n---\n\n前面四篇已经讲述了如何开始使用Git以及Git的命令操作。\n作者作为一名作死小能手，在Git上也曾花样作死过，本节将介绍一些作死Tips\n\n# 作死篇\n\n## 大小写问题\n\n创建文件的时候，手贱写了小写的首字母，然后rename了文件后，发现git status里还是原来的名字！\n\n因为git是大小写不敏感的，如果想要大小写敏感需要执行`git config core.ignorecase false`\n\n## 没有stash，直接checkout\n\n在自己分支写了好多代码，既没有commit，也没有stash，就直接checkout了，一脸懵逼。\n\n## 解决冲突\n\n在解决冲突时，手快留下了两行一样的代码，这个bug当时找了一天都不知道原因是什么，最后只好一行行对比代码。\n\n## push -f (悲痛脸)\n\n多么痛的领悟，同事曾经rebase错分支，在master上直接push -f，至今不知道这是什么情况。\n\n## rebase\n\nrebase前，手贱先push了，rebase完毕后 ，发现要push -f了，也是作啊。\n\n## fix bug\n改个bug，改吧改吧，改了好多文件，发现咦，分支没切。在屏幕前凌乱。\n\n## rm\n\n手快rm的时候没有输入git rm ，直接rm -f。（哭笑不得脸）\n\n## ignore没配置\n\n提交的时候肯定很爽，一堆build文件全进去了\n\n## reset\n\n一言不合就git reset --hard，心疼自己写了那么久的代码。\n\n# 工具篇\n\n针对Git还是有很多挺好用的工具的\n1、SourceTree\n2、ohmyzsh(重点推荐)\n\n## 想为ohmyzsh多写几行字\n\n有了ohmyzsh，你就能在作死的路上越走越远了。\n\n比如git commit -a -m \"message\"，在omyzsh下，直接用gcam \"message\" 就搞定了。\n\n比如git status ，输入gst就出来了，谁用谁知道，装逼利器，效率杠杠的。\n\n之前我的文章里，我的命令行界面和普通的不一样，就是因为装了ohmyzsh。\n官方地址:\n[http://ohmyz.sh/](http://ohmyz.sh/)\n\n# 总结\n\nGit系列到这里暂告一个段落，大部分的使用场景都能覆盖到了，有兴趣的同学可以自己看官方文档继续深入学习。\n\n\n欢迎加入QQ群：568863373。\n\n---\n欢迎关注我们的公众号：`魔都三帅`，欢迎大家来投稿~\n\n![公众号](http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg)\n","slug":"gitcarefulness","published":1,"updated":"2016-08-01T04:24:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tihr7w000o4irrdnn5xlmk","content":"<p>前面四篇已经讲述了如何开始使用Git以及Git的命令操作。<br>作者作为一名作死小能手，在Git上也曾花样作死过，本节将介绍一些作死Tips</p>\n<h1 id=\"作死篇\">作死篇</h1><h2 id=\"大小写问题\">大小写问题</h2><p>创建文件的时候，手贱写了小写的首字母，然后rename了文件后，发现git status里还是原来的名字！</p>\n<p>因为git是大小写不敏感的，如果想要大小写敏感需要执行<code>git config core.ignorecase false</code></p>\n<h2 id=\"没有stash，直接checkout\">没有stash，直接checkout</h2><p>在自己分支写了好多代码，既没有commit，也没有stash，就直接checkout了，一脸懵逼。</p>\n<h2 id=\"解决冲突\">解决冲突</h2><p>在解决冲突时，手快留下了两行一样的代码，这个bug当时找了一天都不知道原因是什么，最后只好一行行对比代码。</p>\n<h2 id=\"push_-f_(悲痛脸)\">push -f (悲痛脸)</h2><p>多么痛的领悟，同事曾经rebase错分支，在master上直接push -f，至今不知道这是什么情况。</p>\n<h2 id=\"rebase\">rebase</h2><p>rebase前，手贱先push了，rebase完毕后 ，发现要push -f了，也是作啊。</p>\n<h2 id=\"fix_bug\">fix bug</h2><p>改个bug，改吧改吧，改了好多文件，发现咦，分支没切。在屏幕前凌乱。</p>\n<h2 id=\"rm\">rm</h2><p>手快rm的时候没有输入git rm ，直接rm -f。（哭笑不得脸）</p>\n<h2 id=\"ignore没配置\">ignore没配置</h2><p>提交的时候肯定很爽，一堆build文件全进去了</p>\n<h2 id=\"reset\">reset</h2><p>一言不合就git reset –hard，心疼自己写了那么久的代码。</p>\n<h1 id=\"工具篇\">工具篇</h1><p>针对Git还是有很多挺好用的工具的<br>1、SourceTree<br>2、ohmyzsh(重点推荐)</p>\n<h2 id=\"想为ohmyzsh多写几行字\">想为ohmyzsh多写几行字</h2><p>有了ohmyzsh，你就能在作死的路上越走越远了。</p>\n<p>比如git commit -a -m “message”，在omyzsh下，直接用gcam “message” 就搞定了。</p>\n<p>比如git status ，输入gst就出来了，谁用谁知道，装逼利器，效率杠杠的。</p>\n<p>之前我的文章里，我的命令行界面和普通的不一样，就是因为装了ohmyzsh。<br>官方地址:<br><a href=\"http://ohmyz.sh/\" target=\"_blank\" rel=\"external\">http://ohmyz.sh/</a></p>\n<h1 id=\"总结\">总结</h1><p>Git系列到这里暂告一个段落，大部分的使用场景都能覆盖到了，有兴趣的同学可以自己看官方文档继续深入学习。</p>\n<p>欢迎加入QQ群：568863373。</p>\n<hr>\n<p>欢迎关注我们的公众号：<code>魔都三帅</code>，欢迎大家来投稿~</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg\" alt=\"公众号\"></p>\n","excerpt":"","more":"<p>前面四篇已经讲述了如何开始使用Git以及Git的命令操作。<br>作者作为一名作死小能手，在Git上也曾花样作死过，本节将介绍一些作死Tips</p>\n<h1 id=\"作死篇\">作死篇</h1><h2 id=\"大小写问题\">大小写问题</h2><p>创建文件的时候，手贱写了小写的首字母，然后rename了文件后，发现git status里还是原来的名字！</p>\n<p>因为git是大小写不敏感的，如果想要大小写敏感需要执行<code>git config core.ignorecase false</code></p>\n<h2 id=\"没有stash，直接checkout\">没有stash，直接checkout</h2><p>在自己分支写了好多代码，既没有commit，也没有stash，就直接checkout了，一脸懵逼。</p>\n<h2 id=\"解决冲突\">解决冲突</h2><p>在解决冲突时，手快留下了两行一样的代码，这个bug当时找了一天都不知道原因是什么，最后只好一行行对比代码。</p>\n<h2 id=\"push_-f_(悲痛脸)\">push -f (悲痛脸)</h2><p>多么痛的领悟，同事曾经rebase错分支，在master上直接push -f，至今不知道这是什么情况。</p>\n<h2 id=\"rebase\">rebase</h2><p>rebase前，手贱先push了，rebase完毕后 ，发现要push -f了，也是作啊。</p>\n<h2 id=\"fix_bug\">fix bug</h2><p>改个bug，改吧改吧，改了好多文件，发现咦，分支没切。在屏幕前凌乱。</p>\n<h2 id=\"rm\">rm</h2><p>手快rm的时候没有输入git rm ，直接rm -f。（哭笑不得脸）</p>\n<h2 id=\"ignore没配置\">ignore没配置</h2><p>提交的时候肯定很爽，一堆build文件全进去了</p>\n<h2 id=\"reset\">reset</h2><p>一言不合就git reset –hard，心疼自己写了那么久的代码。</p>\n<h1 id=\"工具篇\">工具篇</h1><p>针对Git还是有很多挺好用的工具的<br>1、SourceTree<br>2、ohmyzsh(重点推荐)</p>\n<h2 id=\"想为ohmyzsh多写几行字\">想为ohmyzsh多写几行字</h2><p>有了ohmyzsh，你就能在作死的路上越走越远了。</p>\n<p>比如git commit -a -m “message”，在omyzsh下，直接用gcam “message” 就搞定了。</p>\n<p>比如git status ，输入gst就出来了，谁用谁知道，装逼利器，效率杠杠的。</p>\n<p>之前我的文章里，我的命令行界面和普通的不一样，就是因为装了ohmyzsh。<br>官方地址:<br><a href=\"http://ohmyz.sh/\">http://ohmyz.sh/</a></p>\n<h1 id=\"总结\">总结</h1><p>Git系列到这里暂告一个段落，大部分的使用场景都能覆盖到了，有兴趣的同学可以自己看官方文档继续深入学习。</p>\n<p>欢迎加入QQ群：568863373。</p>\n<hr>\n<p>欢迎关注我们的公众号：<code>魔都三帅</code>，欢迎大家来投稿~</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg\" alt=\"公众号\"></p>\n"},{"title":"我的2016","date":"2017-01-19T07:41:07.000Z","_content":"\n原本没有打算要写今年的总结的，但是觉得不写总觉得缺了点什么吧，那还是写一下吧。\n\n16年的上半年也算是人生的一个奇特的经历吧，进入了一家电商公司，经历了一些奇葩的事，哈哈，但是对于人生来说还是有益的，也算涨了见识嘛。\n\n抱了Mark翟的大腿，跟在他身边学习到了很多东西，嗯，不止是技术(你懂的)。感谢他，也感谢这家公司，遇到一群很有爱的小伙伴。\n\n一年成长下来，也总是站在技术的最前沿，但是这也不是一个好现象，还是需要更多的积累，碰了一些壁才知道自己的短处在哪儿。\n\n我们魔三也开始断断续续的经营着自己的公众号，我也能断断续续的写一些东西。比起以前的自己要成熟了不少，也不再那么浮躁了。\n\n嗯，这里不得不提一下我们家老二，dim，低调又勤恳的帅小伙，不过最近也开始会开车了。\n\n现在的技术圈子，每天都能看到各种文章，信息量实在是爆棚，所以每天有吐槽的乐子也是不错的，当然也有很多干货啦，写文不易，且写且珍惜。\n\n秋名山群是一个很有爱的群，一群能开车，能聊技术的小伙伴，为什么我们能在一个群，那真的是猿份了。\n\n说起猿份，今年最大的收获就是遇到了生命中的她，也是一名程序猿，嗯。Thanks for code。在这里就不撒狗粮啦，不然要写不完了。\n\n目前我的她在杭州，所以打算要回杭州了，有点不舍上海的小伙伴，像嫁衣、玉鹏、医生、康可等等啦，以后我们魔三要成为江浙沪包邮三帅啦，爱你们，小伙伴们。\n\n15年初，我一个人从杭州到了上海，结识了一群小伙伴，17年我离开上海回到杭州。\n\n还是要努力学习呀，不然以后你们吹比我都听不懂了！\n","source":"_posts/endOf2016.md","raw":"title: 我的2016\ndate: 2017-01-19 15:41:07\ncategories:\n- 随笔\n---\n\n原本没有打算要写今年的总结的，但是觉得不写总觉得缺了点什么吧，那还是写一下吧。\n\n16年的上半年也算是人生的一个奇特的经历吧，进入了一家电商公司，经历了一些奇葩的事，哈哈，但是对于人生来说还是有益的，也算涨了见识嘛。\n\n抱了Mark翟的大腿，跟在他身边学习到了很多东西，嗯，不止是技术(你懂的)。感谢他，也感谢这家公司，遇到一群很有爱的小伙伴。\n\n一年成长下来，也总是站在技术的最前沿，但是这也不是一个好现象，还是需要更多的积累，碰了一些壁才知道自己的短处在哪儿。\n\n我们魔三也开始断断续续的经营着自己的公众号，我也能断断续续的写一些东西。比起以前的自己要成熟了不少，也不再那么浮躁了。\n\n嗯，这里不得不提一下我们家老二，dim，低调又勤恳的帅小伙，不过最近也开始会开车了。\n\n现在的技术圈子，每天都能看到各种文章，信息量实在是爆棚，所以每天有吐槽的乐子也是不错的，当然也有很多干货啦，写文不易，且写且珍惜。\n\n秋名山群是一个很有爱的群，一群能开车，能聊技术的小伙伴，为什么我们能在一个群，那真的是猿份了。\n\n说起猿份，今年最大的收获就是遇到了生命中的她，也是一名程序猿，嗯。Thanks for code。在这里就不撒狗粮啦，不然要写不完了。\n\n目前我的她在杭州，所以打算要回杭州了，有点不舍上海的小伙伴，像嫁衣、玉鹏、医生、康可等等啦，以后我们魔三要成为江浙沪包邮三帅啦，爱你们，小伙伴们。\n\n15年初，我一个人从杭州到了上海，结识了一群小伙伴，17年我离开上海回到杭州。\n\n还是要努力学习呀，不然以后你们吹比我都听不懂了！\n","slug":"endOf2016","published":1,"updated":"2017-01-19T08:03:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tihr7x000p4irr4s8ywqol","content":"<p>原本没有打算要写今年的总结的，但是觉得不写总觉得缺了点什么吧，那还是写一下吧。</p>\n<p>16年的上半年也算是人生的一个奇特的经历吧，进入了一家电商公司，经历了一些奇葩的事，哈哈，但是对于人生来说还是有益的，也算涨了见识嘛。</p>\n<p>抱了Mark翟的大腿，跟在他身边学习到了很多东西，嗯，不止是技术(你懂的)。感谢他，也感谢这家公司，遇到一群很有爱的小伙伴。</p>\n<p>一年成长下来，也总是站在技术的最前沿，但是这也不是一个好现象，还是需要更多的积累，碰了一些壁才知道自己的短处在哪儿。</p>\n<p>我们魔三也开始断断续续的经营着自己的公众号，我也能断断续续的写一些东西。比起以前的自己要成熟了不少，也不再那么浮躁了。</p>\n<p>嗯，这里不得不提一下我们家老二，dim，低调又勤恳的帅小伙，不过最近也开始会开车了。</p>\n<p>现在的技术圈子，每天都能看到各种文章，信息量实在是爆棚，所以每天有吐槽的乐子也是不错的，当然也有很多干货啦，写文不易，且写且珍惜。</p>\n<p>秋名山群是一个很有爱的群，一群能开车，能聊技术的小伙伴，为什么我们能在一个群，那真的是猿份了。</p>\n<p>说起猿份，今年最大的收获就是遇到了生命中的她，也是一名程序猿，嗯。Thanks for code。在这里就不撒狗粮啦，不然要写不完了。</p>\n<p>目前我的她在杭州，所以打算要回杭州了，有点不舍上海的小伙伴，像嫁衣、玉鹏、医生、康可等等啦，以后我们魔三要成为江浙沪包邮三帅啦，爱你们，小伙伴们。</p>\n<p>15年初，我一个人从杭州到了上海，结识了一群小伙伴，17年我离开上海回到杭州。</p>\n<p>还是要努力学习呀，不然以后你们吹比我都听不懂了！</p>\n","excerpt":"","more":"<p>原本没有打算要写今年的总结的，但是觉得不写总觉得缺了点什么吧，那还是写一下吧。</p>\n<p>16年的上半年也算是人生的一个奇特的经历吧，进入了一家电商公司，经历了一些奇葩的事，哈哈，但是对于人生来说还是有益的，也算涨了见识嘛。</p>\n<p>抱了Mark翟的大腿，跟在他身边学习到了很多东西，嗯，不止是技术(你懂的)。感谢他，也感谢这家公司，遇到一群很有爱的小伙伴。</p>\n<p>一年成长下来，也总是站在技术的最前沿，但是这也不是一个好现象，还是需要更多的积累，碰了一些壁才知道自己的短处在哪儿。</p>\n<p>我们魔三也开始断断续续的经营着自己的公众号，我也能断断续续的写一些东西。比起以前的自己要成熟了不少，也不再那么浮躁了。</p>\n<p>嗯，这里不得不提一下我们家老二，dim，低调又勤恳的帅小伙，不过最近也开始会开车了。</p>\n<p>现在的技术圈子，每天都能看到各种文章，信息量实在是爆棚，所以每天有吐槽的乐子也是不错的，当然也有很多干货啦，写文不易，且写且珍惜。</p>\n<p>秋名山群是一个很有爱的群，一群能开车，能聊技术的小伙伴，为什么我们能在一个群，那真的是猿份了。</p>\n<p>说起猿份，今年最大的收获就是遇到了生命中的她，也是一名程序猿，嗯。Thanks for code。在这里就不撒狗粮啦，不然要写不完了。</p>\n<p>目前我的她在杭州，所以打算要回杭州了，有点不舍上海的小伙伴，像嫁衣、玉鹏、医生、康可等等啦，以后我们魔三要成为江浙沪包邮三帅啦，爱你们，小伙伴们。</p>\n<p>15年初，我一个人从杭州到了上海，结识了一群小伙伴，17年我离开上海回到杭州。</p>\n<p>还是要努力学习呀，不然以后你们吹比我都听不懂了！</p>\n"},{"title":"react-native for android 重构与优化","date":"2019-09-21T11:52:34.000Z","_content":"\n## 背景\n\nPM 提了一个需求：我们要做一个 app，有 xxx 功能，暂时先支持这么多，用 rn 现有的框架，目前先用 ipad 运行，android 平台有硬件的锅。但是我们三天后要上线。\n\n我： ？？？？ wut ？\n\n开始进入写垃圾代码模式。 怎么快怎么来，就几个简单的页面，不需要跨页面组件沟通，要什么 redux，state 就能搞定。封装？不存在的，能写完就不错了。 三天后，项目如期上线，经过一段时间的怼代码迭代，pm 突然有一天跑来说： xxx，我们现在需要支持 android 平台。\n\n我： ？？？？ wut ？\n\n经过一番适配，跑了一下，ui 大致没啥问题，业务也能跑通。但是 tmd 怎么这么卡呢？而且 ipad 一点都不卡，android 这么卡 ？？？\n\n### 分析问题\n\napp 在某个页面一直有个类似于轮询的机制，不停的请求数据，刷新页面，在 android 中，这个方式是 native 暴露方法，js 层直接调用，200ms 一次请求。由于前期的粗糙迭代，没有什么子组件一说，页面组件层级不超过3级，state 全部在父级维护，看了下大概200多行，自己都慌了，这不就意味着每 200 ms，所有组件都会重新重新进行 diff 比较，然后判断是否重新渲染吗，这么多组件，不卡才有鬼。\n\n### 解决方案\n\n按照页面模块拆分结构，把所有模块拆成独立的个体，不会相互影响，都用 shouldComponentUpdate 判断比较。\n\n### 抽取一个模块做测试\n\n先抽离那个 200ms 请求刷新页面的模块，抽成子组件后，state 在内部维护，里面刷新，父组件稳如泰山，这个方法可行。\n\n### native 方案\n\nnative 是与 plc 通信，串口交流，大部分地方为了线程安全，都加了锁。但是在 js 请求 native 方法的时候，还是在主线程获取的数据，所以会影响操作。\n\n将这部分方案，由类生产者与消费者模式改成观察者模式。\n\nnative 的这部分代码都由 service 处理，并通过事件告诉 js ，在 js 的注册事件回调中获取数据并刷新界面\n\n\n## 总结\n\n乱怼一时爽，重构火葬场\n\n","source":"_posts/react-native-for-android-重构与优化.md","raw":"title: react-native for android 重构与优化\ndate: 2019-09-21 19:52:34\ntags:\n- Android\n- ReactNative\n---\n\n## 背景\n\nPM 提了一个需求：我们要做一个 app，有 xxx 功能，暂时先支持这么多，用 rn 现有的框架，目前先用 ipad 运行，android 平台有硬件的锅。但是我们三天后要上线。\n\n我： ？？？？ wut ？\n\n开始进入写垃圾代码模式。 怎么快怎么来，就几个简单的页面，不需要跨页面组件沟通，要什么 redux，state 就能搞定。封装？不存在的，能写完就不错了。 三天后，项目如期上线，经过一段时间的怼代码迭代，pm 突然有一天跑来说： xxx，我们现在需要支持 android 平台。\n\n我： ？？？？ wut ？\n\n经过一番适配，跑了一下，ui 大致没啥问题，业务也能跑通。但是 tmd 怎么这么卡呢？而且 ipad 一点都不卡，android 这么卡 ？？？\n\n### 分析问题\n\napp 在某个页面一直有个类似于轮询的机制，不停的请求数据，刷新页面，在 android 中，这个方式是 native 暴露方法，js 层直接调用，200ms 一次请求。由于前期的粗糙迭代，没有什么子组件一说，页面组件层级不超过3级，state 全部在父级维护，看了下大概200多行，自己都慌了，这不就意味着每 200 ms，所有组件都会重新重新进行 diff 比较，然后判断是否重新渲染吗，这么多组件，不卡才有鬼。\n\n### 解决方案\n\n按照页面模块拆分结构，把所有模块拆成独立的个体，不会相互影响，都用 shouldComponentUpdate 判断比较。\n\n### 抽取一个模块做测试\n\n先抽离那个 200ms 请求刷新页面的模块，抽成子组件后，state 在内部维护，里面刷新，父组件稳如泰山，这个方法可行。\n\n### native 方案\n\nnative 是与 plc 通信，串口交流，大部分地方为了线程安全，都加了锁。但是在 js 请求 native 方法的时候，还是在主线程获取的数据，所以会影响操作。\n\n将这部分方案，由类生产者与消费者模式改成观察者模式。\n\nnative 的这部分代码都由 service 处理，并通过事件告诉 js ，在 js 的注册事件回调中获取数据并刷新界面\n\n\n## 总结\n\n乱怼一时爽，重构火葬场\n\n","slug":"react-native-for-android-重构与优化","published":1,"updated":"2019-09-21T12:10:45.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tihr7z000t4irrfykmoocn","content":"<h2 id=\"背景\">背景</h2><p>PM 提了一个需求：我们要做一个 app，有 xxx 功能，暂时先支持这么多，用 rn 现有的框架，目前先用 ipad 运行，android 平台有硬件的锅。但是我们三天后要上线。</p>\n<p>我： ？？？？ wut ？</p>\n<p>开始进入写垃圾代码模式。 怎么快怎么来，就几个简单的页面，不需要跨页面组件沟通，要什么 redux，state 就能搞定。封装？不存在的，能写完就不错了。 三天后，项目如期上线，经过一段时间的怼代码迭代，pm 突然有一天跑来说： xxx，我们现在需要支持 android 平台。</p>\n<p>我： ？？？？ wut ？</p>\n<p>经过一番适配，跑了一下，ui 大致没啥问题，业务也能跑通。但是 tmd 怎么这么卡呢？而且 ipad 一点都不卡，android 这么卡 ？？？</p>\n<h3 id=\"分析问题\">分析问题</h3><p>app 在某个页面一直有个类似于轮询的机制，不停的请求数据，刷新页面，在 android 中，这个方式是 native 暴露方法，js 层直接调用，200ms 一次请求。由于前期的粗糙迭代，没有什么子组件一说，页面组件层级不超过3级，state 全部在父级维护，看了下大概200多行，自己都慌了，这不就意味着每 200 ms，所有组件都会重新重新进行 diff 比较，然后判断是否重新渲染吗，这么多组件，不卡才有鬼。</p>\n<h3 id=\"解决方案\">解决方案</h3><p>按照页面模块拆分结构，把所有模块拆成独立的个体，不会相互影响，都用 shouldComponentUpdate 判断比较。</p>\n<h3 id=\"抽取一个模块做测试\">抽取一个模块做测试</h3><p>先抽离那个 200ms 请求刷新页面的模块，抽成子组件后，state 在内部维护，里面刷新，父组件稳如泰山，这个方法可行。</p>\n<h3 id=\"native_方案\">native 方案</h3><p>native 是与 plc 通信，串口交流，大部分地方为了线程安全，都加了锁。但是在 js 请求 native 方法的时候，还是在主线程获取的数据，所以会影响操作。</p>\n<p>将这部分方案，由类生产者与消费者模式改成观察者模式。</p>\n<p>native 的这部分代码都由 service 处理，并通过事件告诉 js ，在 js 的注册事件回调中获取数据并刷新界面</p>\n<h2 id=\"总结\">总结</h2><p>乱怼一时爽，重构火葬场</p>\n","excerpt":"","more":"<h2 id=\"背景\">背景</h2><p>PM 提了一个需求：我们要做一个 app，有 xxx 功能，暂时先支持这么多，用 rn 现有的框架，目前先用 ipad 运行，android 平台有硬件的锅。但是我们三天后要上线。</p>\n<p>我： ？？？？ wut ？</p>\n<p>开始进入写垃圾代码模式。 怎么快怎么来，就几个简单的页面，不需要跨页面组件沟通，要什么 redux，state 就能搞定。封装？不存在的，能写完就不错了。 三天后，项目如期上线，经过一段时间的怼代码迭代，pm 突然有一天跑来说： xxx，我们现在需要支持 android 平台。</p>\n<p>我： ？？？？ wut ？</p>\n<p>经过一番适配，跑了一下，ui 大致没啥问题，业务也能跑通。但是 tmd 怎么这么卡呢？而且 ipad 一点都不卡，android 这么卡 ？？？</p>\n<h3 id=\"分析问题\">分析问题</h3><p>app 在某个页面一直有个类似于轮询的机制，不停的请求数据，刷新页面，在 android 中，这个方式是 native 暴露方法，js 层直接调用，200ms 一次请求。由于前期的粗糙迭代，没有什么子组件一说，页面组件层级不超过3级，state 全部在父级维护，看了下大概200多行，自己都慌了，这不就意味着每 200 ms，所有组件都会重新重新进行 diff 比较，然后判断是否重新渲染吗，这么多组件，不卡才有鬼。</p>\n<h3 id=\"解决方案\">解决方案</h3><p>按照页面模块拆分结构，把所有模块拆成独立的个体，不会相互影响，都用 shouldComponentUpdate 判断比较。</p>\n<h3 id=\"抽取一个模块做测试\">抽取一个模块做测试</h3><p>先抽离那个 200ms 请求刷新页面的模块，抽成子组件后，state 在内部维护，里面刷新，父组件稳如泰山，这个方法可行。</p>\n<h3 id=\"native_方案\">native 方案</h3><p>native 是与 plc 通信，串口交流，大部分地方为了线程安全，都加了锁。但是在 js 请求 native 方法的时候，还是在主线程获取的数据，所以会影响操作。</p>\n<p>将这部分方案，由类生产者与消费者模式改成观察者模式。</p>\n<p>native 的这部分代码都由 service 处理，并通过事件告诉 js ，在 js 的注册事件回调中获取数据并刷新界面</p>\n<h2 id=\"总结\">总结</h2><p>乱怼一时爽，重构火葬场</p>\n"},{"title":"react-native 预加载优化","date":"2019-09-18T02:43:21.000Z","_content":"\n预加载的方案和原理网上其实也有非常多。我先简单的贴一下代码\n\n### Delegate\n\n需要两个新增的类： 一个是继承 `ReactActivityDelegate` 用于承载 Rn 的 activity 重写 `createReactActivityDelegate` 方法\n\n```java\n\npublic class DPReactActivityDelegate extends ReactActivityDelegate {\n    private Activity mActivity;\n    private String mMainComponentName;\n    private ReactRootView mReactRootView;\n\n    public DPReactActivityDelegate(Activity activity, @Nullable String mainComponentName) {\n        super(activity, mainComponentName);\n        mActivity = activity;\n        mMainComponentName = mainComponentName;\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        // 先设置一个 contentView，保证加载的时候不是白屏\n        mActivity.setContentView(R.layout.activity_launch);\n        Class<ReactActivityDelegate> clazz = ReactActivityDelegate.class;\n        try {\n            Field field = clazz.getDeclaredField(\"mDoubleTapReloadRecognizer\");\n            field.setAccessible(true);\n            field.set(this, new DoubleTapReloadRecognizer());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        if (BuildConfig.DEBUG && Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && !Settings.canDrawOverlays(mActivity)) {\n            TextView textView = new TextView(mActivity);\n            textView.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));\n            textView.setText(RNCacheViewManager.REDBOX_PERMISSION_MESSAGE + \"\\nPlease exit the app and grant again\");\n            textView.setTextColor(Color.rgb(255, 0, 0));\n            mActivity.setContentView(textView);\n        } else {\n            loadApp(null);\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        RNCacheViewManager.onDestroy(mActivity);\n        super.onDestroy();\n    }\n\n    @Override\n    protected void loadApp(String appKey) {\n        if (mReactRootView != null) {\n            throw new IllegalStateException(\"Cannot loadApp while app is already running.\");\n        }\n        //从缓存中读取初始化好的ReactRootView,如果不为空直接进行加载\n        ReactRootView reactRootView = RNCacheViewManager.getRootView(mActivity);\n        // 在 xml 中其实添加了一个 framLayout 作为 rn rootview 的载体\n        FrameLayout frameLayout = mActivity.findViewById(R.id.rn_rootView);\n        if(reactRootView == null){\n            mReactRootView = createRootView();\n            mReactRootView.startReactApplication(\n                    getReactNativeHost().getReactInstanceManager(),\n                    appKey,\n                    getLaunchOptions());\n            frameLayout.addView(mReactRootView);\n        }else{\n            frameLayout.addView(reactRootView);\n        }\n        frameLayout.setVisibility(View.VISIBLE);\n    }\n}\n\n\n```\n某些小 app 可能就一个 activity ，所以启动页可以使用 windowBackground 替代。而目前大部分 app 的 hybrid 开发的，前面的页面基本都是 native， 这样就会导致打开后，第一时间看到的并不是 windowBackground，而是空白的 activity，所以这个时候需要先人为添加一个 contentView，然后再加载完 reactRootView 后，add 到 我们的 contentView 的节点中。\n\n### CacheViewManager\n\n``` java\n\npublic class RNCacheViewManager {\n    public static final int REQUEST_OVERLAY_PERMISSION_CODE = 1111;\n    public static final String REDBOX_PERMISSION_MESSAGE =\n            \"Overlay permissions needs to be granted in order for react native apps to run in dev mode\";\n    private static ReactRootView mRootView = null;\n\n    public static ReactRootView getRootView(Activity activity) {\n        if (mRootView.getContext() instanceof MutableContextWrapper) {\n            ((MutableContextWrapper) mRootView.getContext()).setBaseContext(\n                    activity\n            );\n        }\n        return mRootView;\n    }\n\n\n    public static ReactNativeHost getReactNativeHost(Activity activity) {\n        return ((ReactApplication) activity.getApplication()).getReactNativeHost();\n    }\n\n    public static void init(Activity act, String moduleName, Bundle lauchOptions) {\n        boolean needsOverlayPermission = false;\n        if (mRootView != null) {\n            return;\n        }\n        if (BuildConfig.DEBUG && Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && !Settings.canDrawOverlays(act)) {\n            needsOverlayPermission = true;\n            Intent serviceIntent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(\"package:\" + act.getPackageName()));\n            FLog.w(ReactConstants.TAG, REDBOX_PERMISSION_MESSAGE);\n            Toast.makeText(act, REDBOX_PERMISSION_MESSAGE, Toast.LENGTH_LONG).show();\n            act.startActivityForResult(serviceIntent, REQUEST_OVERLAY_PERMISSION_CODE);\n        }\n        if (!needsOverlayPermission) {\n            mRootView = new ReactRootView(new MutableContextWrapper(act.getApplicationContext()));\n            mRootView.startReactApplication(\n                    getReactNativeHost(act).getReactInstanceManager(),\n                    moduleName,\n                    lauchOptions);\n        }\n    }\n\n    /**\n     * 不能再调用原有的销毁方法，否则rn初始化出来的对象会被销毁,同时\n     * 在ReactActivity销毁后，我们需要把 view从父视图中移除。\n     */\n    public static void onDestroy(Activity activity) {\n        try {\n            ReactRootView reactRootView = getRootView(activity);\n            if (reactRootView.getContext() instanceof MutableContextWrapper) {\n                ((MutableContextWrapper) reactRootView.getContext()).setBaseContext(\n                        activity.getApplicationContext()\n                );\n            }\n            ViewParent parent = getRootView(activity).getParent();\n            if (parent != null)\n                ((android.view.ViewGroup) parent).removeView(getRootView(activity));\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n\n```\n\n这边使用了 `MutableContextWrapper`，是因为 rn 加载的 activity 和 预加载的 activity 不是同一个 activity，这样会导致 js 中的 modal ，也就是 android 中的 dialog，会提示 activity 已销毁，无法弹出。所以在 init 的时候，是使用 `MutableContextWrapper`，而在 getRootView 的时候，再重新 setBaseContext ，把真正的容器 activity 设置进去。这样就能保证 dialog 弹出的 是在当前的 activity。\n\n### 使用\n\n在前置 activity 中：\n\n``` java\n\n // 在 startActivity 前调用这个，时机自己把握\nRNCacheViewManager.init(this, \"DataPlusReactNative\", null);\n\n```\n \n\n在 reactActivity 中：\n\n``` java\n\n  @Override\n    protected ReactActivityDelegate createReactActivityDelegate() {\n        return new DPReactActivityDelegate(this, getMainComponentName());\n    }\n\n```\n\n使用自定义的 delegate 就好了。\n\n## 总结\n\n这样做可以灵活的显示 reactRootView 未加载完之前要显示的界面。效果也挺明显的，但是我比较懒，就不贴图啦。\n","source":"_posts/react-native-预加载优化.md","raw":"title: react-native 预加载优化\ndate: 2019-09-18 10:43:21\ntags: \n- Android\n- ReactNative\n---\n\n预加载的方案和原理网上其实也有非常多。我先简单的贴一下代码\n\n### Delegate\n\n需要两个新增的类： 一个是继承 `ReactActivityDelegate` 用于承载 Rn 的 activity 重写 `createReactActivityDelegate` 方法\n\n```java\n\npublic class DPReactActivityDelegate extends ReactActivityDelegate {\n    private Activity mActivity;\n    private String mMainComponentName;\n    private ReactRootView mReactRootView;\n\n    public DPReactActivityDelegate(Activity activity, @Nullable String mainComponentName) {\n        super(activity, mainComponentName);\n        mActivity = activity;\n        mMainComponentName = mainComponentName;\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        // 先设置一个 contentView，保证加载的时候不是白屏\n        mActivity.setContentView(R.layout.activity_launch);\n        Class<ReactActivityDelegate> clazz = ReactActivityDelegate.class;\n        try {\n            Field field = clazz.getDeclaredField(\"mDoubleTapReloadRecognizer\");\n            field.setAccessible(true);\n            field.set(this, new DoubleTapReloadRecognizer());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        if (BuildConfig.DEBUG && Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && !Settings.canDrawOverlays(mActivity)) {\n            TextView textView = new TextView(mActivity);\n            textView.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));\n            textView.setText(RNCacheViewManager.REDBOX_PERMISSION_MESSAGE + \"\\nPlease exit the app and grant again\");\n            textView.setTextColor(Color.rgb(255, 0, 0));\n            mActivity.setContentView(textView);\n        } else {\n            loadApp(null);\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        RNCacheViewManager.onDestroy(mActivity);\n        super.onDestroy();\n    }\n\n    @Override\n    protected void loadApp(String appKey) {\n        if (mReactRootView != null) {\n            throw new IllegalStateException(\"Cannot loadApp while app is already running.\");\n        }\n        //从缓存中读取初始化好的ReactRootView,如果不为空直接进行加载\n        ReactRootView reactRootView = RNCacheViewManager.getRootView(mActivity);\n        // 在 xml 中其实添加了一个 framLayout 作为 rn rootview 的载体\n        FrameLayout frameLayout = mActivity.findViewById(R.id.rn_rootView);\n        if(reactRootView == null){\n            mReactRootView = createRootView();\n            mReactRootView.startReactApplication(\n                    getReactNativeHost().getReactInstanceManager(),\n                    appKey,\n                    getLaunchOptions());\n            frameLayout.addView(mReactRootView);\n        }else{\n            frameLayout.addView(reactRootView);\n        }\n        frameLayout.setVisibility(View.VISIBLE);\n    }\n}\n\n\n```\n某些小 app 可能就一个 activity ，所以启动页可以使用 windowBackground 替代。而目前大部分 app 的 hybrid 开发的，前面的页面基本都是 native， 这样就会导致打开后，第一时间看到的并不是 windowBackground，而是空白的 activity，所以这个时候需要先人为添加一个 contentView，然后再加载完 reactRootView 后，add 到 我们的 contentView 的节点中。\n\n### CacheViewManager\n\n``` java\n\npublic class RNCacheViewManager {\n    public static final int REQUEST_OVERLAY_PERMISSION_CODE = 1111;\n    public static final String REDBOX_PERMISSION_MESSAGE =\n            \"Overlay permissions needs to be granted in order for react native apps to run in dev mode\";\n    private static ReactRootView mRootView = null;\n\n    public static ReactRootView getRootView(Activity activity) {\n        if (mRootView.getContext() instanceof MutableContextWrapper) {\n            ((MutableContextWrapper) mRootView.getContext()).setBaseContext(\n                    activity\n            );\n        }\n        return mRootView;\n    }\n\n\n    public static ReactNativeHost getReactNativeHost(Activity activity) {\n        return ((ReactApplication) activity.getApplication()).getReactNativeHost();\n    }\n\n    public static void init(Activity act, String moduleName, Bundle lauchOptions) {\n        boolean needsOverlayPermission = false;\n        if (mRootView != null) {\n            return;\n        }\n        if (BuildConfig.DEBUG && Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && !Settings.canDrawOverlays(act)) {\n            needsOverlayPermission = true;\n            Intent serviceIntent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(\"package:\" + act.getPackageName()));\n            FLog.w(ReactConstants.TAG, REDBOX_PERMISSION_MESSAGE);\n            Toast.makeText(act, REDBOX_PERMISSION_MESSAGE, Toast.LENGTH_LONG).show();\n            act.startActivityForResult(serviceIntent, REQUEST_OVERLAY_PERMISSION_CODE);\n        }\n        if (!needsOverlayPermission) {\n            mRootView = new ReactRootView(new MutableContextWrapper(act.getApplicationContext()));\n            mRootView.startReactApplication(\n                    getReactNativeHost(act).getReactInstanceManager(),\n                    moduleName,\n                    lauchOptions);\n        }\n    }\n\n    /**\n     * 不能再调用原有的销毁方法，否则rn初始化出来的对象会被销毁,同时\n     * 在ReactActivity销毁后，我们需要把 view从父视图中移除。\n     */\n    public static void onDestroy(Activity activity) {\n        try {\n            ReactRootView reactRootView = getRootView(activity);\n            if (reactRootView.getContext() instanceof MutableContextWrapper) {\n                ((MutableContextWrapper) reactRootView.getContext()).setBaseContext(\n                        activity.getApplicationContext()\n                );\n            }\n            ViewParent parent = getRootView(activity).getParent();\n            if (parent != null)\n                ((android.view.ViewGroup) parent).removeView(getRootView(activity));\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n\n```\n\n这边使用了 `MutableContextWrapper`，是因为 rn 加载的 activity 和 预加载的 activity 不是同一个 activity，这样会导致 js 中的 modal ，也就是 android 中的 dialog，会提示 activity 已销毁，无法弹出。所以在 init 的时候，是使用 `MutableContextWrapper`，而在 getRootView 的时候，再重新 setBaseContext ，把真正的容器 activity 设置进去。这样就能保证 dialog 弹出的 是在当前的 activity。\n\n### 使用\n\n在前置 activity 中：\n\n``` java\n\n // 在 startActivity 前调用这个，时机自己把握\nRNCacheViewManager.init(this, \"DataPlusReactNative\", null);\n\n```\n \n\n在 reactActivity 中：\n\n``` java\n\n  @Override\n    protected ReactActivityDelegate createReactActivityDelegate() {\n        return new DPReactActivityDelegate(this, getMainComponentName());\n    }\n\n```\n\n使用自定义的 delegate 就好了。\n\n## 总结\n\n这样做可以灵活的显示 reactRootView 未加载完之前要显示的界面。效果也挺明显的，但是我比较懒，就不贴图啦。\n","slug":"react-native-预加载优化","published":1,"updated":"2019-09-18T03:41:04.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tihr80000w4irr98905mds","content":"<p>预加载的方案和原理网上其实也有非常多。我先简单的贴一下代码</p>\n<h3 id=\"Delegate\">Delegate</h3><p>需要两个新增的类： 一个是继承 <code>ReactActivityDelegate</code> 用于承载 Rn 的 activity 重写 <code>createReactActivityDelegate</code> 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DPReactActivityDelegate</span> <span class=\"keyword\">extends</span> <span class=\"title\">ReactActivityDelegate</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Activity mActivity;</div><div class=\"line\">    <span class=\"keyword\">private</span> String mMainComponentName;</div><div class=\"line\">    <span class=\"keyword\">private</span> ReactRootView mReactRootView;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DPReactActivityDelegate</span><span class=\"params\">(Activity activity, @Nullable String mainComponentName)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(activity, mainComponentName);</div><div class=\"line\">        mActivity = activity;</div><div class=\"line\">        mMainComponentName = mainComponentName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 先设置一个 contentView，保证加载的时候不是白屏</span></div><div class=\"line\">        mActivity.setContentView(R.layout.activity_launch);</div><div class=\"line\">        Class&lt;ReactActivityDelegate&gt; clazz = ReactActivityDelegate.class;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            Field field = clazz.getDeclaredField(<span class=\"string\">\"mDoubleTapReloadRecognizer\"</span>);</div><div class=\"line\">            field.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">            field.set(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> DoubleTapReloadRecognizer());</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (BuildConfig.DEBUG &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M &amp;&amp; !Settings.canDrawOverlays(mActivity)) &#123;</div><div class=\"line\">            TextView textView = <span class=\"keyword\">new</span> TextView(mActivity);</div><div class=\"line\">            textView.setLayoutParams(<span class=\"keyword\">new</span> LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));</div><div class=\"line\">            textView.setText(RNCacheViewManager.REDBOX_PERMISSION_MESSAGE + <span class=\"string\">\"\\nPlease exit the app and grant again\"</span>);</div><div class=\"line\">            textView.setTextColor(Color.rgb(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>));</div><div class=\"line\">            mActivity.setContentView(textView);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            loadApp(<span class=\"keyword\">null</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        RNCacheViewManager.onDestroy(mActivity);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">loadApp</span><span class=\"params\">(String appKey)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mReactRootView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Cannot loadApp while app is already running.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//从缓存中读取初始化好的ReactRootView,如果不为空直接进行加载</span></div><div class=\"line\">        ReactRootView reactRootView = RNCacheViewManager.getRootView(mActivity);</div><div class=\"line\">        <span class=\"comment\">// 在 xml 中其实添加了一个 framLayout 作为 rn rootview 的载体</span></div><div class=\"line\">        FrameLayout frameLayout = mActivity.findViewById(R.id.rn_rootView);</div><div class=\"line\">        <span class=\"keyword\">if</span>(reactRootView == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            mReactRootView = createRootView();</div><div class=\"line\">            mReactRootView.startReactApplication(</div><div class=\"line\">                    getReactNativeHost().getReactInstanceManager(),</div><div class=\"line\">                    appKey,</div><div class=\"line\">                    getLaunchOptions());</div><div class=\"line\">            frameLayout.addView(mReactRootView);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            frameLayout.addView(reactRootView);</div><div class=\"line\">        &#125;</div><div class=\"line\">        frameLayout.setVisibility(View.VISIBLE);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>某些小 app 可能就一个 activity ，所以启动页可以使用 windowBackground 替代。而目前大部分 app 的 hybrid 开发的，前面的页面基本都是 native， 这样就会导致打开后，第一时间看到的并不是 windowBackground，而是空白的 activity，所以这个时候需要先人为添加一个 contentView，然后再加载完 reactRootView 后，add 到 我们的 contentView 的节点中。</p>\n<h3 id=\"CacheViewManager\">CacheViewManager</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RNCacheViewManager</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REQUEST_OVERLAY_PERMISSION_CODE = <span class=\"number\">1111</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String REDBOX_PERMISSION_MESSAGE =</div><div class=\"line\">            <span class=\"string\">\"Overlay permissions needs to be granted in order for react native apps to run in dev mode\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReactRootView mRootView = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ReactRootView <span class=\"title\">getRootView</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mRootView.getContext() <span class=\"keyword\">instanceof</span> MutableContextWrapper) &#123;</div><div class=\"line\">            ((MutableContextWrapper) mRootView.getContext()).setBaseContext(</div><div class=\"line\">                    activity</div><div class=\"line\">            );</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> mRootView;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ReactNativeHost <span class=\"title\">getReactNativeHost</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ((ReactApplication) activity.getApplication()).getReactNativeHost();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(Activity act, String moduleName, Bundle lauchOptions)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> needsOverlayPermission = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mRootView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (BuildConfig.DEBUG &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M &amp;&amp; !Settings.canDrawOverlays(act)) &#123;</div><div class=\"line\">            needsOverlayPermission = <span class=\"keyword\">true</span>;</div><div class=\"line\">            Intent serviceIntent = <span class=\"keyword\">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(<span class=\"string\">\"package:\"</span> + act.getPackageName()));</div><div class=\"line\">            FLog.w(ReactConstants.TAG, REDBOX_PERMISSION_MESSAGE);</div><div class=\"line\">            Toast.makeText(act, REDBOX_PERMISSION_MESSAGE, Toast.LENGTH_LONG).show();</div><div class=\"line\">            act.startActivityForResult(serviceIntent, REQUEST_OVERLAY_PERMISSION_CODE);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!needsOverlayPermission) &#123;</div><div class=\"line\">            mRootView = <span class=\"keyword\">new</span> ReactRootView(<span class=\"keyword\">new</span> MutableContextWrapper(act.getApplicationContext()));</div><div class=\"line\">            mRootView.startReactApplication(</div><div class=\"line\">                    getReactNativeHost(act).getReactInstanceManager(),</div><div class=\"line\">                    moduleName,</div><div class=\"line\">                    lauchOptions);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 不能再调用原有的销毁方法，否则rn初始化出来的对象会被销毁,同时</div><div class=\"line\">     * 在ReactActivity销毁后，我们需要把 view从父视图中移除。</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ReactRootView reactRootView = getRootView(activity);</div><div class=\"line\">            <span class=\"keyword\">if</span> (reactRootView.getContext() <span class=\"keyword\">instanceof</span> MutableContextWrapper) &#123;</div><div class=\"line\">                ((MutableContextWrapper) reactRootView.getContext()).setBaseContext(</div><div class=\"line\">                        activity.getApplicationContext()</div><div class=\"line\">                );</div><div class=\"line\">            &#125;</div><div class=\"line\">            ViewParent parent = getRootView(activity).getParent();</div><div class=\"line\">            <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>)</div><div class=\"line\">                ((android.view.ViewGroup) parent).removeView(getRootView(activity));</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这边使用了 <code>MutableContextWrapper</code>，是因为 rn 加载的 activity 和 预加载的 activity 不是同一个 activity，这样会导致 js 中的 modal ，也就是 android 中的 dialog，会提示 activity 已销毁，无法弹出。所以在 init 的时候，是使用 <code>MutableContextWrapper</code>，而在 getRootView 的时候，再重新 setBaseContext ，把真正的容器 activity 设置进去。这样就能保证 dialog 弹出的 是在当前的 activity。</p>\n<h3 id=\"使用\">使用</h3><p>在前置 activity 中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 在 startActivity 前调用这个，时机自己把握</span></div><div class=\"line\">RNCacheViewManager.init(<span class=\"keyword\">this</span>, <span class=\"string\">\"DataPlusReactNative\"</span>, <span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure>\n<p>在 reactActivity 中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> ReactActivityDelegate <span class=\"title\">createReactActivityDelegate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DPReactActivityDelegate(<span class=\"keyword\">this</span>, getMainComponentName());</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>使用自定义的 delegate 就好了。</p>\n<h2 id=\"总结\">总结</h2><p>这样做可以灵活的显示 reactRootView 未加载完之前要显示的界面。效果也挺明显的，但是我比较懒，就不贴图啦。</p>\n","excerpt":"","more":"<p>预加载的方案和原理网上其实也有非常多。我先简单的贴一下代码</p>\n<h3 id=\"Delegate\">Delegate</h3><p>需要两个新增的类： 一个是继承 <code>ReactActivityDelegate</code> 用于承载 Rn 的 activity 重写 <code>createReactActivityDelegate</code> 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DPReactActivityDelegate</span> <span class=\"keyword\">extends</span> <span class=\"title\">ReactActivityDelegate</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Activity mActivity;</div><div class=\"line\">    <span class=\"keyword\">private</span> String mMainComponentName;</div><div class=\"line\">    <span class=\"keyword\">private</span> ReactRootView mReactRootView;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DPReactActivityDelegate</span><span class=\"params\">(Activity activity, @Nullable String mainComponentName)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(activity, mainComponentName);</div><div class=\"line\">        mActivity = activity;</div><div class=\"line\">        mMainComponentName = mainComponentName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 先设置一个 contentView，保证加载的时候不是白屏</span></div><div class=\"line\">        mActivity.setContentView(R.layout.activity_launch);</div><div class=\"line\">        Class&lt;ReactActivityDelegate&gt; clazz = ReactActivityDelegate.class;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            Field field = clazz.getDeclaredField(<span class=\"string\">\"mDoubleTapReloadRecognizer\"</span>);</div><div class=\"line\">            field.setAccessible(<span class=\"keyword\">true</span>);</div><div class=\"line\">            field.set(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> DoubleTapReloadRecognizer());</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (BuildConfig.DEBUG &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M &amp;&amp; !Settings.canDrawOverlays(mActivity)) &#123;</div><div class=\"line\">            TextView textView = <span class=\"keyword\">new</span> TextView(mActivity);</div><div class=\"line\">            textView.setLayoutParams(<span class=\"keyword\">new</span> LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));</div><div class=\"line\">            textView.setText(RNCacheViewManager.REDBOX_PERMISSION_MESSAGE + <span class=\"string\">\"\\nPlease exit the app and grant again\"</span>);</div><div class=\"line\">            textView.setTextColor(Color.rgb(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>));</div><div class=\"line\">            mActivity.setContentView(textView);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            loadApp(<span class=\"keyword\">null</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        RNCacheViewManager.onDestroy(mActivity);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">loadApp</span><span class=\"params\">(String appKey)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mReactRootView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Cannot loadApp while app is already running.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//从缓存中读取初始化好的ReactRootView,如果不为空直接进行加载</span></div><div class=\"line\">        ReactRootView reactRootView = RNCacheViewManager.getRootView(mActivity);</div><div class=\"line\">        <span class=\"comment\">// 在 xml 中其实添加了一个 framLayout 作为 rn rootview 的载体</span></div><div class=\"line\">        FrameLayout frameLayout = mActivity.findViewById(R.id.rn_rootView);</div><div class=\"line\">        <span class=\"keyword\">if</span>(reactRootView == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            mReactRootView = createRootView();</div><div class=\"line\">            mReactRootView.startReactApplication(</div><div class=\"line\">                    getReactNativeHost().getReactInstanceManager(),</div><div class=\"line\">                    appKey,</div><div class=\"line\">                    getLaunchOptions());</div><div class=\"line\">            frameLayout.addView(mReactRootView);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            frameLayout.addView(reactRootView);</div><div class=\"line\">        &#125;</div><div class=\"line\">        frameLayout.setVisibility(View.VISIBLE);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>某些小 app 可能就一个 activity ，所以启动页可以使用 windowBackground 替代。而目前大部分 app 的 hybrid 开发的，前面的页面基本都是 native， 这样就会导致打开后，第一时间看到的并不是 windowBackground，而是空白的 activity，所以这个时候需要先人为添加一个 contentView，然后再加载完 reactRootView 后，add 到 我们的 contentView 的节点中。</p>\n<h3 id=\"CacheViewManager\">CacheViewManager</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RNCacheViewManager</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REQUEST_OVERLAY_PERMISSION_CODE = <span class=\"number\">1111</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String REDBOX_PERMISSION_MESSAGE =</div><div class=\"line\">            <span class=\"string\">\"Overlay permissions needs to be granted in order for react native apps to run in dev mode\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReactRootView mRootView = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ReactRootView <span class=\"title\">getRootView</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mRootView.getContext() <span class=\"keyword\">instanceof</span> MutableContextWrapper) &#123;</div><div class=\"line\">            ((MutableContextWrapper) mRootView.getContext()).setBaseContext(</div><div class=\"line\">                    activity</div><div class=\"line\">            );</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> mRootView;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ReactNativeHost <span class=\"title\">getReactNativeHost</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ((ReactApplication) activity.getApplication()).getReactNativeHost();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(Activity act, String moduleName, Bundle lauchOptions)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> needsOverlayPermission = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mRootView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (BuildConfig.DEBUG &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M &amp;&amp; !Settings.canDrawOverlays(act)) &#123;</div><div class=\"line\">            needsOverlayPermission = <span class=\"keyword\">true</span>;</div><div class=\"line\">            Intent serviceIntent = <span class=\"keyword\">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(<span class=\"string\">\"package:\"</span> + act.getPackageName()));</div><div class=\"line\">            FLog.w(ReactConstants.TAG, REDBOX_PERMISSION_MESSAGE);</div><div class=\"line\">            Toast.makeText(act, REDBOX_PERMISSION_MESSAGE, Toast.LENGTH_LONG).show();</div><div class=\"line\">            act.startActivityForResult(serviceIntent, REQUEST_OVERLAY_PERMISSION_CODE);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!needsOverlayPermission) &#123;</div><div class=\"line\">            mRootView = <span class=\"keyword\">new</span> ReactRootView(<span class=\"keyword\">new</span> MutableContextWrapper(act.getApplicationContext()));</div><div class=\"line\">            mRootView.startReactApplication(</div><div class=\"line\">                    getReactNativeHost(act).getReactInstanceManager(),</div><div class=\"line\">                    moduleName,</div><div class=\"line\">                    lauchOptions);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 不能再调用原有的销毁方法，否则rn初始化出来的对象会被销毁,同时</div><div class=\"line\">     * 在ReactActivity销毁后，我们需要把 view从父视图中移除。</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">(Activity activity)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            ReactRootView reactRootView = getRootView(activity);</div><div class=\"line\">            <span class=\"keyword\">if</span> (reactRootView.getContext() <span class=\"keyword\">instanceof</span> MutableContextWrapper) &#123;</div><div class=\"line\">                ((MutableContextWrapper) reactRootView.getContext()).setBaseContext(</div><div class=\"line\">                        activity.getApplicationContext()</div><div class=\"line\">                );</div><div class=\"line\">            &#125;</div><div class=\"line\">            ViewParent parent = getRootView(activity).getParent();</div><div class=\"line\">            <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>)</div><div class=\"line\">                ((android.view.ViewGroup) parent).removeView(getRootView(activity));</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这边使用了 <code>MutableContextWrapper</code>，是因为 rn 加载的 activity 和 预加载的 activity 不是同一个 activity，这样会导致 js 中的 modal ，也就是 android 中的 dialog，会提示 activity 已销毁，无法弹出。所以在 init 的时候，是使用 <code>MutableContextWrapper</code>，而在 getRootView 的时候，再重新 setBaseContext ，把真正的容器 activity 设置进去。这样就能保证 dialog 弹出的 是在当前的 activity。</p>\n<h3 id=\"使用\">使用</h3><p>在前置 activity 中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">// 在 startActivity 前调用这个，时机自己把握</span></div><div class=\"line\">RNCacheViewManager.init(<span class=\"keyword\">this</span>, <span class=\"string\">\"DataPlusReactNative\"</span>, <span class=\"keyword\">null</span>);</div></pre></td></tr></table></figure>\n<p>在 reactActivity 中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> ReactActivityDelegate <span class=\"title\">createReactActivityDelegate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DPReactActivityDelegate(<span class=\"keyword\">this</span>, getMainComponentName());</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>使用自定义的 delegate 就好了。</p>\n<h2 id=\"总结\">总结</h2><p>这样做可以灵活的显示 reactRootView 未加载完之前要显示的界面。效果也挺明显的，但是我比较懒，就不贴图啦。</p>\n"},{"title":"从什么都不懂开始(四)——Git掌握时空之力","date":"2016-07-22T08:12:51.000Z","_content":"\n看到这篇标题是不是有种很叼的感觉！？在Git的工作流程中，不仅能往前走，当然也可以后退。不仅能提交\n文件，当然也能删除或者修改了。而且你想回到哪个提交节点就回到哪个提交节点，\n是不是觉得自己体内的洪荒之力快抑制不住了？\n\n别急，容我短话长说，一一道来。\n\n在这真正讲这些也需要普及一个概念：工作区和暂存区\n\n# 工作区和暂存区\n\n如果有同学对这些概念感觉很懵逼，也没什么关系，不影响你的使用，只要扫一眼接下来的两个标题，\n就不会影响理解这篇的内容了。\n\n另外如果有同学想深入理解这个概念的原理，可以自行去Google搜一下。\n\n## 工作区\n\n比如你正在写代码，那么你当前的编译器界面的那些代码都属于工作区里的。\n\n## 暂存区\n\n当你在你的git工程里创建了一个新文件，并且执行了`git add [File Name]`，\n那么这个新的文件就都被add进了暂存区。\n\n在已经提交过的代码里做修改，还不在暂存区，执行`git status`，会发现这些修改过的文件提示需要add，add后会进入暂存区。\n\n当你执行commit的时候，就是把暂存区的代码一次性提交到本地版本库上。\n\n![暂存区和工作区](http://7xvy2g.com1.z0.glb.clouddn.com/%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA%E5%89%AF%E6%9C%AC.png)\n\n# 技能树\n\n## reset\n\nreset这个词从翻译上来说叫做重置，我觉得用回档这个词比较好理解，每次commit都会有个log记录，相当于游戏中的**存档**啦，然后你可以使用reset，回档到某个记录。\n\n### 几个常用的方式\n\n#### git reset [HEAD] [FileName]\n我经常用到这个命令，因为我在提交时，总是不小心把某些写到一半的文件也顺手给提交上去了。\n先不说效果是什么，给你们演示一下：\n\n先把之前修改的提交了：\n\n![先提交](http://7xvy2g.com1.z0.glb.clouddn.com/reset-commit.png)\n\n修改一下工作区的代码，再执行`git diff` 查看当前修改了什么：\n\n![修改](http://7xvy2g.com1.z0.glb.clouddn.com/reset-commit-first.png)\n\n然后执行`git log`查看我们当前的提交日志：\n\n![提交日志](http://7xvy2g.com1.z0.glb.clouddn.com/head.png)\n\n用**红色标起来**的就是**[HEAD]** ，看下面的\"test for reset commit\"，是我们刚才提交的，所以需要的下面那个HEAD。\n\n执行 `git reset ebd535064bd1b2a2739b40c3a9356ce4c0fd6cba app/src/main/java/heh/MasterCodeTest.java `：\n\n![执行reset](http://7xvy2g.com1.z0.glb.clouddn.com/reset.png)\n\n在执行`git diff`，看到这次的结果和之前第一次diff不同：\n![diff](http://7xvy2g.com1.z0.glb.clouddn.com/diff.png)\n\n以上操作只是回档某个文件，所以log并不会变。\n\n我每次提交不小心带上了些不该提交的文件，就用这个命令撤销一些提交。\n\n##### git reset [HEAD]\n\n如果执行的时候不带最后个[fileName]，那么所有文件都会回到那次提交的节点。\n\n如果直接执行 `git reset ebd535064bd1b2a2739b40c3a9356ce4c0fd6cba`\n再执行`git log`，看到刚刚我们提交的\"test for reset commit\"已经没了：\n![reset log](http://7xvy2g.com1.z0.glb.clouddn.com/log-after-reset.png)\n\n刚才所有的reset都只是把head指向了当前branch的指定commit仅此而已，可以执行`git status`，发现还是需要把修改add到暂存区。\n\n默认的都是不写模式 **-- mixed** 模式\n\n##### git reset --hard\n\n这个用法和刚才的类似，就是多了个--hard，意味着你工作区的代码也会回档，和暂存区保持一致，都回到了那个节点的commit时的状态。\n\n##### git reset --soft\n--soft，意味着工作区不会收到影响，并且修改的文件也进入了暂存区，执行git status 发现没有东西需要add到暂存区。\n\n## revert\n\n憋着急，先往下看，最后会解释的。\n\n执行 `git revert ebd535064bd1b2a2739b40c3a9356ce4c0fd6cba`\n\n![revert](http://7xvy2g.com1.z0.glb.clouddn.com/git-revert.png)\n\n代码会出现冲突的现象，因为两次结果不一样：\n\n![merge](http://7xvy2g.com1.z0.glb.clouddn.com/revert-merge.png)\n\n合并完代码，add再commit会出现如下提示：\n\n![commit-revert](http://7xvy2g.com1.z0.glb.clouddn.com/commit-revert.png)\n\nrevert 和 reset 的功能是类似的，区别就是revert不会改变log，而reset会撤销log。\nrevert需要一个新的commit记录这次revert。如果没冲突，那么会自动commit；如果有冲突，则会需要解决冲突后手动commit\n\n一句话总结就是revert只是撤销某次commit，其他的commit和整个log记录不会受到影响，而reset会干掉某次commit之后的所有commit，包括log。\n\n## checkout\n\n在上一节的分支操作里也讲过这个命令，是切换分支用的，而在这里将会讲解用checkout命令起到撤回的作用。\n\n### git checkout [fileName]\n或者\n`git checkout -- [fileName]`\n在提交过的文件里随便新增一行，然后在命令行中输入`git status`\n会出现如下图所示：\n\n![git status](http://7xvy2g.com1.z0.glb.clouddn.com/%E6%96%B0%E5%A2%9E%E7%9A%84.png)\n\n说明当前修改还未进入暂存区，还是在工作区，这个时候执行\n`git checkout [你的文件绝对路径]`：\n\n![checkout](http://7xvy2g.com1.z0.glb.clouddn.com/checkout-filename.png)\n\n为什么用绝对路径呢，就是避免你的文件名和branch名一样，结果就切换到分支上了。加上 **--** 后面的就一定是文件了\n\n### git checkout [commit] [fileName]\n\n该命令就是将某个文件的暂存区和工作区都回撤到某个commit节点上。\n\n### git checkout .\n\n注意到 checkout 后面有个\".\"，就是代表所有文件的意思把所有文件都撤回刚才在工作区上的改动。\n\n## log\n\n这个命令在之前的例子总经常用到，就是看提交日志用的。\n之前从同事那边学来一条黑科技命令：\n\n` git log --oneline --decorate --graph --all`\n\n用一下就知道效果了，不了解里面参数的执行`git log --help`\n查看文档。\n\n## rm\n\n这个命令linux中也有，就是删除文件或者移动的意思。\n\n在git中也是这个意思。\n\n如果你在本地物理删除了一堆文件，但是没有执行`git rm `，那么其实这些文件还是在git系统里的，在git project中直接执行`git rm` 删除要你删的文件，提交之后就可以完成删除了。\n\n# 总结\n\n写到这里把git的回撤、查看的功能都写完了，大家应该也有一个比较系统的认知了，具体还是需要多在项目中应用。\n希望大家能一起讨论，共同学习进步！\n\n欢迎加入QQ群：568863373。\n\n---\n欢迎关注我们的公众号：`魔都三帅`，欢迎大家来投稿~\n\n![公众号](http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg)\n","source":"_posts/gitrevert.md","raw":"title: 从什么都不懂开始(四)——Git掌握时空之力\ndate: 2016-07-22 16:12:51\ncategories:\n- 实践\ntags:\n- Git\n- 版本控制\n---\n\n看到这篇标题是不是有种很叼的感觉！？在Git的工作流程中，不仅能往前走，当然也可以后退。不仅能提交\n文件，当然也能删除或者修改了。而且你想回到哪个提交节点就回到哪个提交节点，\n是不是觉得自己体内的洪荒之力快抑制不住了？\n\n别急，容我短话长说，一一道来。\n\n在这真正讲这些也需要普及一个概念：工作区和暂存区\n\n# 工作区和暂存区\n\n如果有同学对这些概念感觉很懵逼，也没什么关系，不影响你的使用，只要扫一眼接下来的两个标题，\n就不会影响理解这篇的内容了。\n\n另外如果有同学想深入理解这个概念的原理，可以自行去Google搜一下。\n\n## 工作区\n\n比如你正在写代码，那么你当前的编译器界面的那些代码都属于工作区里的。\n\n## 暂存区\n\n当你在你的git工程里创建了一个新文件，并且执行了`git add [File Name]`，\n那么这个新的文件就都被add进了暂存区。\n\n在已经提交过的代码里做修改，还不在暂存区，执行`git status`，会发现这些修改过的文件提示需要add，add后会进入暂存区。\n\n当你执行commit的时候，就是把暂存区的代码一次性提交到本地版本库上。\n\n![暂存区和工作区](http://7xvy2g.com1.z0.glb.clouddn.com/%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA%E5%89%AF%E6%9C%AC.png)\n\n# 技能树\n\n## reset\n\nreset这个词从翻译上来说叫做重置，我觉得用回档这个词比较好理解，每次commit都会有个log记录，相当于游戏中的**存档**啦，然后你可以使用reset，回档到某个记录。\n\n### 几个常用的方式\n\n#### git reset [HEAD] [FileName]\n我经常用到这个命令，因为我在提交时，总是不小心把某些写到一半的文件也顺手给提交上去了。\n先不说效果是什么，给你们演示一下：\n\n先把之前修改的提交了：\n\n![先提交](http://7xvy2g.com1.z0.glb.clouddn.com/reset-commit.png)\n\n修改一下工作区的代码，再执行`git diff` 查看当前修改了什么：\n\n![修改](http://7xvy2g.com1.z0.glb.clouddn.com/reset-commit-first.png)\n\n然后执行`git log`查看我们当前的提交日志：\n\n![提交日志](http://7xvy2g.com1.z0.glb.clouddn.com/head.png)\n\n用**红色标起来**的就是**[HEAD]** ，看下面的\"test for reset commit\"，是我们刚才提交的，所以需要的下面那个HEAD。\n\n执行 `git reset ebd535064bd1b2a2739b40c3a9356ce4c0fd6cba app/src/main/java/heh/MasterCodeTest.java `：\n\n![执行reset](http://7xvy2g.com1.z0.glb.clouddn.com/reset.png)\n\n在执行`git diff`，看到这次的结果和之前第一次diff不同：\n![diff](http://7xvy2g.com1.z0.glb.clouddn.com/diff.png)\n\n以上操作只是回档某个文件，所以log并不会变。\n\n我每次提交不小心带上了些不该提交的文件，就用这个命令撤销一些提交。\n\n##### git reset [HEAD]\n\n如果执行的时候不带最后个[fileName]，那么所有文件都会回到那次提交的节点。\n\n如果直接执行 `git reset ebd535064bd1b2a2739b40c3a9356ce4c0fd6cba`\n再执行`git log`，看到刚刚我们提交的\"test for reset commit\"已经没了：\n![reset log](http://7xvy2g.com1.z0.glb.clouddn.com/log-after-reset.png)\n\n刚才所有的reset都只是把head指向了当前branch的指定commit仅此而已，可以执行`git status`，发现还是需要把修改add到暂存区。\n\n默认的都是不写模式 **-- mixed** 模式\n\n##### git reset --hard\n\n这个用法和刚才的类似，就是多了个--hard，意味着你工作区的代码也会回档，和暂存区保持一致，都回到了那个节点的commit时的状态。\n\n##### git reset --soft\n--soft，意味着工作区不会收到影响，并且修改的文件也进入了暂存区，执行git status 发现没有东西需要add到暂存区。\n\n## revert\n\n憋着急，先往下看，最后会解释的。\n\n执行 `git revert ebd535064bd1b2a2739b40c3a9356ce4c0fd6cba`\n\n![revert](http://7xvy2g.com1.z0.glb.clouddn.com/git-revert.png)\n\n代码会出现冲突的现象，因为两次结果不一样：\n\n![merge](http://7xvy2g.com1.z0.glb.clouddn.com/revert-merge.png)\n\n合并完代码，add再commit会出现如下提示：\n\n![commit-revert](http://7xvy2g.com1.z0.glb.clouddn.com/commit-revert.png)\n\nrevert 和 reset 的功能是类似的，区别就是revert不会改变log，而reset会撤销log。\nrevert需要一个新的commit记录这次revert。如果没冲突，那么会自动commit；如果有冲突，则会需要解决冲突后手动commit\n\n一句话总结就是revert只是撤销某次commit，其他的commit和整个log记录不会受到影响，而reset会干掉某次commit之后的所有commit，包括log。\n\n## checkout\n\n在上一节的分支操作里也讲过这个命令，是切换分支用的，而在这里将会讲解用checkout命令起到撤回的作用。\n\n### git checkout [fileName]\n或者\n`git checkout -- [fileName]`\n在提交过的文件里随便新增一行，然后在命令行中输入`git status`\n会出现如下图所示：\n\n![git status](http://7xvy2g.com1.z0.glb.clouddn.com/%E6%96%B0%E5%A2%9E%E7%9A%84.png)\n\n说明当前修改还未进入暂存区，还是在工作区，这个时候执行\n`git checkout [你的文件绝对路径]`：\n\n![checkout](http://7xvy2g.com1.z0.glb.clouddn.com/checkout-filename.png)\n\n为什么用绝对路径呢，就是避免你的文件名和branch名一样，结果就切换到分支上了。加上 **--** 后面的就一定是文件了\n\n### git checkout [commit] [fileName]\n\n该命令就是将某个文件的暂存区和工作区都回撤到某个commit节点上。\n\n### git checkout .\n\n注意到 checkout 后面有个\".\"，就是代表所有文件的意思把所有文件都撤回刚才在工作区上的改动。\n\n## log\n\n这个命令在之前的例子总经常用到，就是看提交日志用的。\n之前从同事那边学来一条黑科技命令：\n\n` git log --oneline --decorate --graph --all`\n\n用一下就知道效果了，不了解里面参数的执行`git log --help`\n查看文档。\n\n## rm\n\n这个命令linux中也有，就是删除文件或者移动的意思。\n\n在git中也是这个意思。\n\n如果你在本地物理删除了一堆文件，但是没有执行`git rm `，那么其实这些文件还是在git系统里的，在git project中直接执行`git rm` 删除要你删的文件，提交之后就可以完成删除了。\n\n# 总结\n\n写到这里把git的回撤、查看的功能都写完了，大家应该也有一个比较系统的认知了，具体还是需要多在项目中应用。\n希望大家能一起讨论，共同学习进步！\n\n欢迎加入QQ群：568863373。\n\n---\n欢迎关注我们的公众号：`魔都三帅`，欢迎大家来投稿~\n\n![公众号](http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg)\n","slug":"gitrevert","published":1,"updated":"2016-07-29T03:51:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tihr8100114irrb1posdbl","content":"<p>看到这篇标题是不是有种很叼的感觉！？在Git的工作流程中，不仅能往前走，当然也可以后退。不仅能提交<br>文件，当然也能删除或者修改了。而且你想回到哪个提交节点就回到哪个提交节点，<br>是不是觉得自己体内的洪荒之力快抑制不住了？</p>\n<p>别急，容我短话长说，一一道来。</p>\n<p>在这真正讲这些也需要普及一个概念：工作区和暂存区</p>\n<h1 id=\"工作区和暂存区\">工作区和暂存区</h1><p>如果有同学对这些概念感觉很懵逼，也没什么关系，不影响你的使用，只要扫一眼接下来的两个标题，<br>就不会影响理解这篇的内容了。</p>\n<p>另外如果有同学想深入理解这个概念的原理，可以自行去Google搜一下。</p>\n<h2 id=\"工作区\">工作区</h2><p>比如你正在写代码，那么你当前的编译器界面的那些代码都属于工作区里的。</p>\n<h2 id=\"暂存区\">暂存区</h2><p>当你在你的git工程里创建了一个新文件，并且执行了<code>git add [File Name]</code>，<br>那么这个新的文件就都被add进了暂存区。</p>\n<p>在已经提交过的代码里做修改，还不在暂存区，执行<code>git status</code>，会发现这些修改过的文件提示需要add，add后会进入暂存区。</p>\n<p>当你执行commit的时候，就是把暂存区的代码一次性提交到本地版本库上。</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA%E5%89%AF%E6%9C%AC.png\" alt=\"暂存区和工作区\"></p>\n<h1 id=\"技能树\">技能树</h1><h2 id=\"reset\">reset</h2><p>reset这个词从翻译上来说叫做重置，我觉得用回档这个词比较好理解，每次commit都会有个log记录，相当于游戏中的<strong>存档</strong>啦，然后你可以使用reset，回档到某个记录。</p>\n<h3 id=\"几个常用的方式\">几个常用的方式</h3><h4 id=\"git_reset_[HEAD]_[FileName]\">git reset [HEAD] [FileName]</h4><p>我经常用到这个命令，因为我在提交时，总是不小心把某些写到一半的文件也顺手给提交上去了。<br>先不说效果是什么，给你们演示一下：</p>\n<p>先把之前修改的提交了：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/reset-commit.png\" alt=\"先提交\"></p>\n<p>修改一下工作区的代码，再执行<code>git diff</code> 查看当前修改了什么：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/reset-commit-first.png\" alt=\"修改\"></p>\n<p>然后执行<code>git log</code>查看我们当前的提交日志：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/head.png\" alt=\"提交日志\"></p>\n<p>用<strong>红色标起来</strong>的就是<strong>[HEAD]</strong> ，看下面的”test for reset commit”，是我们刚才提交的，所以需要的下面那个HEAD。</p>\n<p>执行 <code>git reset ebd535064bd1b2a2739b40c3a9356ce4c0fd6cba app/src/main/java/heh/MasterCodeTest.java</code>：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/reset.png\" alt=\"执行reset\"></p>\n<p>在执行<code>git diff</code>，看到这次的结果和之前第一次diff不同：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/diff.png\" alt=\"diff\"></p>\n<p>以上操作只是回档某个文件，所以log并不会变。</p>\n<p>我每次提交不小心带上了些不该提交的文件，就用这个命令撤销一些提交。</p>\n<h5 id=\"git_reset_[HEAD]\">git reset [HEAD]</h5><p>如果执行的时候不带最后个[fileName]，那么所有文件都会回到那次提交的节点。</p>\n<p>如果直接执行 <code>git reset ebd535064bd1b2a2739b40c3a9356ce4c0fd6cba</code><br>再执行<code>git log</code>，看到刚刚我们提交的”test for reset commit”已经没了：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/log-after-reset.png\" alt=\"reset log\"></p>\n<p>刚才所有的reset都只是把head指向了当前branch的指定commit仅此而已，可以执行<code>git status</code>，发现还是需要把修改add到暂存区。</p>\n<p>默认的都是不写模式 <strong>– mixed</strong> 模式</p>\n<h5 id=\"git_reset_–hard\">git reset –hard</h5><p>这个用法和刚才的类似，就是多了个–hard，意味着你工作区的代码也会回档，和暂存区保持一致，都回到了那个节点的commit时的状态。</p>\n<h5 id=\"git_reset_–soft\">git reset –soft</h5><p>–soft，意味着工作区不会收到影响，并且修改的文件也进入了暂存区，执行git status 发现没有东西需要add到暂存区。</p>\n<h2 id=\"revert\">revert</h2><p>憋着急，先往下看，最后会解释的。</p>\n<p>执行 <code>git revert ebd535064bd1b2a2739b40c3a9356ce4c0fd6cba</code></p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/git-revert.png\" alt=\"revert\"></p>\n<p>代码会出现冲突的现象，因为两次结果不一样：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/revert-merge.png\" alt=\"merge\"></p>\n<p>合并完代码，add再commit会出现如下提示：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/commit-revert.png\" alt=\"commit-revert\"></p>\n<p>revert 和 reset 的功能是类似的，区别就是revert不会改变log，而reset会撤销log。<br>revert需要一个新的commit记录这次revert。如果没冲突，那么会自动commit；如果有冲突，则会需要解决冲突后手动commit</p>\n<p>一句话总结就是revert只是撤销某次commit，其他的commit和整个log记录不会受到影响，而reset会干掉某次commit之后的所有commit，包括log。</p>\n<h2 id=\"checkout\">checkout</h2><p>在上一节的分支操作里也讲过这个命令，是切换分支用的，而在这里将会讲解用checkout命令起到撤回的作用。</p>\n<h3 id=\"git_checkout_[fileName]\">git checkout [fileName]</h3><p>或者<br><code>git checkout -- [fileName]</code><br>在提交过的文件里随便新增一行，然后在命令行中输入<code>git status</code><br>会出现如下图所示：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E6%96%B0%E5%A2%9E%E7%9A%84.png\" alt=\"git status\"></p>\n<p>说明当前修改还未进入暂存区，还是在工作区，这个时候执行<br><code>git checkout [你的文件绝对路径]</code>：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/checkout-filename.png\" alt=\"checkout\"></p>\n<p>为什么用绝对路径呢，就是避免你的文件名和branch名一样，结果就切换到分支上了。加上 <strong>–</strong> 后面的就一定是文件了</p>\n<h3 id=\"git_checkout_[commit]_[fileName]\">git checkout [commit] [fileName]</h3><p>该命令就是将某个文件的暂存区和工作区都回撤到某个commit节点上。</p>\n<h3 id=\"git_checkout_-\">git checkout .</h3><p>注意到 checkout 后面有个”.”，就是代表所有文件的意思把所有文件都撤回刚才在工作区上的改动。</p>\n<h2 id=\"log\">log</h2><p>这个命令在之前的例子总经常用到，就是看提交日志用的。<br>之前从同事那边学来一条黑科技命令：</p>\n<p><code>git log --oneline --decorate --graph --all</code></p>\n<p>用一下就知道效果了，不了解里面参数的执行<code>git log --help</code><br>查看文档。</p>\n<h2 id=\"rm\">rm</h2><p>这个命令linux中也有，就是删除文件或者移动的意思。</p>\n<p>在git中也是这个意思。</p>\n<p>如果你在本地物理删除了一堆文件，但是没有执行<code>git rm</code>，那么其实这些文件还是在git系统里的，在git project中直接执行<code>git rm</code> 删除要你删的文件，提交之后就可以完成删除了。</p>\n<h1 id=\"总结\">总结</h1><p>写到这里把git的回撤、查看的功能都写完了，大家应该也有一个比较系统的认知了，具体还是需要多在项目中应用。<br>希望大家能一起讨论，共同学习进步！</p>\n<p>欢迎加入QQ群：568863373。</p>\n<hr>\n<p>欢迎关注我们的公众号：<code>魔都三帅</code>，欢迎大家来投稿~</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg\" alt=\"公众号\"></p>\n","excerpt":"","more":"<p>看到这篇标题是不是有种很叼的感觉！？在Git的工作流程中，不仅能往前走，当然也可以后退。不仅能提交<br>文件，当然也能删除或者修改了。而且你想回到哪个提交节点就回到哪个提交节点，<br>是不是觉得自己体内的洪荒之力快抑制不住了？</p>\n<p>别急，容我短话长说，一一道来。</p>\n<p>在这真正讲这些也需要普及一个概念：工作区和暂存区</p>\n<h1 id=\"工作区和暂存区\">工作区和暂存区</h1><p>如果有同学对这些概念感觉很懵逼，也没什么关系，不影响你的使用，只要扫一眼接下来的两个标题，<br>就不会影响理解这篇的内容了。</p>\n<p>另外如果有同学想深入理解这个概念的原理，可以自行去Google搜一下。</p>\n<h2 id=\"工作区\">工作区</h2><p>比如你正在写代码，那么你当前的编译器界面的那些代码都属于工作区里的。</p>\n<h2 id=\"暂存区\">暂存区</h2><p>当你在你的git工程里创建了一个新文件，并且执行了<code>git add [File Name]</code>，<br>那么这个新的文件就都被add进了暂存区。</p>\n<p>在已经提交过的代码里做修改，还不在暂存区，执行<code>git status</code>，会发现这些修改过的文件提示需要add，add后会进入暂存区。</p>\n<p>当你执行commit的时候，就是把暂存区的代码一次性提交到本地版本库上。</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA%E5%89%AF%E6%9C%AC.png\" alt=\"暂存区和工作区\"></p>\n<h1 id=\"技能树\">技能树</h1><h2 id=\"reset\">reset</h2><p>reset这个词从翻译上来说叫做重置，我觉得用回档这个词比较好理解，每次commit都会有个log记录，相当于游戏中的<strong>存档</strong>啦，然后你可以使用reset，回档到某个记录。</p>\n<h3 id=\"几个常用的方式\">几个常用的方式</h3><h4 id=\"git_reset_[HEAD]_[FileName]\">git reset [HEAD] [FileName]</h4><p>我经常用到这个命令，因为我在提交时，总是不小心把某些写到一半的文件也顺手给提交上去了。<br>先不说效果是什么，给你们演示一下：</p>\n<p>先把之前修改的提交了：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/reset-commit.png\" alt=\"先提交\"></p>\n<p>修改一下工作区的代码，再执行<code>git diff</code> 查看当前修改了什么：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/reset-commit-first.png\" alt=\"修改\"></p>\n<p>然后执行<code>git log</code>查看我们当前的提交日志：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/head.png\" alt=\"提交日志\"></p>\n<p>用<strong>红色标起来</strong>的就是<strong>[HEAD]</strong> ，看下面的”test for reset commit”，是我们刚才提交的，所以需要的下面那个HEAD。</p>\n<p>执行 <code>git reset ebd535064bd1b2a2739b40c3a9356ce4c0fd6cba app/src/main/java/heh/MasterCodeTest.java</code>：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/reset.png\" alt=\"执行reset\"></p>\n<p>在执行<code>git diff</code>，看到这次的结果和之前第一次diff不同：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/diff.png\" alt=\"diff\"></p>\n<p>以上操作只是回档某个文件，所以log并不会变。</p>\n<p>我每次提交不小心带上了些不该提交的文件，就用这个命令撤销一些提交。</p>\n<h5 id=\"git_reset_[HEAD]\">git reset [HEAD]</h5><p>如果执行的时候不带最后个[fileName]，那么所有文件都会回到那次提交的节点。</p>\n<p>如果直接执行 <code>git reset ebd535064bd1b2a2739b40c3a9356ce4c0fd6cba</code><br>再执行<code>git log</code>，看到刚刚我们提交的”test for reset commit”已经没了：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/log-after-reset.png\" alt=\"reset log\"></p>\n<p>刚才所有的reset都只是把head指向了当前branch的指定commit仅此而已，可以执行<code>git status</code>，发现还是需要把修改add到暂存区。</p>\n<p>默认的都是不写模式 <strong>– mixed</strong> 模式</p>\n<h5 id=\"git_reset_–hard\">git reset –hard</h5><p>这个用法和刚才的类似，就是多了个–hard，意味着你工作区的代码也会回档，和暂存区保持一致，都回到了那个节点的commit时的状态。</p>\n<h5 id=\"git_reset_–soft\">git reset –soft</h5><p>–soft，意味着工作区不会收到影响，并且修改的文件也进入了暂存区，执行git status 发现没有东西需要add到暂存区。</p>\n<h2 id=\"revert\">revert</h2><p>憋着急，先往下看，最后会解释的。</p>\n<p>执行 <code>git revert ebd535064bd1b2a2739b40c3a9356ce4c0fd6cba</code></p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/git-revert.png\" alt=\"revert\"></p>\n<p>代码会出现冲突的现象，因为两次结果不一样：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/revert-merge.png\" alt=\"merge\"></p>\n<p>合并完代码，add再commit会出现如下提示：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/commit-revert.png\" alt=\"commit-revert\"></p>\n<p>revert 和 reset 的功能是类似的，区别就是revert不会改变log，而reset会撤销log。<br>revert需要一个新的commit记录这次revert。如果没冲突，那么会自动commit；如果有冲突，则会需要解决冲突后手动commit</p>\n<p>一句话总结就是revert只是撤销某次commit，其他的commit和整个log记录不会受到影响，而reset会干掉某次commit之后的所有commit，包括log。</p>\n<h2 id=\"checkout\">checkout</h2><p>在上一节的分支操作里也讲过这个命令，是切换分支用的，而在这里将会讲解用checkout命令起到撤回的作用。</p>\n<h3 id=\"git_checkout_[fileName]\">git checkout [fileName]</h3><p>或者<br><code>git checkout -- [fileName]</code><br>在提交过的文件里随便新增一行，然后在命令行中输入<code>git status</code><br>会出现如下图所示：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E6%96%B0%E5%A2%9E%E7%9A%84.png\" alt=\"git status\"></p>\n<p>说明当前修改还未进入暂存区，还是在工作区，这个时候执行<br><code>git checkout [你的文件绝对路径]</code>：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/checkout-filename.png\" alt=\"checkout\"></p>\n<p>为什么用绝对路径呢，就是避免你的文件名和branch名一样，结果就切换到分支上了。加上 <strong>–</strong> 后面的就一定是文件了</p>\n<h3 id=\"git_checkout_[commit]_[fileName]\">git checkout [commit] [fileName]</h3><p>该命令就是将某个文件的暂存区和工作区都回撤到某个commit节点上。</p>\n<h3 id=\"git_checkout_-\">git checkout .</h3><p>注意到 checkout 后面有个”.”，就是代表所有文件的意思把所有文件都撤回刚才在工作区上的改动。</p>\n<h2 id=\"log\">log</h2><p>这个命令在之前的例子总经常用到，就是看提交日志用的。<br>之前从同事那边学来一条黑科技命令：</p>\n<p><code>git log --oneline --decorate --graph --all</code></p>\n<p>用一下就知道效果了，不了解里面参数的执行<code>git log --help</code><br>查看文档。</p>\n<h2 id=\"rm\">rm</h2><p>这个命令linux中也有，就是删除文件或者移动的意思。</p>\n<p>在git中也是这个意思。</p>\n<p>如果你在本地物理删除了一堆文件，但是没有执行<code>git rm</code>，那么其实这些文件还是在git系统里的，在git project中直接执行<code>git rm</code> 删除要你删的文件，提交之后就可以完成删除了。</p>\n<h1 id=\"总结\">总结</h1><p>写到这里把git的回撤、查看的功能都写完了，大家应该也有一个比较系统的认知了，具体还是需要多在项目中应用。<br>希望大家能一起讨论，共同学习进步！</p>\n<p>欢迎加入QQ群：568863373。</p>\n<hr>\n<p>欢迎关注我们的公众号：<code>魔都三帅</code>，欢迎大家来投稿~</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg\" alt=\"公众号\"></p>\n"},{"title":"从什么都不懂开始(二)——创建Project提交到Github需要做什么","date":"2016-07-11T14:06:03.000Z","_content":"\n# 背景\n接上篇，在理解什么是git后，总需要动手操作一下，还是那句话~针对Git很熟练的大牛们可以点击返回或者关闭啦~\n\n## 在看这篇文章之前你得准备好什么？\n1、注册好的你Gihub账号\n2、在setting里的SSH里有你电脑的SSHKey了。\n3、准备好你自己需要放在git的文件夹\n如果不会以上1、2两点的同学，请自行Google或者Baidu。\n\n\n## 将你的Project初始化成GitProject\n\n以下将以AndroidProject为例子\n\n新建一个AndroidProject后的文件夹内容是这样的：\n\n![AndroidProject](http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-0%402x.png)\n不要在意.gitignore一会儿会讲到\n在命令行执行如下命令：\n\n`git init`\n\n![gitinit](http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-1%402x.png)\n\n看到提示初始化了一个空的Git repository，再来看下我们刚刚的文件夹：\n![ini后的文件内容](http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-2%402x.png)\n\n发现多了一个.git文件夹，至于里面的内容大家可以看一\n下\n[http://gitready.com/advanced/2009/03/23/whats-inside-your-git-directory.html](http://gitready.com/advanced/2009/03/23/whats-inside-your-git-directory.html)\n这篇文章很棒！\n\n## 讲你的Project提交到Github\n\n1、在Github新建一个repository\n2、打开编译器，编辑最外面的.gitignore,如果没有就新建一个这样的文件，添加一些需要忽略的文件，比如.iml,/.idea之类的，AndroidStudio有提供.gitignore插件,这是编译器生成的.gitignore\n![.gitignore](http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-4%402x.png)\n3、在命令行执行\n`git add .` 这个命令是为了让你把所有的项目add到本地的缓存区\n在执行add之前打开编译器可以看到![add之前](http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-3%402x.png)所有的文件都是红色的，看到灰色的了吗，这个是.gitingore起到了作用。\n执行完add后![执行完add后](http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-5%402x.png)所有文件都变成了绿色\n4、接下来执行`git commit -m \"commit my project\"`\n这句话是什么意思呢，就是把当前add过的文件提交到本地仓库，如何查看刚才add过的文件呢，在执行commit之前执行`git status`\n![git status](http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-6%402x.png)\n这个`git status` 就是查看当前状态下的git文件\n那么到这里为止，我们就把所有文件提交到了本地仓库(这个概念会在下节解释)。\n5、现在再看看编译器里的所有文件，是不是都变白了呢？\n别忘啦，把本地仓库和远程的仓库关联起来。执行`git remote add origin yourUrl`，这个yourUrl就是你的远程仓库，刚刚新建号的，我的是：git remote add origin git@github.com:nimengbo/GitDemo.git，那么我就执行`git remote add origin git@github.com:nimengbo/GitDemo.git`\n6、最后再执行`git push -u origin master`\n就能在远程仓库看到你自己的代码啦。\n\n## 使用编译器提交代码\n\n![使用编译器提交代码](http://7xvy2g.com1.z0.glb.clouddn.com/6E6BB6AD-6DED-408D-B94A-2DD0E4C1A0E4.png)\n这上面的几个点就是我们刚刚执行到的add、commit、push了\n\n# 总结\n这一篇讲怎么在Github上新建仓库，以及把本地的代码push上去。那么现在对整个流程有一个大概的认知了。下一篇将比较偏理论，会讲一些本地工作区，以及几个经常用到的命令都是做什么的。\n\n最近大帅的开了个QQ实践群（568863373），欢迎大家一起讨论，也可以关注我们的公众号：`魔都三帅`\n\n![公众号](http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg)\n","source":"_posts/createYourRepository.md","raw":"title: 从什么都不懂开始(二)——创建Project提交到Github需要做什么\ndate: 2016-07-11 22:06:03\ncategories:\n- 学习\ntags:\n- Git\n- 版本控制\n---\n\n# 背景\n接上篇，在理解什么是git后，总需要动手操作一下，还是那句话~针对Git很熟练的大牛们可以点击返回或者关闭啦~\n\n## 在看这篇文章之前你得准备好什么？\n1、注册好的你Gihub账号\n2、在setting里的SSH里有你电脑的SSHKey了。\n3、准备好你自己需要放在git的文件夹\n如果不会以上1、2两点的同学，请自行Google或者Baidu。\n\n\n## 将你的Project初始化成GitProject\n\n以下将以AndroidProject为例子\n\n新建一个AndroidProject后的文件夹内容是这样的：\n\n![AndroidProject](http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-0%402x.png)\n不要在意.gitignore一会儿会讲到\n在命令行执行如下命令：\n\n`git init`\n\n![gitinit](http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-1%402x.png)\n\n看到提示初始化了一个空的Git repository，再来看下我们刚刚的文件夹：\n![ini后的文件内容](http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-2%402x.png)\n\n发现多了一个.git文件夹，至于里面的内容大家可以看一\n下\n[http://gitready.com/advanced/2009/03/23/whats-inside-your-git-directory.html](http://gitready.com/advanced/2009/03/23/whats-inside-your-git-directory.html)\n这篇文章很棒！\n\n## 讲你的Project提交到Github\n\n1、在Github新建一个repository\n2、打开编译器，编辑最外面的.gitignore,如果没有就新建一个这样的文件，添加一些需要忽略的文件，比如.iml,/.idea之类的，AndroidStudio有提供.gitignore插件,这是编译器生成的.gitignore\n![.gitignore](http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-4%402x.png)\n3、在命令行执行\n`git add .` 这个命令是为了让你把所有的项目add到本地的缓存区\n在执行add之前打开编译器可以看到![add之前](http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-3%402x.png)所有的文件都是红色的，看到灰色的了吗，这个是.gitingore起到了作用。\n执行完add后![执行完add后](http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-5%402x.png)所有文件都变成了绿色\n4、接下来执行`git commit -m \"commit my project\"`\n这句话是什么意思呢，就是把当前add过的文件提交到本地仓库，如何查看刚才add过的文件呢，在执行commit之前执行`git status`\n![git status](http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-6%402x.png)\n这个`git status` 就是查看当前状态下的git文件\n那么到这里为止，我们就把所有文件提交到了本地仓库(这个概念会在下节解释)。\n5、现在再看看编译器里的所有文件，是不是都变白了呢？\n别忘啦，把本地仓库和远程的仓库关联起来。执行`git remote add origin yourUrl`，这个yourUrl就是你的远程仓库，刚刚新建号的，我的是：git remote add origin git@github.com:nimengbo/GitDemo.git，那么我就执行`git remote add origin git@github.com:nimengbo/GitDemo.git`\n6、最后再执行`git push -u origin master`\n就能在远程仓库看到你自己的代码啦。\n\n## 使用编译器提交代码\n\n![使用编译器提交代码](http://7xvy2g.com1.z0.glb.clouddn.com/6E6BB6AD-6DED-408D-B94A-2DD0E4C1A0E4.png)\n这上面的几个点就是我们刚刚执行到的add、commit、push了\n\n# 总结\n这一篇讲怎么在Github上新建仓库，以及把本地的代码push上去。那么现在对整个流程有一个大概的认知了。下一篇将比较偏理论，会讲一些本地工作区，以及几个经常用到的命令都是做什么的。\n\n最近大帅的开了个QQ实践群（568863373），欢迎大家一起讨论，也可以关注我们的公众号：`魔都三帅`\n\n![公众号](http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg)\n","slug":"createYourRepository","published":1,"updated":"2016-07-21T03:44:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tihr8200134irr0dyi1im4","content":"<h1 id=\"背景\">背景</h1><p>接上篇，在理解什么是git后，总需要动手操作一下，还是那句话~针对Git很熟练的大牛们可以点击返回或者关闭啦~</p>\n<h2 id=\"在看这篇文章之前你得准备好什么？\">在看这篇文章之前你得准备好什么？</h2><p>1、注册好的你Gihub账号<br>2、在setting里的SSH里有你电脑的SSHKey了。<br>3、准备好你自己需要放在git的文件夹<br>如果不会以上1、2两点的同学，请自行Google或者Baidu。</p>\n<h2 id=\"将你的Project初始化成GitProject\">将你的Project初始化成GitProject</h2><p>以下将以AndroidProject为例子</p>\n<p>新建一个AndroidProject后的文件夹内容是这样的：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-0%402x.png\" alt=\"AndroidProject\"><br>不要在意.gitignore一会儿会讲到<br>在命令行执行如下命令：</p>\n<p><code>git init</code></p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-1%402x.png\" alt=\"gitinit\"></p>\n<p>看到提示初始化了一个空的Git repository，再来看下我们刚刚的文件夹：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-2%402x.png\" alt=\"ini后的文件内容\"></p>\n<p>发现多了一个.git文件夹，至于里面的内容大家可以看一<br>下<br><a href=\"http://gitready.com/advanced/2009/03/23/whats-inside-your-git-directory.html\" target=\"_blank\" rel=\"external\">http://gitready.com/advanced/2009/03/23/whats-inside-your-git-directory.html</a><br>这篇文章很棒！</p>\n<h2 id=\"讲你的Project提交到Github\">讲你的Project提交到Github</h2><p>1、在Github新建一个repository<br>2、打开编译器，编辑最外面的.gitignore,如果没有就新建一个这样的文件，添加一些需要忽略的文件，比如.iml,/.idea之类的，AndroidStudio有提供.gitignore插件,这是编译器生成的.gitignore<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-4%402x.png\" alt=\".gitignore\"><br>3、在命令行执行<br><code>git add .</code> 这个命令是为了让你把所有的项目add到本地的缓存区<br>在执行add之前打开编译器可以看到<img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-3%402x.png\" alt=\"add之前\">所有的文件都是红色的，看到灰色的了吗，这个是.gitingore起到了作用。<br>执行完add后<img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-5%402x.png\" alt=\"执行完add后\">所有文件都变成了绿色<br>4、接下来执行<code>git commit -m &quot;commit my project&quot;</code><br>这句话是什么意思呢，就是把当前add过的文件提交到本地仓库，如何查看刚才add过的文件呢，在执行commit之前执行<code>git status</code><br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-6%402x.png\" alt=\"git status\"><br>这个<code>git status</code> 就是查看当前状态下的git文件<br>那么到这里为止，我们就把所有文件提交到了本地仓库(这个概念会在下节解释)。<br>5、现在再看看编译器里的所有文件，是不是都变白了呢？<br>别忘啦，把本地仓库和远程的仓库关联起来。执行<code>git remote add origin yourUrl</code>，这个yourUrl就是你的远程仓库，刚刚新建号的，我的是：git remote add origin git@github.com:nimengbo/GitDemo.git，那么我就执行<code>git remote add origin git@github.com:nimengbo/GitDemo.git</code><br>6、最后再执行<code>git push -u origin master</code><br>就能在远程仓库看到你自己的代码啦。</p>\n<h2 id=\"使用编译器提交代码\">使用编译器提交代码</h2><p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/6E6BB6AD-6DED-408D-B94A-2DD0E4C1A0E4.png\" alt=\"使用编译器提交代码\"><br>这上面的几个点就是我们刚刚执行到的add、commit、push了</p>\n<h1 id=\"总结\">总结</h1><p>这一篇讲怎么在Github上新建仓库，以及把本地的代码push上去。那么现在对整个流程有一个大概的认知了。下一篇将比较偏理论，会讲一些本地工作区，以及几个经常用到的命令都是做什么的。</p>\n<p>最近大帅的开了个QQ实践群（568863373），欢迎大家一起讨论，也可以关注我们的公众号：<code>魔都三帅</code></p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg\" alt=\"公众号\"></p>\n","excerpt":"","more":"<h1 id=\"背景\">背景</h1><p>接上篇，在理解什么是git后，总需要动手操作一下，还是那句话~针对Git很熟练的大牛们可以点击返回或者关闭啦~</p>\n<h2 id=\"在看这篇文章之前你得准备好什么？\">在看这篇文章之前你得准备好什么？</h2><p>1、注册好的你Gihub账号<br>2、在setting里的SSH里有你电脑的SSHKey了。<br>3、准备好你自己需要放在git的文件夹<br>如果不会以上1、2两点的同学，请自行Google或者Baidu。</p>\n<h2 id=\"将你的Project初始化成GitProject\">将你的Project初始化成GitProject</h2><p>以下将以AndroidProject为例子</p>\n<p>新建一个AndroidProject后的文件夹内容是这样的：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-0%402x.png\" alt=\"AndroidProject\"><br>不要在意.gitignore一会儿会讲到<br>在命令行执行如下命令：</p>\n<p><code>git init</code></p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-1%402x.png\" alt=\"gitinit\"></p>\n<p>看到提示初始化了一个空的Git repository，再来看下我们刚刚的文件夹：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-2%402x.png\" alt=\"ini后的文件内容\"></p>\n<p>发现多了一个.git文件夹，至于里面的内容大家可以看一<br>下<br><a href=\"http://gitready.com/advanced/2009/03/23/whats-inside-your-git-directory.html\">http://gitready.com/advanced/2009/03/23/whats-inside-your-git-directory.html</a><br>这篇文章很棒！</p>\n<h2 id=\"讲你的Project提交到Github\">讲你的Project提交到Github</h2><p>1、在Github新建一个repository<br>2、打开编译器，编辑最外面的.gitignore,如果没有就新建一个这样的文件，添加一些需要忽略的文件，比如.iml,/.idea之类的，AndroidStudio有提供.gitignore插件,这是编译器生成的.gitignore<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-4%402x.png\" alt=\".gitignore\"><br>3、在命令行执行<br><code>git add .</code> 这个命令是为了让你把所有的项目add到本地的缓存区<br>在执行add之前打开编译器可以看到<img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-3%402x.png\" alt=\"add之前\">所有的文件都是红色的，看到灰色的了吗，这个是.gitingore起到了作用。<br>执行完add后<img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-5%402x.png\" alt=\"执行完add后\">所有文件都变成了绿色<br>4、接下来执行<code>git commit -m &quot;commit my project&quot;</code><br>这句话是什么意思呢，就是把当前add过的文件提交到本地仓库，如何查看刚才add过的文件呢，在执行commit之前执行<code>git status</code><br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/QQ20160711-6%402x.png\" alt=\"git status\"><br>这个<code>git status</code> 就是查看当前状态下的git文件<br>那么到这里为止，我们就把所有文件提交到了本地仓库(这个概念会在下节解释)。<br>5、现在再看看编译器里的所有文件，是不是都变白了呢？<br>别忘啦，把本地仓库和远程的仓库关联起来。执行<code>git remote add origin yourUrl</code>，这个yourUrl就是你的远程仓库，刚刚新建号的，我的是：git remote add origin git@github.com:nimengbo/GitDemo.git，那么我就执行<code>git remote add origin git@github.com:nimengbo/GitDemo.git</code><br>6、最后再执行<code>git push -u origin master</code><br>就能在远程仓库看到你自己的代码啦。</p>\n<h2 id=\"使用编译器提交代码\">使用编译器提交代码</h2><p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/6E6BB6AD-6DED-408D-B94A-2DD0E4C1A0E4.png\" alt=\"使用编译器提交代码\"><br>这上面的几个点就是我们刚刚执行到的add、commit、push了</p>\n<h1 id=\"总结\">总结</h1><p>这一篇讲怎么在Github上新建仓库，以及把本地的代码push上去。那么现在对整个流程有一个大概的认知了。下一篇将比较偏理论，会讲一些本地工作区，以及几个经常用到的命令都是做什么的。</p>\n<p>最近大帅的开了个QQ实践群（568863373），欢迎大家一起讨论，也可以关注我们的公众号：<code>魔都三帅</code></p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg\" alt=\"公众号\"></p>\n"},{"title":"事件分发之现学现用","date":"2016-02-01T08:46:13.000Z","_content":"# 简介\n在公司做的第一个需求就是给购物车列表加上侧滑删除(真想吐槽这交互)，我说可以引入代码家的库，然后他们说项目里有一个了。打开一看，居然是鲍老师的[SwipeMenuListView](https://github.com/baoyongzhang/SwipeMenuListView)(已经不维护了)，而且引入后就一直没更新，满足不了现在的需求，又有业务冲突，正好那段时间看了开发艺术与探索中的事件分发章节，发现只需要在现有的基础上做一些拦截事件就能满足业务了。\n\n# 问题与需求\n\n1. Item的有效滑动区域只有空白区域，也就是说如果item上有别的控件，那么就不能滑动\n2. 如果列表有header，滑动区域会出错\n3. 列表里的滑动删除，只有一个能打开\n\n# 解决方法\n## 问题1、3的解决思路：\n1：引起的原因是在down时，down事件被子view获取了。那么解决方案就出来了，在父布局直接判断是否是在横向移动，并且拦截就可以了。\n3：在每次down的时候判断一下当前是否有open状态\n在onInterceptTouchEvent中处理判断是否需要拦截\n\nonInterceptTouchEvent  的down事件：\n```java\npublic boolean onInterceptTouchEvent(MotionEvent ev) {\n        int action = ev.getAction();\n        switch (action) {\n              case MotionEvent.ACTION_DOWN:\n              mDownX = ev.getX();\n              mDownY = ev.getY();\n              boolean handled = super.onInterceptTouchEvent(ev);\n              mTouchState = TOUCH_STATE_NONE;\n              mTouchPosition = pointToPosition((int) ev.getX(), (int) ev.getY());\n              View view = getChildAt(mTouchPosition - getFirstVisiblePosition());\n\n              //只在空的时候赋值 以免每次触摸都赋值，会有多个open状态\n              if (view instanceof SwipeMenuLayout) {\n                  //如果有打开了 就拦截.\n                  if (mTouchView != null && mTouchView.isOpen() && !inRangeOfView(mTouchView.getMenuView(), ev)) {\n                      return true;\n                  }\n                  mTouchView = (SwipeMenuLayout) view;\n                  mTouchView.setSwipeDirection(mDirection);\n              }\n              //如果摸在另外个view\n              if (mTouchView != null && mTouchView.isOpen() && view != mTouchView) {\n                  handled = true;\n              }\n\n              if (mTouchView != null) {\n                  mTouchView.onSwipe(ev);\n              }\n              return handled;\n\n              ......\n      }\n}\n```\n在down的时候判断之前是否有一个swiplayout打开的，如果有，就拦截操作。从而解决了问题3。\n\n**这里return true后，会由onTouchEvent的MotionEvent.ACTION_DOWN执行，事件流的传递过程就不在这里赘述了。**\n\nonInterceptTouchEvent  的move事件：\n```java\npublic boolean onInterceptTouchEvent(MotionEvent ev) {\n        int action = ev.getAction();\n        switch (action) {\n        .......\n        case MotionEvent.ACTION_MOVE:\n        float dy = Math.abs((ev.getY() - mDownY));\n        float dx = Math.abs((ev.getX() - mDownX));\n        if (Math.abs(dy) > MAX_Y || Math.abs(dx) > MAX_X) {\n            //每次拦截的down都把触摸状态设置成了TOUCH_STATE_NONE 只有返回true才会走onTouchEvent 所以写在这里就够了\n            if (mTouchState == TOUCH_STATE_NONE) {\n                if (Math.abs(dy) > MAX_Y) {\n                    mTouchState = TOUCH_STATE_Y;\n                } else if (dx > MAX_X) {\n                    mTouchState = TOUCH_STATE_X;\n                    if (mOnSwipeListener != null) {\n                        mOnSwipeListener.onSwipeStart(mTouchPosition);\n                    }\n                }\n            }\n            return true;\n        }\n      }\n}\n```\n就是在移动距离超过一个常量值，就可以判断在移动，并拦截。1的问题也得到了解决。\n### 这里return true后，会由onTouchEvent的MotionEvent.ACTION_MOVE执行###\n\n2的问题，只需要在onTouchEvent的move事件里减去header就好了。\n\n```java\n\n@Override\n public boolean onTouchEvent(MotionEvent ev) {\n     if (ev.getAction() != MotionEvent.ACTION_DOWN && mTouchView == null)\n         return super.onTouchEvent(ev);\n     int action = ev.getAction();\n     switch (action) {\n        ......\n         case MotionEvent.ACTION_MOVE:\n             //有些可能有header,要减去header再判断\n             mTouchPosition = pointToPosition((int) ev.getX(), (int) ev.getY()) - getHeaderViewsCount();\n             //如果滑动了一下没完全展现，就收回去，这时候mTouchView已经赋值，再滑动另外一个不可以swip的view\n             //会导致mTouchView swip 。 所以要用位置判断是否滑动的是一个view\n             if (!mTouchView.getSwipEnable() || mTouchPosition != mTouchView.getPosition()) {\n                 break;\n             }\n             float dy = Math.abs((ev.getY() - mDownY));\n             float dx = Math.abs((ev.getX() - mDownX));\n             if (mTouchState == TOUCH_STATE_X) {\n                 if (mTouchView != null) {\n                     mTouchView.onSwipe(ev);\n                 }\n                 getSelector().setState(new int[]{0});\n                 ev.setAction(MotionEvent.ACTION_CANCEL);\n                 super.onTouchEvent(ev);\n                 return true;\n             } else if (mTouchState == TOUCH_STATE_NONE) {\n                 if (Math.abs(dy) > MAX_Y) {\n                     mTouchState = TOUCH_STATE_Y;\n                 } else if (dx > MAX_X) {\n                     mTouchState = TOUCH_STATE_X;\n                     if (mOnSwipeListener != null) {\n                         mOnSwipeListener.onSwipeStart(mTouchPosition);\n                     }\n                 }\n             }\n             break;\n         .......\n     return super.onTouchEvent(ev);\n }\n```\n\n### 其实只要理解了事件流的传递过程，那么需要在什么地方做什么事就很清晰，再就是耐心的打log，尝试，就能成功了！\n","source":"_posts/事件分发之现学现用.md","raw":"title: 事件分发之现学现用\ndate: 2016-02-01 16:46:13\ncategories:\n- 学习经验\ntags:\n- Android\n- TouchEvent\n---\n# 简介\n在公司做的第一个需求就是给购物车列表加上侧滑删除(真想吐槽这交互)，我说可以引入代码家的库，然后他们说项目里有一个了。打开一看，居然是鲍老师的[SwipeMenuListView](https://github.com/baoyongzhang/SwipeMenuListView)(已经不维护了)，而且引入后就一直没更新，满足不了现在的需求，又有业务冲突，正好那段时间看了开发艺术与探索中的事件分发章节，发现只需要在现有的基础上做一些拦截事件就能满足业务了。\n\n# 问题与需求\n\n1. Item的有效滑动区域只有空白区域，也就是说如果item上有别的控件，那么就不能滑动\n2. 如果列表有header，滑动区域会出错\n3. 列表里的滑动删除，只有一个能打开\n\n# 解决方法\n## 问题1、3的解决思路：\n1：引起的原因是在down时，down事件被子view获取了。那么解决方案就出来了，在父布局直接判断是否是在横向移动，并且拦截就可以了。\n3：在每次down的时候判断一下当前是否有open状态\n在onInterceptTouchEvent中处理判断是否需要拦截\n\nonInterceptTouchEvent  的down事件：\n```java\npublic boolean onInterceptTouchEvent(MotionEvent ev) {\n        int action = ev.getAction();\n        switch (action) {\n              case MotionEvent.ACTION_DOWN:\n              mDownX = ev.getX();\n              mDownY = ev.getY();\n              boolean handled = super.onInterceptTouchEvent(ev);\n              mTouchState = TOUCH_STATE_NONE;\n              mTouchPosition = pointToPosition((int) ev.getX(), (int) ev.getY());\n              View view = getChildAt(mTouchPosition - getFirstVisiblePosition());\n\n              //只在空的时候赋值 以免每次触摸都赋值，会有多个open状态\n              if (view instanceof SwipeMenuLayout) {\n                  //如果有打开了 就拦截.\n                  if (mTouchView != null && mTouchView.isOpen() && !inRangeOfView(mTouchView.getMenuView(), ev)) {\n                      return true;\n                  }\n                  mTouchView = (SwipeMenuLayout) view;\n                  mTouchView.setSwipeDirection(mDirection);\n              }\n              //如果摸在另外个view\n              if (mTouchView != null && mTouchView.isOpen() && view != mTouchView) {\n                  handled = true;\n              }\n\n              if (mTouchView != null) {\n                  mTouchView.onSwipe(ev);\n              }\n              return handled;\n\n              ......\n      }\n}\n```\n在down的时候判断之前是否有一个swiplayout打开的，如果有，就拦截操作。从而解决了问题3。\n\n**这里return true后，会由onTouchEvent的MotionEvent.ACTION_DOWN执行，事件流的传递过程就不在这里赘述了。**\n\nonInterceptTouchEvent  的move事件：\n```java\npublic boolean onInterceptTouchEvent(MotionEvent ev) {\n        int action = ev.getAction();\n        switch (action) {\n        .......\n        case MotionEvent.ACTION_MOVE:\n        float dy = Math.abs((ev.getY() - mDownY));\n        float dx = Math.abs((ev.getX() - mDownX));\n        if (Math.abs(dy) > MAX_Y || Math.abs(dx) > MAX_X) {\n            //每次拦截的down都把触摸状态设置成了TOUCH_STATE_NONE 只有返回true才会走onTouchEvent 所以写在这里就够了\n            if (mTouchState == TOUCH_STATE_NONE) {\n                if (Math.abs(dy) > MAX_Y) {\n                    mTouchState = TOUCH_STATE_Y;\n                } else if (dx > MAX_X) {\n                    mTouchState = TOUCH_STATE_X;\n                    if (mOnSwipeListener != null) {\n                        mOnSwipeListener.onSwipeStart(mTouchPosition);\n                    }\n                }\n            }\n            return true;\n        }\n      }\n}\n```\n就是在移动距离超过一个常量值，就可以判断在移动，并拦截。1的问题也得到了解决。\n### 这里return true后，会由onTouchEvent的MotionEvent.ACTION_MOVE执行###\n\n2的问题，只需要在onTouchEvent的move事件里减去header就好了。\n\n```java\n\n@Override\n public boolean onTouchEvent(MotionEvent ev) {\n     if (ev.getAction() != MotionEvent.ACTION_DOWN && mTouchView == null)\n         return super.onTouchEvent(ev);\n     int action = ev.getAction();\n     switch (action) {\n        ......\n         case MotionEvent.ACTION_MOVE:\n             //有些可能有header,要减去header再判断\n             mTouchPosition = pointToPosition((int) ev.getX(), (int) ev.getY()) - getHeaderViewsCount();\n             //如果滑动了一下没完全展现，就收回去，这时候mTouchView已经赋值，再滑动另外一个不可以swip的view\n             //会导致mTouchView swip 。 所以要用位置判断是否滑动的是一个view\n             if (!mTouchView.getSwipEnable() || mTouchPosition != mTouchView.getPosition()) {\n                 break;\n             }\n             float dy = Math.abs((ev.getY() - mDownY));\n             float dx = Math.abs((ev.getX() - mDownX));\n             if (mTouchState == TOUCH_STATE_X) {\n                 if (mTouchView != null) {\n                     mTouchView.onSwipe(ev);\n                 }\n                 getSelector().setState(new int[]{0});\n                 ev.setAction(MotionEvent.ACTION_CANCEL);\n                 super.onTouchEvent(ev);\n                 return true;\n             } else if (mTouchState == TOUCH_STATE_NONE) {\n                 if (Math.abs(dy) > MAX_Y) {\n                     mTouchState = TOUCH_STATE_Y;\n                 } else if (dx > MAX_X) {\n                     mTouchState = TOUCH_STATE_X;\n                     if (mOnSwipeListener != null) {\n                         mOnSwipeListener.onSwipeStart(mTouchPosition);\n                     }\n                 }\n             }\n             break;\n         .......\n     return super.onTouchEvent(ev);\n }\n```\n\n### 其实只要理解了事件流的传递过程，那么需要在什么地方做什么事就很清晰，再就是耐心的打log，尝试，就能成功了！\n","slug":"事件分发之现学现用","published":1,"updated":"2016-07-27T08:07:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tihr8300174irrnydx12uv","content":"<h1 id=\"简介\">简介</h1><p>在公司做的第一个需求就是给购物车列表加上侧滑删除(真想吐槽这交互)，我说可以引入代码家的库，然后他们说项目里有一个了。打开一看，居然是鲍老师的<a href=\"https://github.com/baoyongzhang/SwipeMenuListView\" target=\"_blank\" rel=\"external\">SwipeMenuListView</a>(已经不维护了)，而且引入后就一直没更新，满足不了现在的需求，又有业务冲突，正好那段时间看了开发艺术与探索中的事件分发章节，发现只需要在现有的基础上做一些拦截事件就能满足业务了。</p>\n<h1 id=\"问题与需求\">问题与需求</h1><ol>\n<li>Item的有效滑动区域只有空白区域，也就是说如果item上有别的控件，那么就不能滑动</li>\n<li>如果列表有header，滑动区域会出错</li>\n<li>列表里的滑动删除，只有一个能打开</li>\n</ol>\n<h1 id=\"解决方法\">解决方法</h1><h2 id=\"问题1、3的解决思路：\">问题1、3的解决思路：</h2><p>1：引起的原因是在down时，down事件被子view获取了。那么解决方案就出来了，在父布局直接判断是否是在横向移动，并且拦截就可以了。<br>3：在每次down的时候判断一下当前是否有open状态<br>在onInterceptTouchEvent中处理判断是否需要拦截</p>\n<p>onInterceptTouchEvent  的down事件：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> action = ev.getAction();</div><div class=\"line\">        <span class=\"keyword\">switch</span> (action) &#123;</div><div class=\"line\">              <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">              mDownX = ev.getX();</div><div class=\"line\">              mDownY = ev.getY();</div><div class=\"line\">              <span class=\"keyword\">boolean</span> handled = <span class=\"keyword\">super</span>.onInterceptTouchEvent(ev);</div><div class=\"line\">              mTouchState = TOUCH_STATE_NONE;</div><div class=\"line\">              mTouchPosition = pointToPosition((<span class=\"keyword\">int</span>) ev.getX(), (<span class=\"keyword\">int</span>) ev.getY());</div><div class=\"line\">              View view = getChildAt(mTouchPosition - getFirstVisiblePosition());</div><div class=\"line\"></div><div class=\"line\">              <span class=\"comment\">//只在空的时候赋值 以免每次触摸都赋值，会有多个open状态</span></div><div class=\"line\">              <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> SwipeMenuLayout) &#123;</div><div class=\"line\">                  <span class=\"comment\">//如果有打开了 就拦截.</span></div><div class=\"line\">                  <span class=\"keyword\">if</span> (mTouchView != <span class=\"keyword\">null</span> &amp;&amp; mTouchView.isOpen() &amp;&amp; !inRangeOfView(mTouchView.getMenuView(), ev)) &#123;</div><div class=\"line\">                      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                  &#125;</div><div class=\"line\">                  mTouchView = (SwipeMenuLayout) view;</div><div class=\"line\">                  mTouchView.setSwipeDirection(mDirection);</div><div class=\"line\">              &#125;</div><div class=\"line\">              <span class=\"comment\">//如果摸在另外个view</span></div><div class=\"line\">              <span class=\"keyword\">if</span> (mTouchView != <span class=\"keyword\">null</span> &amp;&amp; mTouchView.isOpen() &amp;&amp; view != mTouchView) &#123;</div><div class=\"line\">                  handled = <span class=\"keyword\">true</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (mTouchView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  mTouchView.onSwipe(ev);</div><div class=\"line\">              &#125;</div><div class=\"line\">              <span class=\"keyword\">return</span> handled;</div><div class=\"line\"></div><div class=\"line\">              ......</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在down的时候判断之前是否有一个swiplayout打开的，如果有，就拦截操作。从而解决了问题3。</p>\n<p><strong>这里return true后，会由onTouchEvent的MotionEvent.ACTION_DOWN执行，事件流的传递过程就不在这里赘述了。</strong></p>\n<p>onInterceptTouchEvent  的move事件：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> action = ev.getAction();</div><div class=\"line\">        <span class=\"keyword\">switch</span> (action) &#123;</div><div class=\"line\">        .......</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\">        <span class=\"keyword\">float</span> dy = Math.abs((ev.getY() - mDownY));</div><div class=\"line\">        <span class=\"keyword\">float</span> dx = Math.abs((ev.getX() - mDownX));</div><div class=\"line\">        <span class=\"keyword\">if</span> (Math.abs(dy) &gt; MAX_Y || Math.abs(dx) &gt; MAX_X) &#123;</div><div class=\"line\">            <span class=\"comment\">//每次拦截的down都把触摸状态设置成了TOUCH_STATE_NONE 只有返回true才会走onTouchEvent 所以写在这里就够了</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (mTouchState == TOUCH_STATE_NONE) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (Math.abs(dy) &gt; MAX_Y) &#123;</div><div class=\"line\">                    mTouchState = TOUCH_STATE_Y;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dx &gt; MAX_X) &#123;</div><div class=\"line\">                    mTouchState = TOUCH_STATE_X;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (mOnSwipeListener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        mOnSwipeListener.onSwipeStart(mTouchPosition);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>就是在移动距离超过一个常量值，就可以判断在移动，并拦截。1的问题也得到了解决。</p>\n<h3 id=\"这里return_true后，会由onTouchEvent的MotionEvent-ACTION_MOVE执行\">这里return true后，会由onTouchEvent的MotionEvent.ACTION_MOVE执行</h3><p>2的问题，只需要在onTouchEvent的move事件里减去header就好了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">if</span> (ev.getAction() != MotionEvent.ACTION_DOWN &amp;&amp; mTouchView == <span class=\"keyword\">null</span>)</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTouchEvent(ev);</div><div class=\"line\">     <span class=\"keyword\">int</span> action = ev.getAction();</div><div class=\"line\">     <span class=\"keyword\">switch</span> (action) &#123;</div><div class=\"line\">        ......</div><div class=\"line\">         <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\">             <span class=\"comment\">//有些可能有header,要减去header再判断</span></div><div class=\"line\">             mTouchPosition = pointToPosition((<span class=\"keyword\">int</span>) ev.getX(), (<span class=\"keyword\">int</span>) ev.getY()) - getHeaderViewsCount();</div><div class=\"line\">             <span class=\"comment\">//如果滑动了一下没完全展现，就收回去，这时候mTouchView已经赋值，再滑动另外一个不可以swip的view</span></div><div class=\"line\">             <span class=\"comment\">//会导致mTouchView swip 。 所以要用位置判断是否滑动的是一个view</span></div><div class=\"line\">             <span class=\"keyword\">if</span> (!mTouchView.getSwipEnable() || mTouchPosition != mTouchView.getPosition()) &#123;</div><div class=\"line\">                 <span class=\"keyword\">break</span>;</div><div class=\"line\">             &#125;</div><div class=\"line\">             <span class=\"keyword\">float</span> dy = Math.abs((ev.getY() - mDownY));</div><div class=\"line\">             <span class=\"keyword\">float</span> dx = Math.abs((ev.getX() - mDownX));</div><div class=\"line\">             <span class=\"keyword\">if</span> (mTouchState == TOUCH_STATE_X) &#123;</div><div class=\"line\">                 <span class=\"keyword\">if</span> (mTouchView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                     mTouchView.onSwipe(ev);</div><div class=\"line\">                 &#125;</div><div class=\"line\">                 getSelector().setState(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">0</span>&#125;);</div><div class=\"line\">                 ev.setAction(MotionEvent.ACTION_CANCEL);</div><div class=\"line\">                 <span class=\"keyword\">super</span>.onTouchEvent(ev);</div><div class=\"line\">                 <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">             &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mTouchState == TOUCH_STATE_NONE) &#123;</div><div class=\"line\">                 <span class=\"keyword\">if</span> (Math.abs(dy) &gt; MAX_Y) &#123;</div><div class=\"line\">                     mTouchState = TOUCH_STATE_Y;</div><div class=\"line\">                 &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dx &gt; MAX_X) &#123;</div><div class=\"line\">                     mTouchState = TOUCH_STATE_X;</div><div class=\"line\">                     <span class=\"keyword\">if</span> (mOnSwipeListener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                         mOnSwipeListener.onSwipeStart(mTouchPosition);</div><div class=\"line\">                     &#125;</div><div class=\"line\">                 &#125;</div><div class=\"line\">             &#125;</div><div class=\"line\">             <span class=\"keyword\">break</span>;</div><div class=\"line\">         .......</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTouchEvent(ev);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"其实只要理解了事件流的传递过程，那么需要在什么地方做什么事就很清晰，再就是耐心的打log，尝试，就能成功了！\">其实只要理解了事件流的传递过程，那么需要在什么地方做什么事就很清晰，再就是耐心的打log，尝试，就能成功了！</h3>","excerpt":"","more":"<h1 id=\"简介\">简介</h1><p>在公司做的第一个需求就是给购物车列表加上侧滑删除(真想吐槽这交互)，我说可以引入代码家的库，然后他们说项目里有一个了。打开一看，居然是鲍老师的<a href=\"https://github.com/baoyongzhang/SwipeMenuListView\">SwipeMenuListView</a>(已经不维护了)，而且引入后就一直没更新，满足不了现在的需求，又有业务冲突，正好那段时间看了开发艺术与探索中的事件分发章节，发现只需要在现有的基础上做一些拦截事件就能满足业务了。</p>\n<h1 id=\"问题与需求\">问题与需求</h1><ol>\n<li>Item的有效滑动区域只有空白区域，也就是说如果item上有别的控件，那么就不能滑动</li>\n<li>如果列表有header，滑动区域会出错</li>\n<li>列表里的滑动删除，只有一个能打开</li>\n</ol>\n<h1 id=\"解决方法\">解决方法</h1><h2 id=\"问题1、3的解决思路：\">问题1、3的解决思路：</h2><p>1：引起的原因是在down时，down事件被子view获取了。那么解决方案就出来了，在父布局直接判断是否是在横向移动，并且拦截就可以了。<br>3：在每次down的时候判断一下当前是否有open状态<br>在onInterceptTouchEvent中处理判断是否需要拦截</p>\n<p>onInterceptTouchEvent  的down事件：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> action = ev.getAction();</div><div class=\"line\">        <span class=\"keyword\">switch</span> (action) &#123;</div><div class=\"line\">              <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">              mDownX = ev.getX();</div><div class=\"line\">              mDownY = ev.getY();</div><div class=\"line\">              <span class=\"keyword\">boolean</span> handled = <span class=\"keyword\">super</span>.onInterceptTouchEvent(ev);</div><div class=\"line\">              mTouchState = TOUCH_STATE_NONE;</div><div class=\"line\">              mTouchPosition = pointToPosition((<span class=\"keyword\">int</span>) ev.getX(), (<span class=\"keyword\">int</span>) ev.getY());</div><div class=\"line\">              View view = getChildAt(mTouchPosition - getFirstVisiblePosition());</div><div class=\"line\"></div><div class=\"line\">              <span class=\"comment\">//只在空的时候赋值 以免每次触摸都赋值，会有多个open状态</span></div><div class=\"line\">              <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> SwipeMenuLayout) &#123;</div><div class=\"line\">                  <span class=\"comment\">//如果有打开了 就拦截.</span></div><div class=\"line\">                  <span class=\"keyword\">if</span> (mTouchView != <span class=\"keyword\">null</span> &amp;&amp; mTouchView.isOpen() &amp;&amp; !inRangeOfView(mTouchView.getMenuView(), ev)) &#123;</div><div class=\"line\">                      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                  &#125;</div><div class=\"line\">                  mTouchView = (SwipeMenuLayout) view;</div><div class=\"line\">                  mTouchView.setSwipeDirection(mDirection);</div><div class=\"line\">              &#125;</div><div class=\"line\">              <span class=\"comment\">//如果摸在另外个view</span></div><div class=\"line\">              <span class=\"keyword\">if</span> (mTouchView != <span class=\"keyword\">null</span> &amp;&amp; mTouchView.isOpen() &amp;&amp; view != mTouchView) &#123;</div><div class=\"line\">                  handled = <span class=\"keyword\">true</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (mTouchView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                  mTouchView.onSwipe(ev);</div><div class=\"line\">              &#125;</div><div class=\"line\">              <span class=\"keyword\">return</span> handled;</div><div class=\"line\"></div><div class=\"line\">              ......</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在down的时候判断之前是否有一个swiplayout打开的，如果有，就拦截操作。从而解决了问题3。</p>\n<p><strong>这里return true后，会由onTouchEvent的MotionEvent.ACTION_DOWN执行，事件流的传递过程就不在这里赘述了。</strong></p>\n<p>onInterceptTouchEvent  的move事件：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> action = ev.getAction();</div><div class=\"line\">        <span class=\"keyword\">switch</span> (action) &#123;</div><div class=\"line\">        .......</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\">        <span class=\"keyword\">float</span> dy = Math.abs((ev.getY() - mDownY));</div><div class=\"line\">        <span class=\"keyword\">float</span> dx = Math.abs((ev.getX() - mDownX));</div><div class=\"line\">        <span class=\"keyword\">if</span> (Math.abs(dy) &gt; MAX_Y || Math.abs(dx) &gt; MAX_X) &#123;</div><div class=\"line\">            <span class=\"comment\">//每次拦截的down都把触摸状态设置成了TOUCH_STATE_NONE 只有返回true才会走onTouchEvent 所以写在这里就够了</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (mTouchState == TOUCH_STATE_NONE) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (Math.abs(dy) &gt; MAX_Y) &#123;</div><div class=\"line\">                    mTouchState = TOUCH_STATE_Y;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dx &gt; MAX_X) &#123;</div><div class=\"line\">                    mTouchState = TOUCH_STATE_X;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (mOnSwipeListener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        mOnSwipeListener.onSwipeStart(mTouchPosition);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>就是在移动距离超过一个常量值，就可以判断在移动，并拦截。1的问题也得到了解决。</p>\n<h3 id=\"这里return_true后，会由onTouchEvent的MotionEvent-ACTION_MOVE执行\">这里return true后，会由onTouchEvent的MotionEvent.ACTION_MOVE执行</h3><p>2的问题，只需要在onTouchEvent的move事件里减去header就好了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">if</span> (ev.getAction() != MotionEvent.ACTION_DOWN &amp;&amp; mTouchView == <span class=\"keyword\">null</span>)</div><div class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTouchEvent(ev);</div><div class=\"line\">     <span class=\"keyword\">int</span> action = ev.getAction();</div><div class=\"line\">     <span class=\"keyword\">switch</span> (action) &#123;</div><div class=\"line\">        ......</div><div class=\"line\">         <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\">             <span class=\"comment\">//有些可能有header,要减去header再判断</span></div><div class=\"line\">             mTouchPosition = pointToPosition((<span class=\"keyword\">int</span>) ev.getX(), (<span class=\"keyword\">int</span>) ev.getY()) - getHeaderViewsCount();</div><div class=\"line\">             <span class=\"comment\">//如果滑动了一下没完全展现，就收回去，这时候mTouchView已经赋值，再滑动另外一个不可以swip的view</span></div><div class=\"line\">             <span class=\"comment\">//会导致mTouchView swip 。 所以要用位置判断是否滑动的是一个view</span></div><div class=\"line\">             <span class=\"keyword\">if</span> (!mTouchView.getSwipEnable() || mTouchPosition != mTouchView.getPosition()) &#123;</div><div class=\"line\">                 <span class=\"keyword\">break</span>;</div><div class=\"line\">             &#125;</div><div class=\"line\">             <span class=\"keyword\">float</span> dy = Math.abs((ev.getY() - mDownY));</div><div class=\"line\">             <span class=\"keyword\">float</span> dx = Math.abs((ev.getX() - mDownX));</div><div class=\"line\">             <span class=\"keyword\">if</span> (mTouchState == TOUCH_STATE_X) &#123;</div><div class=\"line\">                 <span class=\"keyword\">if</span> (mTouchView != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                     mTouchView.onSwipe(ev);</div><div class=\"line\">                 &#125;</div><div class=\"line\">                 getSelector().setState(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">0</span>&#125;);</div><div class=\"line\">                 ev.setAction(MotionEvent.ACTION_CANCEL);</div><div class=\"line\">                 <span class=\"keyword\">super</span>.onTouchEvent(ev);</div><div class=\"line\">                 <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">             &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mTouchState == TOUCH_STATE_NONE) &#123;</div><div class=\"line\">                 <span class=\"keyword\">if</span> (Math.abs(dy) &gt; MAX_Y) &#123;</div><div class=\"line\">                     mTouchState = TOUCH_STATE_Y;</div><div class=\"line\">                 &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dx &gt; MAX_X) &#123;</div><div class=\"line\">                     mTouchState = TOUCH_STATE_X;</div><div class=\"line\">                     <span class=\"keyword\">if</span> (mOnSwipeListener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                         mOnSwipeListener.onSwipeStart(mTouchPosition);</div><div class=\"line\">                     &#125;</div><div class=\"line\">                 &#125;</div><div class=\"line\">             &#125;</div><div class=\"line\">             <span class=\"keyword\">break</span>;</div><div class=\"line\">         .......</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTouchEvent(ev);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"其实只要理解了事件流的传递过程，那么需要在什么地方做什么事就很清晰，再就是耐心的打log，尝试，就能成功了！\">其实只要理解了事件流的传递过程，那么需要在什么地方做什么事就很清晰，再就是耐心的打log，尝试，就能成功了！</h3>"},{"title":"异乡-2015年","date":"2015-11-17T15:34:53.000Z","_content":"想想自己从2014年6月份毕业，到现在已经快一年半了。\n\n从填志愿开始就一直很向往计算机行业，现在也投身到这个行业中去了。\n\n说来也奇怪，我从没自己用过Android机，竟然会跑去做Android开发，哈哈哈，也真是命运使然。\n\n以前一直觉得后台好难，好深。随着工作中学习，学习后代入工作，发现其实Android也好难好深，真应了那句，360行，行行出状元的话。\n\n从当初一点都不懂Android开始，硬着头皮开发，真是不知道当时是怎么熬过来的，也养成了独立的习惯。\n\n一直觉得自己挺不错的，总会有一段时间自我感觉良好，然而当遇到更厉害的团队和大神时，也总是会信心受挫，这其实也是发现自身不足的缺点。\n\n特别是今年，开始积极开源，也让自己有机会认识到了好多大神，能够向他们学习。\n\n能一直在这条路走下去，其实挺开心的。\n\n而去年还在杭州，今年已经转战到上海了。\n魔都，繁华的大都市，却节奏相当快，也比较浮躁，这个处处充满着金钱的土地。\n\n昂贵的房价，落户难，还有某些桀骜不驯的上海人，对这个城市已经没有了最初刚来时的好感，可能期待的太多，结果却令人失望了吧。\n\n想想杭州虽然空气差了些，但是压力也小了好多，互联网氛围也不比上海差，如果定居的话，还是想选择在杭州吧，毕竟在上海买房，在杭州可以买2套了。\n\n路还很长，尽可能的提升自己，在将来才有更多的选择，加油！\n","source":"_posts/异乡-2015年.md","raw":"title: 异乡-2015年\ndate: 2015-11-17 23:34:53\ncategories:\n- 随笔\n---\n想想自己从2014年6月份毕业，到现在已经快一年半了。\n\n从填志愿开始就一直很向往计算机行业，现在也投身到这个行业中去了。\n\n说来也奇怪，我从没自己用过Android机，竟然会跑去做Android开发，哈哈哈，也真是命运使然。\n\n以前一直觉得后台好难，好深。随着工作中学习，学习后代入工作，发现其实Android也好难好深，真应了那句，360行，行行出状元的话。\n\n从当初一点都不懂Android开始，硬着头皮开发，真是不知道当时是怎么熬过来的，也养成了独立的习惯。\n\n一直觉得自己挺不错的，总会有一段时间自我感觉良好，然而当遇到更厉害的团队和大神时，也总是会信心受挫，这其实也是发现自身不足的缺点。\n\n特别是今年，开始积极开源，也让自己有机会认识到了好多大神，能够向他们学习。\n\n能一直在这条路走下去，其实挺开心的。\n\n而去年还在杭州，今年已经转战到上海了。\n魔都，繁华的大都市，却节奏相当快，也比较浮躁，这个处处充满着金钱的土地。\n\n昂贵的房价，落户难，还有某些桀骜不驯的上海人，对这个城市已经没有了最初刚来时的好感，可能期待的太多，结果却令人失望了吧。\n\n想想杭州虽然空气差了些，但是压力也小了好多，互联网氛围也不比上海差，如果定居的话，还是想选择在杭州吧，毕竟在上海买房，在杭州可以买2套了。\n\n路还很长，尽可能的提升自己，在将来才有更多的选择，加油！\n","slug":"异乡-2015年","published":1,"updated":"2015-11-20T09:38:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tihr84001a4irr1lueev8e","content":"<p>想想自己从2014年6月份毕业，到现在已经快一年半了。</p>\n<p>从填志愿开始就一直很向往计算机行业，现在也投身到这个行业中去了。</p>\n<p>说来也奇怪，我从没自己用过Android机，竟然会跑去做Android开发，哈哈哈，也真是命运使然。</p>\n<p>以前一直觉得后台好难，好深。随着工作中学习，学习后代入工作，发现其实Android也好难好深，真应了那句，360行，行行出状元的话。</p>\n<p>从当初一点都不懂Android开始，硬着头皮开发，真是不知道当时是怎么熬过来的，也养成了独立的习惯。</p>\n<p>一直觉得自己挺不错的，总会有一段时间自我感觉良好，然而当遇到更厉害的团队和大神时，也总是会信心受挫，这其实也是发现自身不足的缺点。</p>\n<p>特别是今年，开始积极开源，也让自己有机会认识到了好多大神，能够向他们学习。</p>\n<p>能一直在这条路走下去，其实挺开心的。</p>\n<p>而去年还在杭州，今年已经转战到上海了。<br>魔都，繁华的大都市，却节奏相当快，也比较浮躁，这个处处充满着金钱的土地。</p>\n<p>昂贵的房价，落户难，还有某些桀骜不驯的上海人，对这个城市已经没有了最初刚来时的好感，可能期待的太多，结果却令人失望了吧。</p>\n<p>想想杭州虽然空气差了些，但是压力也小了好多，互联网氛围也不比上海差，如果定居的话，还是想选择在杭州吧，毕竟在上海买房，在杭州可以买2套了。</p>\n<p>路还很长，尽可能的提升自己，在将来才有更多的选择，加油！</p>\n","excerpt":"","more":"<p>想想自己从2014年6月份毕业，到现在已经快一年半了。</p>\n<p>从填志愿开始就一直很向往计算机行业，现在也投身到这个行业中去了。</p>\n<p>说来也奇怪，我从没自己用过Android机，竟然会跑去做Android开发，哈哈哈，也真是命运使然。</p>\n<p>以前一直觉得后台好难，好深。随着工作中学习，学习后代入工作，发现其实Android也好难好深，真应了那句，360行，行行出状元的话。</p>\n<p>从当初一点都不懂Android开始，硬着头皮开发，真是不知道当时是怎么熬过来的，也养成了独立的习惯。</p>\n<p>一直觉得自己挺不错的，总会有一段时间自我感觉良好，然而当遇到更厉害的团队和大神时，也总是会信心受挫，这其实也是发现自身不足的缺点。</p>\n<p>特别是今年，开始积极开源，也让自己有机会认识到了好多大神，能够向他们学习。</p>\n<p>能一直在这条路走下去，其实挺开心的。</p>\n<p>而去年还在杭州，今年已经转战到上海了。<br>魔都，繁华的大都市，却节奏相当快，也比较浮躁，这个处处充满着金钱的土地。</p>\n<p>昂贵的房价，落户难，还有某些桀骜不驯的上海人，对这个城市已经没有了最初刚来时的好感，可能期待的太多，结果却令人失望了吧。</p>\n<p>想想杭州虽然空气差了些，但是压力也小了好多，互联网氛围也不比上海差，如果定居的话，还是想选择在杭州吧，毕竟在上海买房，在杭州可以买2套了。</p>\n<p>路还很长，尽可能的提升自己，在将来才有更多的选择，加油！</p>\n"},{"title":"从什么都不懂开始(三)—实践带你飞之Branch操作","date":"2016-07-14T16:02:42.000Z","_content":"\n本篇将介绍一下Git中经常需要操作到的东西，以及项目中运用到的场景，会稍微带一点基础知识，笔者觉得阮一峰老师的Git入门讲的非常到位了，我就不班门弄斧了，就讲一下项目中遇到的一些情况。若是Git大牛就可以点击返回或者关闭啦~\n此文多图预警~用流量的童鞋注意哦。\n\n# Repository介绍\n\n在版本管理中，Repository翻译成中文就是仓库的意思，每个提交到本地，或者push到远程服务器的Project，被Git以数据结构的形式保存，而这个数据结构被称之为Repository即仓库。\n\n对于我们来说，在Repository中，我们看的见的显示信息就是代码，而其他的比如分支信息、Commit信息、Status这些状态则通过命令行去查看。\n\n\n# Branch介绍\n\n当我们多个人合作开发的时候，为了方便管理代码，会每个组开一个Branch，而master称为主分支——主干，这些Branch则称为分支。\n\n![BranchAndMaster](http://7xvy2g.com1.z0.glb.clouddn.com/%E4%B8%BB%E5%B9%B2%E5%92%8C%E5%88%86%E6%94%AF.png)\n\n## 查看当前分支\n在命令行输入`git branch`就可以看到当前分支为master :\n![查看当前分支](http://7xvy2g.com1.z0.glb.clouddn.com/%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF.png)\n\n输入`git branch -a` 可以查看本地和远程所有分支\n![查看本地和远程所有分支](http://7xvy2g.com1.z0.glb.clouddn.com/%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF.png)\n\n\n## 切换分支\n初始化Git后，当前默认在master分支，这个时候如果你想新建一个分支，可以执行 `git branch [branchName]` 后面的[branchName]是指你的分支名。这样就能把master当前的commit信息'拎'出来，成为了一个新的分支。\n\n![新建分支](http://7xvy2g.com1.z0.glb.clouddn.com/%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF.png)\n\n执行完branch命令后，你会发现你还是在原来的分支上，在master前有一个*号表示当前分支是master，这个时候执行以下  `git checkout [branchName]`。\n![切换当前分支到testBranch](http://7xvy2g.com1.z0.glb.clouddn.com/%E5%88%87%E6%8D%A2%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E5%88%B0testBranch.png)\n其实呢，你可以执行\n`git checkout -b [branchName] [fromBranchName]` 生成新的Branch，后面这个[fromBranchName] 就是你想要从哪个分支生成新的分支，不写则是当前分支。\n\n![从当前分支检出新分支](http://7xvy2g.com1.z0.glb.clouddn.com/%E4%BB%8E%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E6%A3%80%E5%87%BA%E6%96%B0%E5%88%86%E6%94%AF.png)\n\n![从master分支检出新分支](http://7xvy2g.com1.z0.glb.clouddn.com/%E4%BB%8Emaster%E5%88%86%E6%94%AF%E4%B8%8A%E6%A3%80%E5%87%BA%E5%88%86%E6%94%AF.png)\n## HEAD信息\n\n为什么要在这里讲HEAD呢，那HEAD又是什么呢，其实HEAD可以理解成一个指针，每次都是指向当前Branch的最后一次信息(可以是Commit或者Pull之类的)，通过移动HEAD来达到切换分支的作用。\n如果当前分支在master，那么HEAD信息如下：\n![HEAD_MASTER](http://7xvy2g.com1.z0.glb.clouddn.com/head_master.png)\n\n真实测试效果：\n\n![HEAD_IN_MASTER](http://7xvy2g.com1.z0.glb.clouddn.com/head%E5%9C%A8master.png)\n在checkout到BranchC的时候变成了如下图所示：\n\n![HEAD_BRANCH](http://7xvy2g.com1.z0.glb.clouddn.com/head_branch.png)\n\n真实测试效果：\n\n![HEAD_IN_BRANCH](http://7xvy2g.com1.z0.glb.clouddn.com/head%E5%88%87%E6%8D%A2%E5%88%B0branchC.png)\n\n## 合并分支\n当你的项目上线后，发现有个bug，这个时候需要在master分支上`checkout -b` 一个新的分支用来修bug，那么这个bug分支上的代码，最后怎么给'整'到master上去呢。很简单先切回master分支，然后`git merge bugBranch` 就好了。\n\n### 冲突\n当你merge的时候出现了\n\n`$ git merge myBranch\nAuto-merging AndroidManifest.xml\nCONFLICT (content): Merge conflict in index.html\nAutomatic merge failed; fix conflicts and then commit the result.`\n![切换到bug分支](http://7xvy2g.com1.z0.glb.clouddn.com/%E5%88%87%E6%8D%A2bug%E5%88%86%E6%94%AF.png)\n![merge](http://7xvy2g.com1.z0.glb.clouddn.com/%E5%86%B2%E7%AA%81.png)\n\n\n这个时候会提示你有代码冲突，那么你需要执行`git status`，查看当前文件哪些需要解决冲突。解决完再提交就好了。笔者很喜欢用AndroidStudio自带的git进行合并等操作，可以直接在Compare视图上解决冲突，非常方便。\n![发现冲突](http://7xvy2g.com1.z0.glb.clouddn.com/%E5%8F%91%E7%8E%B0%E5%86%B2%E7%AA%81.png)\n\n![冲突文件](http://7xvy2g.com1.z0.glb.clouddn.com/%E5%86%B2%E7%AA%81%E6%96%87%E4%BB%B6.png)\n\n这个时候回发现 `<<<<<<<<<< HEAD` 到 `========` 是当前所在分支的内容，下面从 `=======` 到 `>>>>>>>> fixBug` 是合并过来的分支，解决完，再执行`git add .` 然后就可以提交啦。\n\n接下来为大家看一下编译器的merge：\n\n![选择merge](http://7xvy2g.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9merge.png)\n\n选择分支：\n\n![选择分支](http://7xvy2g.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AFmerge.png)\n\n冲突提示：\n\n![冲突提示](http://7xvy2g.com1.z0.glb.clouddn.com/merge%E5%BC%B9%E5%87%BA%E6%A1%86.png)\n\n冲突比较 ：\n\n![合并操作](http://7xvy2g.com1.z0.glb.clouddn.com/%E5%90%88%E5%B9%B6%E6%93%8D%E4%BD%9C.png)\n\n### rebase\n\nrebase和merge的功能其实是一样的，都是合并代码，只是对于修改信息的节点会发生变化，rebase和merge最大的区别就是在最后的代码树上，有兴趣的同学可以用SourceTree看看，或者直接在命令行输入gitk。\n\n当前工作状态，箭头表示上一次信息：\n![当前状态](http://7xvy2g.com1.z0.glb.clouddn.com/branch.png)\n\n执行merge后：\n![merge](http://7xvy2g.com1.z0.glb.clouddn.com/merge_%E6%96%B0.png)\n\n执行rebase后\n![rebase](http://7xvy2g.com1.z0.glb.clouddn.com/rebase.png)\n\n之所以会有5-1，6-1就是和原来的commit是不同的，算是一次新的commit了。\n\n简而言之就是rebase的代码会比merge的干净许多。rebase会保留你合并的顺序，而merge则会按照你的修改时间排序。笔者有点强迫症，会使用rebase(搞基)，另外一些图方便的人喜欢merge(合体)。\n\n另外值得注意的是，在rebase前，千万别push，不然等rebase完毕后，因为tree发生了变化，会提示push reject，意味着你需要  `git push --f`才能提交了，这是有风险的！！！注意安全！！！\n\n比如branch要reabse onto master，那么会比较两个分支的最近的共同节点，再根据master提交的节点生成一系列不同的文件，最后在branch上针对每个提交将之前不同的文件去合并，并且生成`新的commit节点`，这时rebase完毕后branch的tree已经和rebase前的branch tree完全不一样了，所以在rebase前你push过后，rebase后再push会提示不是同一个tree而`reject(拒绝)`提交。\n\n下面是AndroidStudio上的rebase操作：\n![rebase选择](http://7xvy2g.com1.z0.glb.clouddn.com/rebase%E9%80%89%E6%8B%A9.png)\n\n想要从哪个分支rebase到当前分支，就选择哪个`Rebase on` ：\n\n![选择分支](http://7xvy2g.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9rebase.png)\n\n\n## stash\n当你想切换分支时，又不想提交当前代码，那就需要stash啦，简单的意思就是讲你当前的修改信息全部暂存起来，放进一个stack栈中，这个时候你就可以checkout到别的分支啦。下次再回来的时候\n`git stash pop `就好了。\n\n这个时候Leader转头对我说：XXX模块代码我提交了，你拉一下代码，我改了你可能要用到的东西。\n这个时候我对着一屏幕的蓝色提示，心想：不能commit把，都没测试过。这个时候就用到`stash`这个神器了。\n\n没有提交文件，本地修改过的文件会显示蓝色：\n![蓝色](http://7xvy2g.com1.z0.glb.clouddn.com/%E8%93%9D%E8%89%B2%E7%9A%84.png)\n\n项目里有几个文件都没有提交，只能选择项目根目录，右击，选择stash：\n\n![stash](http://7xvy2g.com1.z0.glb.clouddn.com/stash.png)\n\n会弹出一个stash的弹出框，会显示当前分支，填入message:\n![stash弹出框](http://7xvy2g.com1.z0.glb.clouddn.com/stash%E5%BC%B9%E5%87%BA%E6%A1%86.png)\n\n点击createStash后，创建一个当前的stash，可以点击刚刚的StashChanges下面的UnstashChanges查看当前的stash列表：\n\n![查看stashInAs](http://7xvy2g.com1.z0.glb.clouddn.com/%E6%9F%A5%E7%9C%8BstashInAs.png)\n\n或者在命令行输入`git stash list` 查看当前的stash栈：\n![查看stash](http://7xvy2g.com1.z0.glb.clouddn.com/%E6%9F%A5%E7%9C%8Bstash.png)\n\n![结果](http://7xvy2g.com1.z0.glb.clouddn.com/stashlist%E7%BB%93%E6%9E%9C.png)\n\n好啦，当前的工作全部都暂存起来了！要把刚刚Leader放到master的代码都合并过来啦！我选择的当然是rebase啦。在这之前必须得把服务器的master代码pull到本地是不是，先切换到master，然后还是选择编译器的git，在刚刚stash界面下面有个`pull`。点击pull弹出一个界面，选择master分支：\n\n![pull](http://7xvy2g.com1.z0.glb.clouddn.com/pull%E4%BB%A3%E7%A0%81.png)\n\n点击pull就能拉下代码啦，如果有冲突也能借助编译器的compare进行合并啦。\n\npull完代码后，要reabse啦：\n\n![rebase](http://7xvy2g.com1.z0.glb.clouddn.com/rebaseInAs.png)\n\n按照步骤来，1、点击当前分支，选择要rebase的目标分支，点击后选择`Rebase onto`就可以执行rebase啦，rebase过程中发现出现了一个冲突：\n\n![冲突](http://7xvy2g.com1.z0.glb.clouddn.com/rebase%E5%86%B2%E7%AA%81.png)\n\n和前面的merge一样，选择在这里解决冲突：\n\n![解决冲突](http://7xvy2g.com1.z0.glb.clouddn.com/%E5%90%88%E5%B9%B6%E5%86%B2%E7%AA%81.png)\n这个时候master的代码就过来啦，然后再把之前修改的代码拿出来继续工作：\n\n![pop](http://7xvy2g.com1.z0.glb.clouddn.com/popStash.png)\n\npop完后可以继续快乐的工作啦：\n\n![pop完毕](http://7xvy2g.com1.z0.glb.clouddn.com/pop%E5%AE%8C%E5%90%8E.png)\n\n在这里说明一下`红色`的文件表示没有add，`绿色`文件表示add过了但是没有commit，`蓝色`文件表示修改过，和版本库分支不一样，绿色和蓝色的文件执行stash会被暂存，而红色的不会。\n\n## 拓展\n\n如果对Git原理有兴趣的同学，可以自己再去深入研究一下Git，很多东西虽然平时用不到，但是又很有深度。大家按兴趣就好啦\n\n\n# 总结\n\n一边写博客，一边翻阅资料，自己也又温习一遍，接下来打算继续深入下去，下一篇将会讲几个指令的原理，以及git对象之类的。最近比较忙，需要用点心去学习，也会把自己遇到的场景尽量告诉大家，让大家能接触到更多的实际场景，努力把这个系列写的更干货一些！\n\n其实AndroidStudio能覆盖大多数的使用场景了，下一篇将会说一些revert、reset，当发生错误提交时，怎么回滚代码。\n\n\n最近大帅的开了个QQ实践群（568863373），欢迎大家一起讨论，也可以关注我们的公众号：`魔都三帅`\n\n![公众号](http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg)\n","source":"_posts/gitbranch.md","raw":"title: 从什么都不懂开始(三)—实践带你飞之Branch操作\ndate: 2016-07-15 00:02:42\ncategories:\n- 实践\ntags:\n- Git\n- 版本控制\n---\n\n本篇将介绍一下Git中经常需要操作到的东西，以及项目中运用到的场景，会稍微带一点基础知识，笔者觉得阮一峰老师的Git入门讲的非常到位了，我就不班门弄斧了，就讲一下项目中遇到的一些情况。若是Git大牛就可以点击返回或者关闭啦~\n此文多图预警~用流量的童鞋注意哦。\n\n# Repository介绍\n\n在版本管理中，Repository翻译成中文就是仓库的意思，每个提交到本地，或者push到远程服务器的Project，被Git以数据结构的形式保存，而这个数据结构被称之为Repository即仓库。\n\n对于我们来说，在Repository中，我们看的见的显示信息就是代码，而其他的比如分支信息、Commit信息、Status这些状态则通过命令行去查看。\n\n\n# Branch介绍\n\n当我们多个人合作开发的时候，为了方便管理代码，会每个组开一个Branch，而master称为主分支——主干，这些Branch则称为分支。\n\n![BranchAndMaster](http://7xvy2g.com1.z0.glb.clouddn.com/%E4%B8%BB%E5%B9%B2%E5%92%8C%E5%88%86%E6%94%AF.png)\n\n## 查看当前分支\n在命令行输入`git branch`就可以看到当前分支为master :\n![查看当前分支](http://7xvy2g.com1.z0.glb.clouddn.com/%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF.png)\n\n输入`git branch -a` 可以查看本地和远程所有分支\n![查看本地和远程所有分支](http://7xvy2g.com1.z0.glb.clouddn.com/%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF.png)\n\n\n## 切换分支\n初始化Git后，当前默认在master分支，这个时候如果你想新建一个分支，可以执行 `git branch [branchName]` 后面的[branchName]是指你的分支名。这样就能把master当前的commit信息'拎'出来，成为了一个新的分支。\n\n![新建分支](http://7xvy2g.com1.z0.glb.clouddn.com/%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF.png)\n\n执行完branch命令后，你会发现你还是在原来的分支上，在master前有一个*号表示当前分支是master，这个时候执行以下  `git checkout [branchName]`。\n![切换当前分支到testBranch](http://7xvy2g.com1.z0.glb.clouddn.com/%E5%88%87%E6%8D%A2%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E5%88%B0testBranch.png)\n其实呢，你可以执行\n`git checkout -b [branchName] [fromBranchName]` 生成新的Branch，后面这个[fromBranchName] 就是你想要从哪个分支生成新的分支，不写则是当前分支。\n\n![从当前分支检出新分支](http://7xvy2g.com1.z0.glb.clouddn.com/%E4%BB%8E%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E6%A3%80%E5%87%BA%E6%96%B0%E5%88%86%E6%94%AF.png)\n\n![从master分支检出新分支](http://7xvy2g.com1.z0.glb.clouddn.com/%E4%BB%8Emaster%E5%88%86%E6%94%AF%E4%B8%8A%E6%A3%80%E5%87%BA%E5%88%86%E6%94%AF.png)\n## HEAD信息\n\n为什么要在这里讲HEAD呢，那HEAD又是什么呢，其实HEAD可以理解成一个指针，每次都是指向当前Branch的最后一次信息(可以是Commit或者Pull之类的)，通过移动HEAD来达到切换分支的作用。\n如果当前分支在master，那么HEAD信息如下：\n![HEAD_MASTER](http://7xvy2g.com1.z0.glb.clouddn.com/head_master.png)\n\n真实测试效果：\n\n![HEAD_IN_MASTER](http://7xvy2g.com1.z0.glb.clouddn.com/head%E5%9C%A8master.png)\n在checkout到BranchC的时候变成了如下图所示：\n\n![HEAD_BRANCH](http://7xvy2g.com1.z0.glb.clouddn.com/head_branch.png)\n\n真实测试效果：\n\n![HEAD_IN_BRANCH](http://7xvy2g.com1.z0.glb.clouddn.com/head%E5%88%87%E6%8D%A2%E5%88%B0branchC.png)\n\n## 合并分支\n当你的项目上线后，发现有个bug，这个时候需要在master分支上`checkout -b` 一个新的分支用来修bug，那么这个bug分支上的代码，最后怎么给'整'到master上去呢。很简单先切回master分支，然后`git merge bugBranch` 就好了。\n\n### 冲突\n当你merge的时候出现了\n\n`$ git merge myBranch\nAuto-merging AndroidManifest.xml\nCONFLICT (content): Merge conflict in index.html\nAutomatic merge failed; fix conflicts and then commit the result.`\n![切换到bug分支](http://7xvy2g.com1.z0.glb.clouddn.com/%E5%88%87%E6%8D%A2bug%E5%88%86%E6%94%AF.png)\n![merge](http://7xvy2g.com1.z0.glb.clouddn.com/%E5%86%B2%E7%AA%81.png)\n\n\n这个时候会提示你有代码冲突，那么你需要执行`git status`，查看当前文件哪些需要解决冲突。解决完再提交就好了。笔者很喜欢用AndroidStudio自带的git进行合并等操作，可以直接在Compare视图上解决冲突，非常方便。\n![发现冲突](http://7xvy2g.com1.z0.glb.clouddn.com/%E5%8F%91%E7%8E%B0%E5%86%B2%E7%AA%81.png)\n\n![冲突文件](http://7xvy2g.com1.z0.glb.clouddn.com/%E5%86%B2%E7%AA%81%E6%96%87%E4%BB%B6.png)\n\n这个时候回发现 `<<<<<<<<<< HEAD` 到 `========` 是当前所在分支的内容，下面从 `=======` 到 `>>>>>>>> fixBug` 是合并过来的分支，解决完，再执行`git add .` 然后就可以提交啦。\n\n接下来为大家看一下编译器的merge：\n\n![选择merge](http://7xvy2g.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9merge.png)\n\n选择分支：\n\n![选择分支](http://7xvy2g.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AFmerge.png)\n\n冲突提示：\n\n![冲突提示](http://7xvy2g.com1.z0.glb.clouddn.com/merge%E5%BC%B9%E5%87%BA%E6%A1%86.png)\n\n冲突比较 ：\n\n![合并操作](http://7xvy2g.com1.z0.glb.clouddn.com/%E5%90%88%E5%B9%B6%E6%93%8D%E4%BD%9C.png)\n\n### rebase\n\nrebase和merge的功能其实是一样的，都是合并代码，只是对于修改信息的节点会发生变化，rebase和merge最大的区别就是在最后的代码树上，有兴趣的同学可以用SourceTree看看，或者直接在命令行输入gitk。\n\n当前工作状态，箭头表示上一次信息：\n![当前状态](http://7xvy2g.com1.z0.glb.clouddn.com/branch.png)\n\n执行merge后：\n![merge](http://7xvy2g.com1.z0.glb.clouddn.com/merge_%E6%96%B0.png)\n\n执行rebase后\n![rebase](http://7xvy2g.com1.z0.glb.clouddn.com/rebase.png)\n\n之所以会有5-1，6-1就是和原来的commit是不同的，算是一次新的commit了。\n\n简而言之就是rebase的代码会比merge的干净许多。rebase会保留你合并的顺序，而merge则会按照你的修改时间排序。笔者有点强迫症，会使用rebase(搞基)，另外一些图方便的人喜欢merge(合体)。\n\n另外值得注意的是，在rebase前，千万别push，不然等rebase完毕后，因为tree发生了变化，会提示push reject，意味着你需要  `git push --f`才能提交了，这是有风险的！！！注意安全！！！\n\n比如branch要reabse onto master，那么会比较两个分支的最近的共同节点，再根据master提交的节点生成一系列不同的文件，最后在branch上针对每个提交将之前不同的文件去合并，并且生成`新的commit节点`，这时rebase完毕后branch的tree已经和rebase前的branch tree完全不一样了，所以在rebase前你push过后，rebase后再push会提示不是同一个tree而`reject(拒绝)`提交。\n\n下面是AndroidStudio上的rebase操作：\n![rebase选择](http://7xvy2g.com1.z0.glb.clouddn.com/rebase%E9%80%89%E6%8B%A9.png)\n\n想要从哪个分支rebase到当前分支，就选择哪个`Rebase on` ：\n\n![选择分支](http://7xvy2g.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9rebase.png)\n\n\n## stash\n当你想切换分支时，又不想提交当前代码，那就需要stash啦，简单的意思就是讲你当前的修改信息全部暂存起来，放进一个stack栈中，这个时候你就可以checkout到别的分支啦。下次再回来的时候\n`git stash pop `就好了。\n\n这个时候Leader转头对我说：XXX模块代码我提交了，你拉一下代码，我改了你可能要用到的东西。\n这个时候我对着一屏幕的蓝色提示，心想：不能commit把，都没测试过。这个时候就用到`stash`这个神器了。\n\n没有提交文件，本地修改过的文件会显示蓝色：\n![蓝色](http://7xvy2g.com1.z0.glb.clouddn.com/%E8%93%9D%E8%89%B2%E7%9A%84.png)\n\n项目里有几个文件都没有提交，只能选择项目根目录，右击，选择stash：\n\n![stash](http://7xvy2g.com1.z0.glb.clouddn.com/stash.png)\n\n会弹出一个stash的弹出框，会显示当前分支，填入message:\n![stash弹出框](http://7xvy2g.com1.z0.glb.clouddn.com/stash%E5%BC%B9%E5%87%BA%E6%A1%86.png)\n\n点击createStash后，创建一个当前的stash，可以点击刚刚的StashChanges下面的UnstashChanges查看当前的stash列表：\n\n![查看stashInAs](http://7xvy2g.com1.z0.glb.clouddn.com/%E6%9F%A5%E7%9C%8BstashInAs.png)\n\n或者在命令行输入`git stash list` 查看当前的stash栈：\n![查看stash](http://7xvy2g.com1.z0.glb.clouddn.com/%E6%9F%A5%E7%9C%8Bstash.png)\n\n![结果](http://7xvy2g.com1.z0.glb.clouddn.com/stashlist%E7%BB%93%E6%9E%9C.png)\n\n好啦，当前的工作全部都暂存起来了！要把刚刚Leader放到master的代码都合并过来啦！我选择的当然是rebase啦。在这之前必须得把服务器的master代码pull到本地是不是，先切换到master，然后还是选择编译器的git，在刚刚stash界面下面有个`pull`。点击pull弹出一个界面，选择master分支：\n\n![pull](http://7xvy2g.com1.z0.glb.clouddn.com/pull%E4%BB%A3%E7%A0%81.png)\n\n点击pull就能拉下代码啦，如果有冲突也能借助编译器的compare进行合并啦。\n\npull完代码后，要reabse啦：\n\n![rebase](http://7xvy2g.com1.z0.glb.clouddn.com/rebaseInAs.png)\n\n按照步骤来，1、点击当前分支，选择要rebase的目标分支，点击后选择`Rebase onto`就可以执行rebase啦，rebase过程中发现出现了一个冲突：\n\n![冲突](http://7xvy2g.com1.z0.glb.clouddn.com/rebase%E5%86%B2%E7%AA%81.png)\n\n和前面的merge一样，选择在这里解决冲突：\n\n![解决冲突](http://7xvy2g.com1.z0.glb.clouddn.com/%E5%90%88%E5%B9%B6%E5%86%B2%E7%AA%81.png)\n这个时候master的代码就过来啦，然后再把之前修改的代码拿出来继续工作：\n\n![pop](http://7xvy2g.com1.z0.glb.clouddn.com/popStash.png)\n\npop完后可以继续快乐的工作啦：\n\n![pop完毕](http://7xvy2g.com1.z0.glb.clouddn.com/pop%E5%AE%8C%E5%90%8E.png)\n\n在这里说明一下`红色`的文件表示没有add，`绿色`文件表示add过了但是没有commit，`蓝色`文件表示修改过，和版本库分支不一样，绿色和蓝色的文件执行stash会被暂存，而红色的不会。\n\n## 拓展\n\n如果对Git原理有兴趣的同学，可以自己再去深入研究一下Git，很多东西虽然平时用不到，但是又很有深度。大家按兴趣就好啦\n\n\n# 总结\n\n一边写博客，一边翻阅资料，自己也又温习一遍，接下来打算继续深入下去，下一篇将会讲几个指令的原理，以及git对象之类的。最近比较忙，需要用点心去学习，也会把自己遇到的场景尽量告诉大家，让大家能接触到更多的实际场景，努力把这个系列写的更干货一些！\n\n其实AndroidStudio能覆盖大多数的使用场景了，下一篇将会说一些revert、reset，当发生错误提交时，怎么回滚代码。\n\n\n最近大帅的开了个QQ实践群（568863373），欢迎大家一起讨论，也可以关注我们的公众号：`魔都三帅`\n\n![公众号](http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg)\n","slug":"gitbranch","published":1,"updated":"2016-07-28T04:30:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tihrb2002q4irrc0xu01je","content":"<p>本篇将介绍一下Git中经常需要操作到的东西，以及项目中运用到的场景，会稍微带一点基础知识，笔者觉得阮一峰老师的Git入门讲的非常到位了，我就不班门弄斧了，就讲一下项目中遇到的一些情况。若是Git大牛就可以点击返回或者关闭啦~<br>此文多图预警~用流量的童鞋注意哦。</p>\n<h1 id=\"Repository介绍\">Repository介绍</h1><p>在版本管理中，Repository翻译成中文就是仓库的意思，每个提交到本地，或者push到远程服务器的Project，被Git以数据结构的形式保存，而这个数据结构被称之为Repository即仓库。</p>\n<p>对于我们来说，在Repository中，我们看的见的显示信息就是代码，而其他的比如分支信息、Commit信息、Status这些状态则通过命令行去查看。</p>\n<h1 id=\"Branch介绍\">Branch介绍</h1><p>当我们多个人合作开发的时候，为了方便管理代码，会每个组开一个Branch，而master称为主分支——主干，这些Branch则称为分支。</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E4%B8%BB%E5%B9%B2%E5%92%8C%E5%88%86%E6%94%AF.png\" alt=\"BranchAndMaster\"></p>\n<h2 id=\"查看当前分支\">查看当前分支</h2><p>在命令行输入<code>git branch</code>就可以看到当前分支为master :<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF.png\" alt=\"查看当前分支\"></p>\n<p>输入<code>git branch -a</code> 可以查看本地和远程所有分支<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF.png\" alt=\"查看本地和远程所有分支\"></p>\n<h2 id=\"切换分支\">切换分支</h2><p>初始化Git后，当前默认在master分支，这个时候如果你想新建一个分支，可以执行 <code>git branch [branchName]</code> 后面的[branchName]是指你的分支名。这样就能把master当前的commit信息’拎’出来，成为了一个新的分支。</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF.png\" alt=\"新建分支\"></p>\n<p>执行完branch命令后，你会发现你还是在原来的分支上，在master前有一个*号表示当前分支是master，这个时候执行以下  <code>git checkout [branchName]</code>。<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E5%88%87%E6%8D%A2%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E5%88%B0testBranch.png\" alt=\"切换当前分支到testBranch\"><br>其实呢，你可以执行<br><code>git checkout -b [branchName] [fromBranchName]</code> 生成新的Branch，后面这个[fromBranchName] 就是你想要从哪个分支生成新的分支，不写则是当前分支。</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E4%BB%8E%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E6%A3%80%E5%87%BA%E6%96%B0%E5%88%86%E6%94%AF.png\" alt=\"从当前分支检出新分支\"></p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E4%BB%8Emaster%E5%88%86%E6%94%AF%E4%B8%8A%E6%A3%80%E5%87%BA%E5%88%86%E6%94%AF.png\" alt=\"从master分支检出新分支\"></p>\n<h2 id=\"HEAD信息\">HEAD信息</h2><p>为什么要在这里讲HEAD呢，那HEAD又是什么呢，其实HEAD可以理解成一个指针，每次都是指向当前Branch的最后一次信息(可以是Commit或者Pull之类的)，通过移动HEAD来达到切换分支的作用。<br>如果当前分支在master，那么HEAD信息如下：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/head_master.png\" alt=\"HEAD_MASTER\"></p>\n<p>真实测试效果：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/head%E5%9C%A8master.png\" alt=\"HEAD_IN_MASTER\"><br>在checkout到BranchC的时候变成了如下图所示：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/head_branch.png\" alt=\"HEAD_BRANCH\"></p>\n<p>真实测试效果：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/head%E5%88%87%E6%8D%A2%E5%88%B0branchC.png\" alt=\"HEAD_IN_BRANCH\"></p>\n<h2 id=\"合并分支\">合并分支</h2><p>当你的项目上线后，发现有个bug，这个时候需要在master分支上<code>checkout -b</code> 一个新的分支用来修bug，那么这个bug分支上的代码，最后怎么给’整’到master上去呢。很简单先切回master分支，然后<code>git merge bugBranch</code> 就好了。</p>\n<h3 id=\"冲突\">冲突</h3><p>当你merge的时候出现了</p>\n<p><code>$ git merge myBranch\nAuto-merging AndroidManifest.xml\nCONFLICT (content): Merge conflict in index.html\nAutomatic merge failed; fix conflicts and then commit the result.</code><br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E5%88%87%E6%8D%A2bug%E5%88%86%E6%94%AF.png\" alt=\"切换到bug分支\"><br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E5%86%B2%E7%AA%81.png\" alt=\"merge\"></p>\n<p>这个时候会提示你有代码冲突，那么你需要执行<code>git status</code>，查看当前文件哪些需要解决冲突。解决完再提交就好了。笔者很喜欢用AndroidStudio自带的git进行合并等操作，可以直接在Compare视图上解决冲突，非常方便。<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E5%8F%91%E7%8E%B0%E5%86%B2%E7%AA%81.png\" alt=\"发现冲突\"></p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E5%86%B2%E7%AA%81%E6%96%87%E4%BB%B6.png\" alt=\"冲突文件\"></p>\n<p>这个时候回发现 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code> 到 <code>========</code> 是当前所在分支的内容，下面从 <code>=======</code> 到 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; fixBug</code> 是合并过来的分支，解决完，再执行<code>git add .</code> 然后就可以提交啦。</p>\n<p>接下来为大家看一下编译器的merge：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9merge.png\" alt=\"选择merge\"></p>\n<p>选择分支：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AFmerge.png\" alt=\"选择分支\"></p>\n<p>冲突提示：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/merge%E5%BC%B9%E5%87%BA%E6%A1%86.png\" alt=\"冲突提示\"></p>\n<p>冲突比较 ：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E5%90%88%E5%B9%B6%E6%93%8D%E4%BD%9C.png\" alt=\"合并操作\"></p>\n<h3 id=\"rebase\">rebase</h3><p>rebase和merge的功能其实是一样的，都是合并代码，只是对于修改信息的节点会发生变化，rebase和merge最大的区别就是在最后的代码树上，有兴趣的同学可以用SourceTree看看，或者直接在命令行输入gitk。</p>\n<p>当前工作状态，箭头表示上一次信息：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/branch.png\" alt=\"当前状态\"></p>\n<p>执行merge后：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/merge_%E6%96%B0.png\" alt=\"merge\"></p>\n<p>执行rebase后<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/rebase.png\" alt=\"rebase\"></p>\n<p>之所以会有5-1，6-1就是和原来的commit是不同的，算是一次新的commit了。</p>\n<p>简而言之就是rebase的代码会比merge的干净许多。rebase会保留你合并的顺序，而merge则会按照你的修改时间排序。笔者有点强迫症，会使用rebase(搞基)，另外一些图方便的人喜欢merge(合体)。</p>\n<p>另外值得注意的是，在rebase前，千万别push，不然等rebase完毕后，因为tree发生了变化，会提示push reject，意味着你需要  <code>git push --f</code>才能提交了，这是有风险的！！！注意安全！！！</p>\n<p>比如branch要reabse onto master，那么会比较两个分支的最近的共同节点，再根据master提交的节点生成一系列不同的文件，最后在branch上针对每个提交将之前不同的文件去合并，并且生成<code>新的commit节点</code>，这时rebase完毕后branch的tree已经和rebase前的branch tree完全不一样了，所以在rebase前你push过后，rebase后再push会提示不是同一个tree而<code>reject(拒绝)</code>提交。</p>\n<p>下面是AndroidStudio上的rebase操作：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/rebase%E9%80%89%E6%8B%A9.png\" alt=\"rebase选择\"></p>\n<p>想要从哪个分支rebase到当前分支，就选择哪个<code>Rebase on</code> ：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9rebase.png\" alt=\"选择分支\"></p>\n<h2 id=\"stash\">stash</h2><p>当你想切换分支时，又不想提交当前代码，那就需要stash啦，简单的意思就是讲你当前的修改信息全部暂存起来，放进一个stack栈中，这个时候你就可以checkout到别的分支啦。下次再回来的时候<br><code>git stash pop</code>就好了。</p>\n<p>这个时候Leader转头对我说：XXX模块代码我提交了，你拉一下代码，我改了你可能要用到的东西。<br>这个时候我对着一屏幕的蓝色提示，心想：不能commit把，都没测试过。这个时候就用到<code>stash</code>这个神器了。</p>\n<p>没有提交文件，本地修改过的文件会显示蓝色：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E8%93%9D%E8%89%B2%E7%9A%84.png\" alt=\"蓝色\"></p>\n<p>项目里有几个文件都没有提交，只能选择项目根目录，右击，选择stash：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/stash.png\" alt=\"stash\"></p>\n<p>会弹出一个stash的弹出框，会显示当前分支，填入message:<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/stash%E5%BC%B9%E5%87%BA%E6%A1%86.png\" alt=\"stash弹出框\"></p>\n<p>点击createStash后，创建一个当前的stash，可以点击刚刚的StashChanges下面的UnstashChanges查看当前的stash列表：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E6%9F%A5%E7%9C%8BstashInAs.png\" alt=\"查看stashInAs\"></p>\n<p>或者在命令行输入<code>git stash list</code> 查看当前的stash栈：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E6%9F%A5%E7%9C%8Bstash.png\" alt=\"查看stash\"></p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/stashlist%E7%BB%93%E6%9E%9C.png\" alt=\"结果\"></p>\n<p>好啦，当前的工作全部都暂存起来了！要把刚刚Leader放到master的代码都合并过来啦！我选择的当然是rebase啦。在这之前必须得把服务器的master代码pull到本地是不是，先切换到master，然后还是选择编译器的git，在刚刚stash界面下面有个<code>pull</code>。点击pull弹出一个界面，选择master分支：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/pull%E4%BB%A3%E7%A0%81.png\" alt=\"pull\"></p>\n<p>点击pull就能拉下代码啦，如果有冲突也能借助编译器的compare进行合并啦。</p>\n<p>pull完代码后，要reabse啦：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/rebaseInAs.png\" alt=\"rebase\"></p>\n<p>按照步骤来，1、点击当前分支，选择要rebase的目标分支，点击后选择<code>Rebase onto</code>就可以执行rebase啦，rebase过程中发现出现了一个冲突：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/rebase%E5%86%B2%E7%AA%81.png\" alt=\"冲突\"></p>\n<p>和前面的merge一样，选择在这里解决冲突：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E5%90%88%E5%B9%B6%E5%86%B2%E7%AA%81.png\" alt=\"解决冲突\"><br>这个时候master的代码就过来啦，然后再把之前修改的代码拿出来继续工作：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/popStash.png\" alt=\"pop\"></p>\n<p>pop完后可以继续快乐的工作啦：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/pop%E5%AE%8C%E5%90%8E.png\" alt=\"pop完毕\"></p>\n<p>在这里说明一下<code>红色</code>的文件表示没有add，<code>绿色</code>文件表示add过了但是没有commit，<code>蓝色</code>文件表示修改过，和版本库分支不一样，绿色和蓝色的文件执行stash会被暂存，而红色的不会。</p>\n<h2 id=\"拓展\">拓展</h2><p>如果对Git原理有兴趣的同学，可以自己再去深入研究一下Git，很多东西虽然平时用不到，但是又很有深度。大家按兴趣就好啦</p>\n<h1 id=\"总结\">总结</h1><p>一边写博客，一边翻阅资料，自己也又温习一遍，接下来打算继续深入下去，下一篇将会讲几个指令的原理，以及git对象之类的。最近比较忙，需要用点心去学习，也会把自己遇到的场景尽量告诉大家，让大家能接触到更多的实际场景，努力把这个系列写的更干货一些！</p>\n<p>其实AndroidStudio能覆盖大多数的使用场景了，下一篇将会说一些revert、reset，当发生错误提交时，怎么回滚代码。</p>\n<p>最近大帅的开了个QQ实践群（568863373），欢迎大家一起讨论，也可以关注我们的公众号：<code>魔都三帅</code></p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg\" alt=\"公众号\"></p>\n","excerpt":"","more":"<p>本篇将介绍一下Git中经常需要操作到的东西，以及项目中运用到的场景，会稍微带一点基础知识，笔者觉得阮一峰老师的Git入门讲的非常到位了，我就不班门弄斧了，就讲一下项目中遇到的一些情况。若是Git大牛就可以点击返回或者关闭啦~<br>此文多图预警~用流量的童鞋注意哦。</p>\n<h1 id=\"Repository介绍\">Repository介绍</h1><p>在版本管理中，Repository翻译成中文就是仓库的意思，每个提交到本地，或者push到远程服务器的Project，被Git以数据结构的形式保存，而这个数据结构被称之为Repository即仓库。</p>\n<p>对于我们来说，在Repository中，我们看的见的显示信息就是代码，而其他的比如分支信息、Commit信息、Status这些状态则通过命令行去查看。</p>\n<h1 id=\"Branch介绍\">Branch介绍</h1><p>当我们多个人合作开发的时候，为了方便管理代码，会每个组开一个Branch，而master称为主分支——主干，这些Branch则称为分支。</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E4%B8%BB%E5%B9%B2%E5%92%8C%E5%88%86%E6%94%AF.png\" alt=\"BranchAndMaster\"></p>\n<h2 id=\"查看当前分支\">查看当前分支</h2><p>在命令行输入<code>git branch</code>就可以看到当前分支为master :<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF.png\" alt=\"查看当前分支\"></p>\n<p>输入<code>git branch -a</code> 可以查看本地和远程所有分支<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF.png\" alt=\"查看本地和远程所有分支\"></p>\n<h2 id=\"切换分支\">切换分支</h2><p>初始化Git后，当前默认在master分支，这个时候如果你想新建一个分支，可以执行 <code>git branch [branchName]</code> 后面的[branchName]是指你的分支名。这样就能把master当前的commit信息’拎’出来，成为了一个新的分支。</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF.png\" alt=\"新建分支\"></p>\n<p>执行完branch命令后，你会发现你还是在原来的分支上，在master前有一个*号表示当前分支是master，这个时候执行以下  <code>git checkout [branchName]</code>。<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E5%88%87%E6%8D%A2%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E5%88%B0testBranch.png\" alt=\"切换当前分支到testBranch\"><br>其实呢，你可以执行<br><code>git checkout -b [branchName] [fromBranchName]</code> 生成新的Branch，后面这个[fromBranchName] 就是你想要从哪个分支生成新的分支，不写则是当前分支。</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E4%BB%8E%E5%BD%93%E5%89%8D%E5%88%86%E6%94%AF%E6%A3%80%E5%87%BA%E6%96%B0%E5%88%86%E6%94%AF.png\" alt=\"从当前分支检出新分支\"></p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E4%BB%8Emaster%E5%88%86%E6%94%AF%E4%B8%8A%E6%A3%80%E5%87%BA%E5%88%86%E6%94%AF.png\" alt=\"从master分支检出新分支\"></p>\n<h2 id=\"HEAD信息\">HEAD信息</h2><p>为什么要在这里讲HEAD呢，那HEAD又是什么呢，其实HEAD可以理解成一个指针，每次都是指向当前Branch的最后一次信息(可以是Commit或者Pull之类的)，通过移动HEAD来达到切换分支的作用。<br>如果当前分支在master，那么HEAD信息如下：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/head_master.png\" alt=\"HEAD_MASTER\"></p>\n<p>真实测试效果：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/head%E5%9C%A8master.png\" alt=\"HEAD_IN_MASTER\"><br>在checkout到BranchC的时候变成了如下图所示：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/head_branch.png\" alt=\"HEAD_BRANCH\"></p>\n<p>真实测试效果：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/head%E5%88%87%E6%8D%A2%E5%88%B0branchC.png\" alt=\"HEAD_IN_BRANCH\"></p>\n<h2 id=\"合并分支\">合并分支</h2><p>当你的项目上线后，发现有个bug，这个时候需要在master分支上<code>checkout -b</code> 一个新的分支用来修bug，那么这个bug分支上的代码，最后怎么给’整’到master上去呢。很简单先切回master分支，然后<code>git merge bugBranch</code> 就好了。</p>\n<h3 id=\"冲突\">冲突</h3><p>当你merge的时候出现了</p>\n<p><code>$ git merge myBranch\nAuto-merging AndroidManifest.xml\nCONFLICT (content): Merge conflict in index.html\nAutomatic merge failed; fix conflicts and then commit the result.</code><br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E5%88%87%E6%8D%A2bug%E5%88%86%E6%94%AF.png\" alt=\"切换到bug分支\"><br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E5%86%B2%E7%AA%81.png\" alt=\"merge\"></p>\n<p>这个时候会提示你有代码冲突，那么你需要执行<code>git status</code>，查看当前文件哪些需要解决冲突。解决完再提交就好了。笔者很喜欢用AndroidStudio自带的git进行合并等操作，可以直接在Compare视图上解决冲突，非常方便。<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E5%8F%91%E7%8E%B0%E5%86%B2%E7%AA%81.png\" alt=\"发现冲突\"></p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E5%86%B2%E7%AA%81%E6%96%87%E4%BB%B6.png\" alt=\"冲突文件\"></p>\n<p>这个时候回发现 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code> 到 <code>========</code> 是当前所在分支的内容，下面从 <code>=======</code> 到 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; fixBug</code> 是合并过来的分支，解决完，再执行<code>git add .</code> 然后就可以提交啦。</p>\n<p>接下来为大家看一下编译器的merge：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9merge.png\" alt=\"选择merge\"></p>\n<p>选择分支：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AFmerge.png\" alt=\"选择分支\"></p>\n<p>冲突提示：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/merge%E5%BC%B9%E5%87%BA%E6%A1%86.png\" alt=\"冲突提示\"></p>\n<p>冲突比较 ：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E5%90%88%E5%B9%B6%E6%93%8D%E4%BD%9C.png\" alt=\"合并操作\"></p>\n<h3 id=\"rebase\">rebase</h3><p>rebase和merge的功能其实是一样的，都是合并代码，只是对于修改信息的节点会发生变化，rebase和merge最大的区别就是在最后的代码树上，有兴趣的同学可以用SourceTree看看，或者直接在命令行输入gitk。</p>\n<p>当前工作状态，箭头表示上一次信息：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/branch.png\" alt=\"当前状态\"></p>\n<p>执行merge后：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/merge_%E6%96%B0.png\" alt=\"merge\"></p>\n<p>执行rebase后<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/rebase.png\" alt=\"rebase\"></p>\n<p>之所以会有5-1，6-1就是和原来的commit是不同的，算是一次新的commit了。</p>\n<p>简而言之就是rebase的代码会比merge的干净许多。rebase会保留你合并的顺序，而merge则会按照你的修改时间排序。笔者有点强迫症，会使用rebase(搞基)，另外一些图方便的人喜欢merge(合体)。</p>\n<p>另外值得注意的是，在rebase前，千万别push，不然等rebase完毕后，因为tree发生了变化，会提示push reject，意味着你需要  <code>git push --f</code>才能提交了，这是有风险的！！！注意安全！！！</p>\n<p>比如branch要reabse onto master，那么会比较两个分支的最近的共同节点，再根据master提交的节点生成一系列不同的文件，最后在branch上针对每个提交将之前不同的文件去合并，并且生成<code>新的commit节点</code>，这时rebase完毕后branch的tree已经和rebase前的branch tree完全不一样了，所以在rebase前你push过后，rebase后再push会提示不是同一个tree而<code>reject(拒绝)</code>提交。</p>\n<p>下面是AndroidStudio上的rebase操作：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/rebase%E9%80%89%E6%8B%A9.png\" alt=\"rebase选择\"></p>\n<p>想要从哪个分支rebase到当前分支，就选择哪个<code>Rebase on</code> ：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9rebase.png\" alt=\"选择分支\"></p>\n<h2 id=\"stash\">stash</h2><p>当你想切换分支时，又不想提交当前代码，那就需要stash啦，简单的意思就是讲你当前的修改信息全部暂存起来，放进一个stack栈中，这个时候你就可以checkout到别的分支啦。下次再回来的时候<br><code>git stash pop</code>就好了。</p>\n<p>这个时候Leader转头对我说：XXX模块代码我提交了，你拉一下代码，我改了你可能要用到的东西。<br>这个时候我对着一屏幕的蓝色提示，心想：不能commit把，都没测试过。这个时候就用到<code>stash</code>这个神器了。</p>\n<p>没有提交文件，本地修改过的文件会显示蓝色：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E8%93%9D%E8%89%B2%E7%9A%84.png\" alt=\"蓝色\"></p>\n<p>项目里有几个文件都没有提交，只能选择项目根目录，右击，选择stash：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/stash.png\" alt=\"stash\"></p>\n<p>会弹出一个stash的弹出框，会显示当前分支，填入message:<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/stash%E5%BC%B9%E5%87%BA%E6%A1%86.png\" alt=\"stash弹出框\"></p>\n<p>点击createStash后，创建一个当前的stash，可以点击刚刚的StashChanges下面的UnstashChanges查看当前的stash列表：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E6%9F%A5%E7%9C%8BstashInAs.png\" alt=\"查看stashInAs\"></p>\n<p>或者在命令行输入<code>git stash list</code> 查看当前的stash栈：<br><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E6%9F%A5%E7%9C%8Bstash.png\" alt=\"查看stash\"></p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/stashlist%E7%BB%93%E6%9E%9C.png\" alt=\"结果\"></p>\n<p>好啦，当前的工作全部都暂存起来了！要把刚刚Leader放到master的代码都合并过来啦！我选择的当然是rebase啦。在这之前必须得把服务器的master代码pull到本地是不是，先切换到master，然后还是选择编译器的git，在刚刚stash界面下面有个<code>pull</code>。点击pull弹出一个界面，选择master分支：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/pull%E4%BB%A3%E7%A0%81.png\" alt=\"pull\"></p>\n<p>点击pull就能拉下代码啦，如果有冲突也能借助编译器的compare进行合并啦。</p>\n<p>pull完代码后，要reabse啦：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/rebaseInAs.png\" alt=\"rebase\"></p>\n<p>按照步骤来，1、点击当前分支，选择要rebase的目标分支，点击后选择<code>Rebase onto</code>就可以执行rebase啦，rebase过程中发现出现了一个冲突：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/rebase%E5%86%B2%E7%AA%81.png\" alt=\"冲突\"></p>\n<p>和前面的merge一样，选择在这里解决冲突：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/%E5%90%88%E5%B9%B6%E5%86%B2%E7%AA%81.png\" alt=\"解决冲突\"><br>这个时候master的代码就过来啦，然后再把之前修改的代码拿出来继续工作：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/popStash.png\" alt=\"pop\"></p>\n<p>pop完后可以继续快乐的工作啦：</p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/pop%E5%AE%8C%E5%90%8E.png\" alt=\"pop完毕\"></p>\n<p>在这里说明一下<code>红色</code>的文件表示没有add，<code>绿色</code>文件表示add过了但是没有commit，<code>蓝色</code>文件表示修改过，和版本库分支不一样，绿色和蓝色的文件执行stash会被暂存，而红色的不会。</p>\n<h2 id=\"拓展\">拓展</h2><p>如果对Git原理有兴趣的同学，可以自己再去深入研究一下Git，很多东西虽然平时用不到，但是又很有深度。大家按兴趣就好啦</p>\n<h1 id=\"总结\">总结</h1><p>一边写博客，一边翻阅资料，自己也又温习一遍，接下来打算继续深入下去，下一篇将会讲几个指令的原理，以及git对象之类的。最近比较忙，需要用点心去学习，也会把自己遇到的场景尽量告诉大家，让大家能接触到更多的实际场景，努力把这个系列写的更干货一些！</p>\n<p>其实AndroidStudio能覆盖大多数的使用场景了，下一篇将会说一些revert、reset，当发生错误提交时，怎么回滚代码。</p>\n<p>最近大帅的开了个QQ实践群（568863373），欢迎大家一起讨论，也可以关注我们的公众号：<code>魔都三帅</code></p>\n<p><img src=\"http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg\" alt=\"公众号\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck0tihr7i00014irrmhpygidh","category_id":"ck0tihr7n00054irrfw379hq3","_id":"ck0tihr7r000d4irrczutim4k"},{"post_id":"ck0tihr7l00034irrf3dtto19","category_id":"ck0tihr7q000a4irr6aqj1jlh","_id":"ck0tihr7v000k4irrrebtkkej"},{"post_id":"ck0tihr7o00074irrll9lx8zv","category_id":"ck0tihr7s000f4irroz26yz9p","_id":"ck0tihr7y000q4irrvl132624"},{"post_id":"ck0tihr7v000j4irr6clu4av9","category_id":"ck0tihr7s000f4irroz26yz9p","_id":"ck0tihr7z000u4irrwrahvvvs"},{"post_id":"ck0tihr7w000o4irrdnn5xlmk","category_id":"ck0tihr7s000f4irroz26yz9p","_id":"ck0tihr80000x4irrc0djzjgl"},{"post_id":"ck0tihr7p00084irr7z6p8ui6","category_id":"ck0tihr7s000f4irroz26yz9p","_id":"ck0tihr8200124irr6mrie5rv"},{"post_id":"ck0tihr7p00094irr64xs2690","category_id":"ck0tihr7s000f4irroz26yz9p","_id":"ck0tihr8300144irrfp439x50"},{"post_id":"ck0tihr8100114irrb1posdbl","category_id":"ck0tihr7s000f4irroz26yz9p","_id":"ck0tihr8400194irr9w7fi09n"},{"post_id":"ck0tihr7r000c4irrarulrm35","category_id":"ck0tihr81000z4irr4zutw807","_id":"ck0tihr85001c4irrzs4r1fj5"},{"post_id":"ck0tihr8300174irrnydx12uv","category_id":"ck0tihr7q000a4irr6aqj1jlh","_id":"ck0tihr85001g4irruj57jt4p"},{"post_id":"ck0tihr7s000e4irr40nzaxxh","category_id":"ck0tihr7s000f4irroz26yz9p","_id":"ck0tihr86001i4irrsheepq8h"},{"post_id":"ck0tihr7u000h4irr9n6fbzlb","category_id":"ck0tihr85001d4irr7wa68z7f","_id":"ck0tihr86001m4irrggnucio1"},{"post_id":"ck0tihr7x000p4irr4s8ywqol","category_id":"ck0tihr86001j4irr33573j7s","_id":"ck0tihr87001r4irre9csaygs"},{"post_id":"ck0tihr8200134irr0dyi1im4","category_id":"ck0tihr85001d4irr7wa68z7f","_id":"ck0tihr88001w4irr1c8wov4m"},{"post_id":"ck0tihr84001a4irr1lueev8e","category_id":"ck0tihr86001j4irr33573j7s","_id":"ck0tihr88001z4irrwqcwjg3f"},{"post_id":"ck0tihrb2002q4irrc0xu01je","category_id":"ck0tihr7s000f4irroz26yz9p","_id":"ck0tihrb5002s4irrri093ugg"}],"PostTag":[{"post_id":"ck0tihr7i00014irrmhpygidh","tag_id":"ck0tihr7o00064irr0s1jtwey","_id":"ck0tihr7u000i4irrkv8zfpxm"},{"post_id":"ck0tihr7i00014irrmhpygidh","tag_id":"ck0tihr7q000b4irro3280gds","_id":"ck0tihr7v000l4irr2n88scwo"},{"post_id":"ck0tihr7l00034irrf3dtto19","tag_id":"ck0tihr7o00064irr0s1jtwey","_id":"ck0tihr7z000v4irrhbvweiej"},{"post_id":"ck0tihr7l00034irrf3dtto19","tag_id":"ck0tihr7v000m4irrck519xtd","_id":"ck0tihr80000y4irr4d494dpq"},{"post_id":"ck0tihr7o00074irrll9lx8zv","tag_id":"ck0tihr7o00064irr0s1jtwey","_id":"ck0tihr8400184irrfh0zae14"},{"post_id":"ck0tihr7o00074irrll9lx8zv","tag_id":"ck0tihr8100104irrjjmc1f47","_id":"ck0tihr85001b4irrhxt83y81"},{"post_id":"ck0tihr7p00084irr7z6p8ui6","tag_id":"ck0tihr7o00064irr0s1jtwey","_id":"ck0tihr85001f4irry9iwpzd0"},{"post_id":"ck0tihr7p00084irr7z6p8ui6","tag_id":"ck0tihr8100104irrjjmc1f47","_id":"ck0tihr86001h4irr1ksrr5em"},{"post_id":"ck0tihr7p00094irr64xs2690","tag_id":"ck0tihr7o00064irr0s1jtwey","_id":"ck0tihr86001l4irrior9tmnr"},{"post_id":"ck0tihr7p00094irr64xs2690","tag_id":"ck0tihr85001e4irrszzjwbp5","_id":"ck0tihr86001n4irr3c6mdz99"},{"post_id":"ck0tihr7r000c4irrarulrm35","tag_id":"ck0tihr7o00064irr0s1jtwey","_id":"ck0tihr87001q4irr13ear3b4"},{"post_id":"ck0tihr7r000c4irrarulrm35","tag_id":"ck0tihr86001k4irrpedbpvnz","_id":"ck0tihr87001s4irr2yxculih"},{"post_id":"ck0tihr7s000e4irr40nzaxxh","tag_id":"ck0tihr7o00064irr0s1jtwey","_id":"ck0tihr88001v4irrnu35x5kr"},{"post_id":"ck0tihr7s000e4irr40nzaxxh","tag_id":"ck0tihr86001p4irrivst2xp9","_id":"ck0tihr88001x4irr18b0v7yq"},{"post_id":"ck0tihr7u000h4irr9n6fbzlb","tag_id":"ck0tihr87001u4irr7fnoajge","_id":"ck0tihr8900214irreu4ljohb"},{"post_id":"ck0tihr7u000h4irr9n6fbzlb","tag_id":"ck0tihr88001y4irrq1e86pb5","_id":"ck0tihr8900224irrvu61o2du"},{"post_id":"ck0tihr7v000j4irr6clu4av9","tag_id":"ck0tihr7o00064irr0s1jtwey","_id":"ck0tihr8900244irrqoxgqmmo"},{"post_id":"ck0tihr7v000j4irr6clu4av9","tag_id":"ck0tihr86001p4irrivst2xp9","_id":"ck0tihr8900254irr35tqz7vp"},{"post_id":"ck0tihr7w000o4irrdnn5xlmk","tag_id":"ck0tihr87001u4irr7fnoajge","_id":"ck0tihr8a00284irrd9lpjttf"},{"post_id":"ck0tihr7w000o4irrdnn5xlmk","tag_id":"ck0tihr88001y4irrq1e86pb5","_id":"ck0tihr8a00294irrwwba0fzb"},{"post_id":"ck0tihr7z000t4irrfykmoocn","tag_id":"ck0tihr7o00064irr0s1jtwey","_id":"ck0tihr8a002b4irrtz8ztcls"},{"post_id":"ck0tihr7z000t4irrfykmoocn","tag_id":"ck0tihr85001e4irrszzjwbp5","_id":"ck0tihr8b002c4irrzdem9pcu"},{"post_id":"ck0tihr80000w4irr98905mds","tag_id":"ck0tihr7o00064irr0s1jtwey","_id":"ck0tihr8c002e4irrxoz37jk1"},{"post_id":"ck0tihr80000w4irr98905mds","tag_id":"ck0tihr85001e4irrszzjwbp5","_id":"ck0tihr8c002f4irr234gy8ub"},{"post_id":"ck0tihr8100114irrb1posdbl","tag_id":"ck0tihr87001u4irr7fnoajge","_id":"ck0tihr8d002i4irrs7ma571c"},{"post_id":"ck0tihr8100114irrb1posdbl","tag_id":"ck0tihr88001y4irrq1e86pb5","_id":"ck0tihr8d002j4irrp6goqrqv"},{"post_id":"ck0tihr8200134irr0dyi1im4","tag_id":"ck0tihr87001u4irr7fnoajge","_id":"ck0tihr8e002m4irrds991dd7"},{"post_id":"ck0tihr8200134irr0dyi1im4","tag_id":"ck0tihr88001y4irrq1e86pb5","_id":"ck0tihr8e002n4irrc1p73h3y"},{"post_id":"ck0tihr8300174irrnydx12uv","tag_id":"ck0tihr7o00064irr0s1jtwey","_id":"ck0tihr8f002o4irr5s94mwtl"},{"post_id":"ck0tihr8300174irrnydx12uv","tag_id":"ck0tihr8e002l4irr6flus51m","_id":"ck0tihr8f002p4irrskyb1pxk"},{"post_id":"ck0tihrb2002q4irrc0xu01je","tag_id":"ck0tihr87001u4irr7fnoajge","_id":"ck0tihrb4002r4irrql6zfrv1"},{"post_id":"ck0tihrb2002q4irrc0xu01je","tag_id":"ck0tihr88001y4irrq1e86pb5","_id":"ck0tihrb5002t4irr2ddq2ygd"}],"Tag":[{"name":"Android","_id":"ck0tihr7o00064irr0s1jtwey"},{"name":"IPC","_id":"ck0tihr7q000b4irro3280gds"},{"name":"总结","_id":"ck0tihr7v000m4irrck519xtd"},{"name":"Thread","_id":"ck0tihr8100104irrjjmc1f47"},{"name":"ReactNative","_id":"ck0tihr85001e4irrszzjwbp5"},{"name":"实践","_id":"ck0tihr86001k4irrpedbpvnz"},{"name":"组件化","_id":"ck0tihr86001p4irrivst2xp9"},{"name":"Git","_id":"ck0tihr87001u4irr7fnoajge"},{"name":"版本控制","_id":"ck0tihr88001y4irrq1e86pb5"},{"name":"TouchEvent","_id":"ck0tihr8e002l4irr6flus51m"}]}}